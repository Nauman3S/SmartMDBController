   1               		.file	"mdb.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               	.global	statePos
  13               	statePos:
  14               	.LFB6:
  15               		.file 1 "mdb.c"
   1:mdb.c         **** 
   2:mdb.c         **** #ifndef F_CPU
   3:mdb.c         **** #define F_CPU 16000000UL
   4:mdb.c         **** #endif
   5:mdb.c         **** 
   6:mdb.c         **** #include <avr/io.h>
   7:mdb.c         **** #include <inttypes.h>
   8:mdb.c         **** #include <avr/interrupt.h>
   9:mdb.c         **** #include <avr/pgmspace.h>
  10:mdb.c         **** #include <stdlib.h>
  11:mdb.c         **** #include <stdio.h>
  12:mdb.c         **** #include "usart.h"
  13:mdb.c         **** #include "uplink.h"
  14:mdb.c         **** #include "mdb.h"
  15:mdb.c         **** #include "txSwitch.h"
  16:mdb.c         **** #include "vendSessionStates.h"
  17:mdb.c         **** 
  18:mdb.c         **** #define TXSWITCH 0
  19:mdb.c         **** uint8_t MDB_USART_TX_READY = 1;
  20:mdb.c         **** 
  21:mdb.c         **** uint8_t mdb_state = MDB_INACTIVE;
  22:mdb.c         **** uint8_t mdb_poll_reply = MDB_REPLY_ACK;
  23:mdb.c         **** uint8_t mdb_active_cmd = MDB_IDLE;
  24:mdb.c         **** 
  25:mdb.c         **** uint8_t reset_done = FALSE;
  26:mdb.c         **** 
  27:mdb.c         **** extern volatile uint8_t cmd_var[MAX_VAR];
  28:mdb.c         **** 
  29:mdb.c         **** vmcCfg_t vmc = {0, 0, 0, 0};
  30:mdb.c         **** vmcPrice_t price = {0, 0};
  31:mdb.c         **** 
  32:mdb.c         **** int m = 0;
  33:mdb.c         **** 
  34:mdb.c         **** int statePos()
  35:mdb.c         **** {
  16               		.loc 1 35 1 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  36:mdb.c         **** 
  37:mdb.c         ****     return m;
  22               		.loc 1 37 5 view .LVU1
  38:mdb.c         **** }
  23               		.loc 1 38 1 is_stmt 0 view .LVU2
  24 0000 8091 0000 		lds r24,m
  25 0004 9091 0000 		lds r25,m+1
  26               	/* epilogue start */
  27 0008 0895      		ret
  28               		.cfi_endproc
  29               	.LFE6:
  31               	.global	mdb_reset
  33               	mdb_reset:
  34               	.LFB8:
  39:mdb.c         **** 
  40:mdb.c         **** cdCfg_t cd = {
  41:mdb.c         ****     0x01,   // Reader CFG (constant)
  42:mdb.c         ****     0x02,   // Feature Level [1,2,3]   ////feature level of nayax is 2
  43:mdb.c         ****     0x01CA, // Country Code,,,1458MYR  ISO 4217 Country code
  44:mdb.c         ****     0x01,   // Scale Factor
  45:mdb.c         ****     0x00,   // Decimal Places
  46:mdb.c         ****     0x07,   // max Response Time
  47:mdb.c         ****     0x0D    // Misc Options/        //org 00
  48:mdb.c         **** };
  49:mdb.c         **** 
  50:mdb.c         **** Stage3DataTest s3dT = {
  51:mdb.c         ****     0x00};
  52:mdb.c         **** 
  53:mdb.c         **** Stage3Data s3d = {
  54:mdb.c         ****     0x09,
  55:mdb.c         ****     0x4E,
  56:mdb.c         ****     0x59,
  57:mdb.c         ****     0x58,
  58:mdb.c         ****     0x30,
  59:mdb.c         ****     0x30,
  60:mdb.c         ****     0x30,
  61:mdb.c         ****     0x30,
  62:mdb.c         ****     0x30,
  63:mdb.c         ****     0x30,
  64:mdb.c         ****     0x32,
  65:mdb.c         ****     0x36,
  66:mdb.c         ****     0x33,
  67:mdb.c         ****     0x33,
  68:mdb.c         ****     0x32,
  69:mdb.c         ****     0x30,
  70:mdb.c         ****     0x44,
  71:mdb.c         ****     0x4D,
  72:mdb.c         ****     0x58,
  73:mdb.c         ****     0x20,
  74:mdb.c         ****     0x2D,
  75:mdb.c         ****     0x20,
  76:mdb.c         ****     0x32,
  77:mdb.c         ****     0x30,
  78:mdb.c         ****     0x31,
  79:mdb.c         ****     0x31,
  80:mdb.c         ****     0x20,
  81:mdb.c         ****     0x20,
  82:mdb.c         ****     0x01,
  83:mdb.c         ****     0x00,
  84:mdb.c         ****     0x1B3
  85:mdb.c         **** 
  86:mdb.c         **** };
  87:mdb.c         **** 
  88:mdb.c         **** // cdCfg_t cd = {
  89:mdb.c         **** //     0x01,   // Reader CFG (constant)
  90:mdb.c         **** //     0x15,   // Feature Level [1,2,3]
  91:mdb.c         **** //     0x01CA, // // Country Code,,,1458MYR  ISO 4217 Country code
  92:mdb.c         **** //     0x01,   // Scale Factor
  93:mdb.c         **** //     0x00,   // Decimal Places
  94:mdb.c         **** //     0x10,   // max Response Time
  95:mdb.c         **** //     0x00    // Misc Options
  96:mdb.c         **** //     };
  97:mdb.c         **** 
  98:mdb.c         **** mdbSession_t session = {
  99:mdb.c         ****     {0, 0},
 100:mdb.c         ****     {0, 0, 0}};
 101:mdb.c         **** 
 102:mdb.c         **** void mdb_cmd_handler(void)
 103:mdb.c         **** {
 104:mdb.c         **** 
 105:mdb.c         ****     switch (mdb_active_cmd)
 106:mdb.c         ****     {
 107:mdb.c         **** 
 108:mdb.c         ****     case MDB_IDLE:
 109:mdb.c         ****         // Wait for enough data in buffer
 110:mdb.c         ****         if (buffer_level(MDB_USART, RX) < 2)
 111:mdb.c         ****             return;
 112:mdb.c         **** 
 113:mdb.c         ****         uint16_t data = recv_mdb(MDB_USART);
 114:mdb.c         **** 
 115:mdb.c         ****         // if modebit is set and command is in command range for cashless device
 116:mdb.c         ****         if ((data & 0x100) == 0x100 && MDB_RESET <= (data ^ 0x100) && (data ^ 0x100) <= MDB_READER)
 117:mdb.c         ****         {
 118:mdb.c         **** 
 119:mdb.c         ****             mdb_active_cmd = (data ^ 0x100);
 120:mdb.c         **** 
 121:mdb.c         ****             if (!reset_done && mdb_active_cmd != MDB_RESET)
 122:mdb.c         ****             {
 123:mdb.c         ****                 mdb_active_cmd = MDB_IDLE;
 124:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("resetting\n"));
 125:mdb.c         ****                 //flag=0,1
 126:mdb.c         ****             }
 127:mdb.c         ****         }
 128:mdb.c         ****         break;
 129:mdb.c         **** 
 130:mdb.c         ****     case MDB_RESET:
 131:mdb.c         ****         mdb_reset();
 132:mdb.c         ****         break;
 133:mdb.c         **** 
 134:mdb.c         ****     case MDB_SETUP:
 135:mdb.c         ****         mdb_setup();
 136:mdb.c         ****         break;
 137:mdb.c         **** 
 138:mdb.c         ****     /*case MDB_STAGE3:
 139:mdb.c         ****             mdb_stage3();
 140:mdb.c         ****         break;
 141:mdb.c         **** */
 142:mdb.c         ****     case MDB_POLL:
 143:mdb.c         ****         mdb_poll();
 144:mdb.c         ****         break;
 145:mdb.c         **** 
 146:mdb.c         ****     case MDB_VEND:
 147:mdb.c         ****         mdb_vend();
 148:mdb.c         ****         break;
 149:mdb.c         **** 
 150:mdb.c         ****     case MDB_READER:
 151:mdb.c         ****         mdb_reader();
 152:mdb.c         ****         break;
 153:mdb.c         ****     }
 154:mdb.c         **** }
 155:mdb.c         **** 
 156:mdb.c         **** void mdb_reset(void)
 157:mdb.c         **** {
  35               		.loc 1 157 1 is_stmt 1 view -0
  36               		.cfi_startproc
  37               	/* prologue: function */
  38               	/* frame size = 0 */
  39               	/* stack size = 0 */
  40               	.L__stack_usage = 0
 158:mdb.c         **** #if TXSWITCH == 1
 159:mdb.c         ****     txSwitchState(PIN12, 0);
 160:mdb.c         **** #endif
 161:mdb.c         ****     // Wait for enough data in buffer to proceed reset
 162:mdb.c         ****     if (buffer_level(MDB_USART, RX) < 2)
  41               		.loc 1 162 5 view .LVU4
  42               		.loc 1 162 9 is_stmt 0 view .LVU5
  43 000a 60E0      		ldi r22,0
  44 000c 81E0      		ldi r24,lo8(1)
  45 000e 0E94 0000 		call buffer_level
  46               	.LVL0:
  47               		.loc 1 162 8 view .LVU6
  48 0012 8230      		cpi r24,lo8(2)
  49 0014 00F0      		brlo .L2
 163:mdb.c         ****         return;
 164:mdb.c         **** 
 165:mdb.c         **** #if DEBUG == 1
 166:mdb.c         ****     send_str_p(UPLINK_USART, PSTR("RESET\r\n"));
 167:mdb.c         **** #endif
 168:mdb.c         **** 
 169:mdb.c         ****     // validate checksum
 170:mdb.c         ****     if (recv_mdb(MDB_USART) != MDB_RESET)
  50               		.loc 1 170 5 is_stmt 1 view .LVU7
  51               		.loc 1 170 9 is_stmt 0 view .LVU8
  52 0016 81E0      		ldi r24,lo8(1)
  53 0018 0E94 0000 		call recv_mdb
  54               	.LVL1:
  55               		.loc 1 170 8 view .LVU9
  56 001c 4097      		sbiw r24,16
  57 001e 01F0      		breq .L4
 171:mdb.c         ****     {
 172:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
  58               		.loc 1 172 9 is_stmt 1 view .LVU10
  59               		.loc 1 172 24 is_stmt 0 view .LVU11
  60 0020 1092 0000 		sts mdb_active_cmd,__zero_reg__
 173:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
  61               		.loc 1 173 9 is_stmt 1 view .LVU12
  62               		.loc 1 173 24 is_stmt 0 view .LVU13
  63 0024 1092 0000 		sts mdb_poll_reply,__zero_reg__
 174:mdb.c         ****         send_str_p(UPLINK_USART, PSTR("Error: invalid checksum for [RESET]\r\n"));
  64               		.loc 1 174 9 is_stmt 1 view .LVU14
  65               	.LBB7:
  66               		.loc 1 174 34 view .LVU15
  67               		.loc 1 174 34 view .LVU16
  68               	.LBE7:
  69               		.loc 1 174 9 is_stmt 0 view .LVU17
  70 0028 60E0      		ldi r22,lo8(__c.37)
  71 002a 70E0      		ldi r23,hi8(__c.37)
  72 002c 80E0      		ldi r24,0
  73 002e 0C94 0000 		jmp send_str_p
  74               	.LVL2:
  75               	.L4:
  76               	.LBB8:
  77               	.LBI8:
 156:mdb.c         **** {
  78               		.loc 1 156 6 is_stmt 1 view .LVU18
  79               	.LBB9:
 175:mdb.c         **** #if TXSWITCH == 1
 176:mdb.c         ****         txSwitchState(PIN12, 0);
 177:mdb.c         **** #endif
 178:mdb.c         ****         return;
 179:mdb.c         ****     }
 180:mdb.c         **** 
 181:mdb.c         ****     // Reset everything
 182:mdb.c         ****     vmc.feature_level = 0;
  80               		.loc 1 182 5 view .LVU19
  81               		.loc 1 182 23 is_stmt 0 view .LVU20
  82 0032 1092 0000 		sts vmc,__zero_reg__
 183:mdb.c         ****     vmc.dispaly_cols = 0;
  83               		.loc 1 183 5 is_stmt 1 view .LVU21
  84               		.loc 1 183 22 is_stmt 0 view .LVU22
  85 0036 1092 0000 		sts vmc+1,__zero_reg__
 184:mdb.c         ****     vmc.dispaly_rows = 0;
  86               		.loc 1 184 5 is_stmt 1 view .LVU23
  87               		.loc 1 184 22 is_stmt 0 view .LVU24
  88 003a 1092 0000 		sts vmc+2,__zero_reg__
 185:mdb.c         ****     vmc.dispaly_info = 0;
  89               		.loc 1 185 5 is_stmt 1 view .LVU25
  90               		.loc 1 185 22 is_stmt 0 view .LVU26
  91 003e 1092 0000 		sts vmc+3,__zero_reg__
 186:mdb.c         ****     price.max = 0;
  92               		.loc 1 186 5 is_stmt 1 view .LVU27
  93               		.loc 1 186 15 is_stmt 0 view .LVU28
  94 0042 1092 0000 		sts price+1,__zero_reg__
  95 0046 1092 0000 		sts price,__zero_reg__
 187:mdb.c         ****     price.min = 0;
  96               		.loc 1 187 5 is_stmt 1 view .LVU29
  97               		.loc 1 187 15 is_stmt 0 view .LVU30
  98 004a 1092 0000 		sts price+2+1,__zero_reg__
  99 004e 1092 0000 		sts price+2,__zero_reg__
 188:mdb.c         **** 
 189:mdb.c         ****     // Send ACK
 190:mdb.c         ****     send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY);
 100               		.loc 1 190 5 is_stmt 1 view .LVU31
 101 0052 4091 0000 		lds r20,MDB_USART_TX_READY
 102 0056 60E0      		ldi r22,0
 103 0058 71E0      		ldi r23,lo8(1)
 104 005a 81E0      		ldi r24,lo8(1)
 105 005c 0E94 0000 		call send_mdb
 106               	.LVL3:
 191:mdb.c         ****     reset_done = TRUE;
 107               		.loc 1 191 5 view .LVU32
 108               		.loc 1 191 16 is_stmt 0 view .LVU33
 109 0060 81E0      		ldi r24,lo8(1)
 110 0062 8093 0000 		sts reset_done,r24
 192:mdb.c         ****     mdb_state = MDB_INACTIVE; //orignal
 111               		.loc 1 192 5 is_stmt 1 view .LVU34
 112               		.loc 1 192 15 is_stmt 0 view .LVU35
 113 0066 1092 0000 		sts mdb_state,__zero_reg__
 193:mdb.c         ****     //mdb_state= MDB_ENABLED;///not orignal
 194:mdb.c         ****     mdb_active_cmd = MDB_IDLE;
 114               		.loc 1 194 5 is_stmt 1 view .LVU36
 115               		.loc 1 194 20 is_stmt 0 view .LVU37
 116 006a 1092 0000 		sts mdb_active_cmd,__zero_reg__
 195:mdb.c         **** 
 196:mdb.c         ****     mdb_poll_reply = MDB_REPLY_JUST_RESET;
 117               		.loc 1 196 5 is_stmt 1 view .LVU38
 118               		.loc 1 196 20 is_stmt 0 view .LVU39
 119 006e 8093 0000 		sts mdb_poll_reply,r24
 120               	.L2:
 121               	/* epilogue start */
 122               	.LBE9:
 123               	.LBE8:
 197:mdb.c         **** }
 124               		.loc 1 197 1 view .LVU40
 125 0072 0895      		ret
 126               		.cfi_endproc
 127               	.LFE8:
 129               		.section	.rodata.str1.1,"aMS",@progbits,1
 130               	.LC0:
 131 0000 5354 4147 		.string	"STAGE 3 DATA[%d] = %#08x"
 131      4520 3320 
 131      4441 5441 
 131      5B25 645D 
 131      203D 2025 
 132               		.text
 133               	.global	mdb_stage3
 135               	mdb_stage3:
 136               	.LFB10:
 198:mdb.c         **** 
 199:mdb.c         **** void mdb_setup(void)
 200:mdb.c         **** {
 201:mdb.c         **** 
 202:mdb.c         ****     static uint16_t checksum = MDB_SETUP;
 203:mdb.c         ****     static uint8_t state = 0;
 204:mdb.c         ****     uint8_t data[6] = {0, 0, 0, 0, 0, 0};
 205:mdb.c         ****     uint8_t index = 0;
 206:mdb.c         **** 
 207:mdb.c         ****     // txSwitchState(PIN12,0);
 208:mdb.c         **** 
 209:mdb.c         ****     if (state < 2)
 210:mdb.c         ****     {
 211:mdb.c         ****         // Wait for enough data in buffer
 212:mdb.c         ****         if (buffer_level(MDB_USART, RX) < 12)
 213:mdb.c         ****             return;
 214:mdb.c         **** 
 215:mdb.c         ****         // fetch the data from buffer
 216:mdb.c         ****         for (index = 0; index < 6; index++)
 217:mdb.c         ****         {
 218:mdb.c         ****             data[index] = (uint8_t)recv_mdb(MDB_USART);
 219:mdb.c         ****         }
 220:mdb.c         **** 
 221:mdb.c         ****         // calculate checksum
 222:mdb.c         **** 
 223:mdb.c         ****         checksum += data[0] + data[1] + data[2] + data[3] + data[4];
 224:mdb.c         **** 
 225:mdb.c         ****         checksum = checksum & 0xFF;
 226:mdb.c         ****         // validate checksum
 227:mdb.c         ****         char abc[40];
 228:mdb.c         ****         sprintf(abc, "data[5]: %#08x ;;checksum-calc: %#08x\r\n", data[5], checksum);
 229:mdb.c         ****         send_str(UPLINK_USART, abc);
 230:mdb.c         ****         if (checksum != data[5])
 231:mdb.c         ****         {
 232:mdb.c         ****             state = 0;
 233:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 234:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 235:mdb.c         ****             checksum = MDB_SETUP; //MDB_SETUP;
 236:mdb.c         **** 
 237:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("Error: invalid checksum [SETUP]\r\n"));
 238:mdb.c         **** #if TXSWITCH == 1
 239:mdb.c         ****             txSwitchState(PIN12, 0);
 240:mdb.c         **** #endif
 241:mdb.c         ****             return;
 242:mdb.c         ****         }
 243:mdb.c         **** 
 244:mdb.c         ****         state = data[0];
 245:mdb.c         ****     }
 246:mdb.c         **** 
 247:mdb.c         ****     // Switch setup state
 248:mdb.c         ****     switch (state)
 249:mdb.c         ****     {
 250:mdb.c         **** 
 251:mdb.c         ****     // Stage 1 - config Data
 252:mdb.c         ****     case 0:
 253:mdb.c         **** 
 254:mdb.c         **** #if DEBUG == 1
 255:mdb.c         ****         send_str_p(UPLINK_USART, PSTR("SETUP STAGE 1\r\n"));
 256:mdb.c         **** #endif
 257:mdb.c         **** 
 258:mdb.c         ****         // store VMC configuration data
 259:mdb.c         ****         vmc.feature_level = data[1];
 260:mdb.c         ****         vmc.dispaly_cols = data[2];
 261:mdb.c         ****         vmc.dispaly_rows = data[3];
 262:mdb.c         ****         vmc.dispaly_info = data[4];
 263:mdb.c         **** 
 264:mdb.c         ****         // calculate checksum for own configuration
 265:mdb.c         ****         checksum = ((cd.reader_cfg +
 266:mdb.c         ****                      cd.feature_level +
 267:mdb.c         ****                      (cd.country_code >> 8) +
 268:mdb.c         ****                      (cd.country_code & 0xFF) +
 269:mdb.c         ****                      cd.scale_factor +
 270:mdb.c         ****                      cd.decimal_places +
 271:mdb.c         ****                      cd.max_resp_time +
 272:mdb.c         ****                      cd.misc_options) &
 273:mdb.c         ****                     0xFF) |
 274:mdb.c         ****                    0x100;
 275:mdb.c         **** 
 276:mdb.c         ****         // Send own config data
 277:mdb.c         ****         send_mdb(MDB_USART, cd.reader_cfg, MDB_USART_TX_READY);
 278:mdb.c         ****         send_mdb(MDB_USART, cd.feature_level, MDB_USART_TX_READY);
 279:mdb.c         ****         send_mdb(MDB_USART, (cd.country_code >> 8), MDB_USART_TX_READY);
 280:mdb.c         ****         send_mdb(MDB_USART, (cd.country_code & 0xFF), MDB_USART_TX_READY);
 281:mdb.c         ****         send_mdb(MDB_USART, cd.scale_factor, MDB_USART_TX_READY);
 282:mdb.c         ****         send_mdb(MDB_USART, cd.decimal_places, MDB_USART_TX_READY);
 283:mdb.c         ****         send_mdb(MDB_USART, cd.max_resp_time, MDB_USART_TX_READY);
 284:mdb.c         ****         send_mdb(MDB_USART, cd.misc_options, MDB_USART_TX_READY);
 285:mdb.c         ****         send_mdb(MDB_USART, checksum, MDB_USART_TX_READY);
 286:mdb.c         **** 
 287:mdb.c         ****         state = 2;
 288:mdb.c         **** 
 289:mdb.c         ****         // reset checksum for next stage
 290:mdb.c         ****         checksum = MDB_SETUP; //MDB_SETUP;
 291:mdb.c         ****         return;
 292:mdb.c         **** 
 293:mdb.c         ****         break;
 294:mdb.c         **** 
 295:mdb.c         ****     // Stage 2 - price data
 296:mdb.c         ****     case 1:
 297:mdb.c         **** 
 298:mdb.c         **** #if DEBUG == 1
 299:mdb.c         ****         send_str_p(UPLINK_USART, PSTR("SETUP STAGE 2\r\n"));
 300:mdb.c         **** #endif
 301:mdb.c         ****         //mdb_state = MDB_ENABLED;///not in orignal
 302:mdb.c         ****         // store VMC price data
 303:mdb.c         ****         price.max = (data[1] << 8) | data[2];
 304:mdb.c         ****         price.min = (data[3] << 8) | data[4];
 305:mdb.c         **** 
 306:mdb.c         ****         // send ACK
 307:mdb.c         ****         send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY); /////*uncomment it
 308:mdb.c         **** 
 309:mdb.c         ****         // Set MDB State
 310:mdb.c         ****         ////Orignal MDB_DISABLED
 311:mdb.c         ****         mdb_state = MDB_ENABLED; ////////////try changing to ENABLED////orignal disabled
 312:mdb.c         ****         //reset_done=TRUE;//////this line is not in orignal code
 313:mdb.c         ****         state = 0; //orignal 0
 314:mdb.c         **** 
 315:mdb.c         ****         checksum = MDB_SETUP; //MDB_SETUP; //orginal is 17 in decimal
 316:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 317:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 318:mdb.c         ****         //mdb_poll_reply = MDB_REPLY_DISPLAY_REQ;
 319:mdb.c         **** 
 320:mdb.c         ****         //mdb_state = MDB_ENABLED;////not in orignal
 321:mdb.c         ****         char abc2[30];
 322:mdb.c         ****         sprintf(abc2, "stage2checksum: %#08x mdb_poll_reply : %#08x\r\n", checksum, mdb_poll_reply)
 323:mdb.c         ****         send_str(UPLINK_USART, abc2);
 324:mdb.c         **** 
 325:mdb.c         ****         m = 1;
 326:mdb.c         ****         mdb_stage3();
 327:mdb.c         **** 
 328:mdb.c         ****         return;
 329:mdb.c         ****         break;
 330:mdb.c         **** 
 331:mdb.c         ****     // ACK from VMC for MateDealer cfg data
 332:mdb.c         ****     case 2:
 333:mdb.c         ****         // Wait for enough data in buffer
 334:mdb.c         ****         if (buffer_level(MDB_USART, RX) < 2)
 335:mdb.c         ****             return;
 336:mdb.c         **** 
 337:mdb.c         **** #if DEBUG == 1
 338:mdb.c         ****         send_str_p(UPLINK_USART, PSTR("SETUP WAIT FOR ACK\r\n"));
 339:mdb.c         **** //txSwitchState(PIN12,0);
 340:mdb.c         **** #if TXSWITCH == 1
 341:mdb.c         ****         txSwitchState(PIN12, 0); ////FLAG0
 342:mdb.c         **** #endif
 343:mdb.c         ****             //MDB_USART_TX_READY=0;
 344:mdb.c         **** #endif
 345:mdb.c         **** 
 346:mdb.c         ****         // Check if VMC sent ACK
 347:mdb.c         ****         data[0] = recv_mdb(MDB_USART);
 348:mdb.c         **** 
 349:mdb.c         ****         /*
 350:mdb.c         ****              * The following check if VMC answers with ACK to the Setup data we send is not as in t
 351:mdb.c         ****              * The Sanden Vendo VDI 100-5 send the setup request twice, and ACK with 0x000 first ti
 352:mdb.c         ****              * (as in the spec!) and 0x001 the second time !? 
 353:mdb.c         ****              */
 354:mdb.c         ****         ///if(data[0] != 0x000 && data[0] != 0x001) { //org
 355:mdb.c         **** 
 356:mdb.c         ****         if (data[0] != 0x000 && data[0] != 0x001)
 357:mdb.c         ****         {
 358:mdb.c         ****             state = 0; ////0 in org
 359:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 360:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 361:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [SETUP]"));
 362:mdb.c         ****             return;
 363:mdb.c         ****         }
 364:mdb.c         **** 
 365:mdb.c         ****         state = 0; ////0 in org
 366:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 367:mdb.c         **** 
 368:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 369:mdb.c         **** 
 370:mdb.c         ****         return;
 371:mdb.c         ****         break;
 372:mdb.c         **** 
 373:mdb.c         ****     // Unknown Subcommand from VMC
 374:mdb.c         ****     default:
 375:mdb.c         ****         send_str_p(UPLINK_USART, PSTR("Error: unknown subcommand [SETUP]\r\n"));
 376:mdb.c         ****         state = 0;
 377:mdb.c         **** 
 378:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 379:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 380:mdb.c         ****         return;
 381:mdb.c         ****         break;
 382:mdb.c         ****     }
 383:mdb.c         **** }
 384:mdb.c         **** 
 385:mdb.c         **** void mdb_stage3(void)
 386:mdb.c         **** {
 137               		.loc 1 386 1 is_stmt 1 view -0
 138               		.cfi_startproc
 139 0074 AF92      		push r10
 140               	.LCFI0:
 141               		.cfi_def_cfa_offset 4
 142               		.cfi_offset 10, -3
 143 0076 BF92      		push r11
 144               	.LCFI1:
 145               		.cfi_def_cfa_offset 5
 146               		.cfi_offset 11, -4
 147 0078 CF92      		push r12
 148               	.LCFI2:
 149               		.cfi_def_cfa_offset 6
 150               		.cfi_offset 12, -5
 151 007a DF92      		push r13
 152               	.LCFI3:
 153               		.cfi_def_cfa_offset 7
 154               		.cfi_offset 13, -6
 155 007c EF92      		push r14
 156               	.LCFI4:
 157               		.cfi_def_cfa_offset 8
 158               		.cfi_offset 14, -7
 159 007e FF92      		push r15
 160               	.LCFI5:
 161               		.cfi_def_cfa_offset 9
 162               		.cfi_offset 15, -8
 163 0080 0F93      		push r16
 164               	.LCFI6:
 165               		.cfi_def_cfa_offset 10
 166               		.cfi_offset 16, -9
 167 0082 1F93      		push r17
 168               	.LCFI7:
 169               		.cfi_def_cfa_offset 11
 170               		.cfi_offset 17, -10
 171 0084 CF93      		push r28
 172               	.LCFI8:
 173               		.cfi_def_cfa_offset 12
 174               		.cfi_offset 28, -11
 175 0086 DF93      		push r29
 176               	.LCFI9:
 177               		.cfi_def_cfa_offset 13
 178               		.cfi_offset 29, -12
 179 0088 CDB7      		in r28,__SP_L__
 180 008a DEB7      		in r29,__SP_H__
 181               	.LCFI10:
 182               		.cfi_def_cfa_register 28
 183 008c C05D      		subi r28,-48
 184 008e D109      		sbc r29,__zero_reg__
 185               	.LCFI11:
 186               		.cfi_def_cfa_offset 221
 187 0090 0FB6      		in __tmp_reg__,__SREG__
 188 0092 F894      		cli
 189 0094 DEBF      		out __SP_H__,r29
 190 0096 0FBE      		out __SREG__,__tmp_reg__
 191 0098 CDBF      		out __SP_L__,r28
 192               	/* prologue: function */
 193               	/* frame size = 208 */
 194               	/* stack size = 218 */
 195               	.L__stack_usage = 218
 387:mdb.c         ****     uint8_t data2[128] = {0};
 196               		.loc 1 387 5 view .LVU42
 197               		.loc 1 387 13 is_stmt 0 view .LVU43
 198 009a 1A82      		std Y+2,__zero_reg__
 199 009c 1982      		std Y+1,__zero_reg__
 200 009e FE01      		movw r30,r28
 201 00a0 3396      		adiw r30,3
 202 00a2 8EE7      		ldi r24,lo8(126)
 203 00a4 DF01      		movw r26,r30
 204               		0:
 205 00a6 1D92      		st X+,__zero_reg__
 206 00a8 8A95      		dec r24
 207 00aa 01F4      		brne 0b
 388:mdb.c         ****     uint8_t index = 0;
 208               		.loc 1 388 5 is_stmt 1 view .LVU44
 209               	.LVL4:
 389:mdb.c         **** 
 390:mdb.c         ****     send_str_p(UPLINK_USART, PSTR("IN STAGE3\r\n"));
 210               		.loc 1 390 5 view .LVU45
 211               	.LBB10:
 212               		.loc 1 390 30 view .LVU46
 213               		.loc 1 390 30 view .LVU47
 214               	.LBE10:
 215               		.loc 1 390 5 is_stmt 0 view .LVU48
 216 00ac 60E0      		ldi r22,lo8(__c.31)
 217 00ae 70E0      		ldi r23,hi8(__c.31)
 218 00b0 80E0      		ldi r24,0
 219 00b2 0E94 0000 		call send_str_p
 220               	.LVL5:
 391:mdb.c         **** 
 392:mdb.c         ****     //if(buffer_level(MDB_USART,RX) < 12) return;
 393:mdb.c         ****     while (buffer_level(MDB_USART, RX) <= 62)
 221               		.loc 1 393 5 is_stmt 1 view .LVU49
 222               	.L6:
 223               		.loc 1 393 40 view .LVU50
 224               		.loc 1 393 12 is_stmt 0 view .LVU51
 225 00b6 60E0      		ldi r22,0
 226 00b8 81E0      		ldi r24,lo8(1)
 227 00ba 0E94 0000 		call buffer_level
 228               	.LVL6:
 229               		.loc 1 393 40 view .LVU52
 230 00be 8F33      		cpi r24,lo8(63)
 231 00c0 00F0      		brlo .L6
 394:mdb.c         ****     {
 395:mdb.c         ****         continue;
 396:mdb.c         ****     }
 397:mdb.c         ****     send_str_p(UPLINK_USART, PSTR("02 IN STAGE3\r\n"));
 232               		.loc 1 397 5 is_stmt 1 view .LVU53
 233               	.LBB11:
 234               		.loc 1 397 30 view .LVU54
 235               		.loc 1 397 30 view .LVU55
 236               	.LBE11:
 237               		.loc 1 397 5 is_stmt 0 view .LVU56
 238 00c2 60E0      		ldi r22,lo8(__c.30)
 239 00c4 70E0      		ldi r23,hi8(__c.30)
 240 00c6 80E0      		ldi r24,0
 241 00c8 0E94 0000 		call send_str_p
 242               	.LVL7:
 398:mdb.c         ****     // fetch the data from buffer
 399:mdb.c         ****     for (index = 0; index < 31; index++)
 243               		.loc 1 399 5 is_stmt 1 view .LVU57
 244               		.loc 1 399 27 view .LVU58
 245 00cc FE01      		movw r30,r28
 246 00ce 3196      		adiw r30,1
 247 00d0 6F01      		movw r12,r30
 248 00d2 7E01      		movw r14,r28
 249 00d4 F0E2      		ldi r31,32
 250 00d6 EF0E      		add r14,r31
 251 00d8 F11C      		adc r15,__zero_reg__
 397:mdb.c         ****     // fetch the data from buffer
 252               		.loc 1 397 5 is_stmt 0 view .LVU59
 253 00da 8601      		movw r16,r12
 254               	.LVL8:
 255               	.L7:
 400:mdb.c         ****     {
 401:mdb.c         ****         data2[index] = (uint8_t)recv_mdb(MDB_USART);
 256               		.loc 1 401 9 is_stmt 1 discriminator 3 view .LVU60
 257               		.loc 1 401 33 is_stmt 0 discriminator 3 view .LVU61
 258 00dc 81E0      		ldi r24,lo8(1)
 259 00de 0E94 0000 		call recv_mdb
 260               	.LVL9:
 261               		.loc 1 401 24 discriminator 3 view .LVU62
 262 00e2 D801      		movw r26,r16
 263 00e4 8D93      		st X+,r24
 264 00e6 8D01      		movw r16,r26
 399:mdb.c         ****     {
 265               		.loc 1 399 38 is_stmt 1 discriminator 3 view .LVU63
 399:mdb.c         ****     {
 266               		.loc 1 399 27 discriminator 3 view .LVU64
 267 00e8 AE15      		cp r26,r14
 268 00ea BF05      		cpc r27,r15
 269 00ec 01F4      		brne .L7
 402:mdb.c         ****     }
 403:mdb.c         **** 
 404:mdb.c         ****     //sprintf(abc, "STAGE 3 data[0]=%#08x   ,, data[1]=%#08x ,, data[2]=%#08x\r\n",data2[0],data2[1
 405:mdb.c         ****     send_str_p(0, PSTR("Sending up stage 3 data\r\n"));
 270               		.loc 1 405 5 view .LVU65
 271               	.LBB12:
 272               		.loc 1 405 19 view .LVU66
 273               		.loc 1 405 19 view .LVU67
 274               	.LBE12:
 275               		.loc 1 405 5 is_stmt 0 view .LVU68
 276 00ee 60E0      		ldi r22,lo8(__c.29)
 277 00f0 70E0      		ldi r23,hi8(__c.29)
 278 00f2 80E0      		ldi r24,0
 279 00f4 0E94 0000 		call send_str_p
 280               	.LVL10:
 406:mdb.c         **** 
 407:mdb.c         ****     send_mdb(MDB_USART, s3d.d0, MDB_USART_TX_READY);
 281               		.loc 1 407 5 is_stmt 1 view .LVU69
 282 00f8 6091 0000 		lds r22,s3d
 283 00fc 70E0      		ldi r23,0
 284 00fe 4091 0000 		lds r20,MDB_USART_TX_READY
 285 0102 81E0      		ldi r24,lo8(1)
 286 0104 0E94 0000 		call send_mdb
 287               	.LVL11:
 408:mdb.c         ****     send_mdb(MDB_USART, s3d.d1, MDB_USART_TX_READY);
 288               		.loc 1 408 5 view .LVU70
 289 0108 6091 0000 		lds r22,s3d+1
 290 010c 70E0      		ldi r23,0
 291 010e 4091 0000 		lds r20,MDB_USART_TX_READY
 292 0112 81E0      		ldi r24,lo8(1)
 293 0114 0E94 0000 		call send_mdb
 294               	.LVL12:
 409:mdb.c         ****     send_mdb(MDB_USART, s3d.d2, MDB_USART_TX_READY);
 295               		.loc 1 409 5 view .LVU71
 296 0118 6091 0000 		lds r22,s3d+2
 297 011c 70E0      		ldi r23,0
 298 011e 4091 0000 		lds r20,MDB_USART_TX_READY
 299 0122 81E0      		ldi r24,lo8(1)
 300 0124 0E94 0000 		call send_mdb
 301               	.LVL13:
 410:mdb.c         ****     send_mdb(MDB_USART, s3d.d3, MDB_USART_TX_READY);
 302               		.loc 1 410 5 view .LVU72
 303 0128 6091 0000 		lds r22,s3d+3
 304 012c 70E0      		ldi r23,0
 305 012e 4091 0000 		lds r20,MDB_USART_TX_READY
 306 0132 81E0      		ldi r24,lo8(1)
 307 0134 0E94 0000 		call send_mdb
 308               	.LVL14:
 411:mdb.c         ****     send_mdb(MDB_USART, s3d.d4, MDB_USART_TX_READY);
 309               		.loc 1 411 5 view .LVU73
 310 0138 6091 0000 		lds r22,s3d+4
 311 013c 70E0      		ldi r23,0
 312 013e 4091 0000 		lds r20,MDB_USART_TX_READY
 313 0142 81E0      		ldi r24,lo8(1)
 314 0144 0E94 0000 		call send_mdb
 315               	.LVL15:
 412:mdb.c         ****     send_mdb(MDB_USART, s3d.d5, MDB_USART_TX_READY);
 316               		.loc 1 412 5 view .LVU74
 317 0148 6091 0000 		lds r22,s3d+5
 318 014c 70E0      		ldi r23,0
 319 014e 4091 0000 		lds r20,MDB_USART_TX_READY
 320 0152 81E0      		ldi r24,lo8(1)
 321 0154 0E94 0000 		call send_mdb
 322               	.LVL16:
 413:mdb.c         ****     send_mdb(MDB_USART, s3d.d6, MDB_USART_TX_READY);
 323               		.loc 1 413 5 view .LVU75
 324 0158 6091 0000 		lds r22,s3d+6
 325 015c 70E0      		ldi r23,0
 326 015e 4091 0000 		lds r20,MDB_USART_TX_READY
 327 0162 81E0      		ldi r24,lo8(1)
 328 0164 0E94 0000 		call send_mdb
 329               	.LVL17:
 414:mdb.c         ****     send_mdb(MDB_USART, s3d.d7, MDB_USART_TX_READY);
 330               		.loc 1 414 5 view .LVU76
 331 0168 6091 0000 		lds r22,s3d+7
 332 016c 70E0      		ldi r23,0
 333 016e 4091 0000 		lds r20,MDB_USART_TX_READY
 334 0172 81E0      		ldi r24,lo8(1)
 335 0174 0E94 0000 		call send_mdb
 336               	.LVL18:
 415:mdb.c         ****     send_mdb(MDB_USART, s3d.d8, MDB_USART_TX_READY);
 337               		.loc 1 415 5 view .LVU77
 338 0178 6091 0000 		lds r22,s3d+8
 339 017c 70E0      		ldi r23,0
 340 017e 4091 0000 		lds r20,MDB_USART_TX_READY
 341 0182 81E0      		ldi r24,lo8(1)
 342 0184 0E94 0000 		call send_mdb
 343               	.LVL19:
 416:mdb.c         ****     send_mdb(MDB_USART, s3d.d9, MDB_USART_TX_READY);
 344               		.loc 1 416 5 view .LVU78
 345 0188 6091 0000 		lds r22,s3d+9
 346 018c 70E0      		ldi r23,0
 347 018e 4091 0000 		lds r20,MDB_USART_TX_READY
 348 0192 81E0      		ldi r24,lo8(1)
 349 0194 0E94 0000 		call send_mdb
 350               	.LVL20:
 417:mdb.c         ****     send_mdb(MDB_USART, s3d.d10, MDB_USART_TX_READY);
 351               		.loc 1 417 5 view .LVU79
 352 0198 6091 0000 		lds r22,s3d+10
 353 019c 70E0      		ldi r23,0
 354 019e 4091 0000 		lds r20,MDB_USART_TX_READY
 355 01a2 81E0      		ldi r24,lo8(1)
 356 01a4 0E94 0000 		call send_mdb
 357               	.LVL21:
 418:mdb.c         ****     send_mdb(MDB_USART, s3d.d11, MDB_USART_TX_READY);
 358               		.loc 1 418 5 view .LVU80
 359 01a8 6091 0000 		lds r22,s3d+11
 360 01ac 70E0      		ldi r23,0
 361 01ae 4091 0000 		lds r20,MDB_USART_TX_READY
 362 01b2 81E0      		ldi r24,lo8(1)
 363 01b4 0E94 0000 		call send_mdb
 364               	.LVL22:
 419:mdb.c         ****     send_mdb(MDB_USART, s3d.d12, MDB_USART_TX_READY);
 365               		.loc 1 419 5 view .LVU81
 366 01b8 6091 0000 		lds r22,s3d+12
 367 01bc 70E0      		ldi r23,0
 368 01be 4091 0000 		lds r20,MDB_USART_TX_READY
 369 01c2 81E0      		ldi r24,lo8(1)
 370 01c4 0E94 0000 		call send_mdb
 371               	.LVL23:
 420:mdb.c         ****     send_mdb(MDB_USART, s3d.d13, MDB_USART_TX_READY);
 372               		.loc 1 420 5 view .LVU82
 373 01c8 6091 0000 		lds r22,s3d+13
 374 01cc 70E0      		ldi r23,0
 375 01ce 4091 0000 		lds r20,MDB_USART_TX_READY
 376 01d2 81E0      		ldi r24,lo8(1)
 377 01d4 0E94 0000 		call send_mdb
 378               	.LVL24:
 421:mdb.c         ****     send_mdb(MDB_USART, s3d.d14, MDB_USART_TX_READY);
 379               		.loc 1 421 5 view .LVU83
 380 01d8 6091 0000 		lds r22,s3d+14
 381 01dc 70E0      		ldi r23,0
 382 01de 4091 0000 		lds r20,MDB_USART_TX_READY
 383 01e2 81E0      		ldi r24,lo8(1)
 384 01e4 0E94 0000 		call send_mdb
 385               	.LVL25:
 422:mdb.c         ****     send_mdb(MDB_USART, s3d.d15, MDB_USART_TX_READY);
 386               		.loc 1 422 5 view .LVU84
 387 01e8 6091 0000 		lds r22,s3d+15
 388 01ec 70E0      		ldi r23,0
 389 01ee 4091 0000 		lds r20,MDB_USART_TX_READY
 390 01f2 81E0      		ldi r24,lo8(1)
 391 01f4 0E94 0000 		call send_mdb
 392               	.LVL26:
 423:mdb.c         ****     send_mdb(MDB_USART, s3d.d16, MDB_USART_TX_READY);
 393               		.loc 1 423 5 view .LVU85
 394 01f8 6091 0000 		lds r22,s3d+16
 395 01fc 70E0      		ldi r23,0
 396 01fe 4091 0000 		lds r20,MDB_USART_TX_READY
 397 0202 81E0      		ldi r24,lo8(1)
 398 0204 0E94 0000 		call send_mdb
 399               	.LVL27:
 424:mdb.c         ****     send_mdb(MDB_USART, s3d.d17, MDB_USART_TX_READY);
 400               		.loc 1 424 5 view .LVU86
 401 0208 6091 0000 		lds r22,s3d+17
 402 020c 70E0      		ldi r23,0
 403 020e 4091 0000 		lds r20,MDB_USART_TX_READY
 404 0212 81E0      		ldi r24,lo8(1)
 405 0214 0E94 0000 		call send_mdb
 406               	.LVL28:
 425:mdb.c         ****     send_mdb(MDB_USART, s3d.d18, MDB_USART_TX_READY);
 407               		.loc 1 425 5 view .LVU87
 408 0218 6091 0000 		lds r22,s3d+18
 409 021c 70E0      		ldi r23,0
 410 021e 4091 0000 		lds r20,MDB_USART_TX_READY
 411 0222 81E0      		ldi r24,lo8(1)
 412 0224 0E94 0000 		call send_mdb
 413               	.LVL29:
 426:mdb.c         ****     send_mdb(MDB_USART, s3d.d19, MDB_USART_TX_READY);
 414               		.loc 1 426 5 view .LVU88
 415 0228 6091 0000 		lds r22,s3d+19
 416 022c 70E0      		ldi r23,0
 417 022e 4091 0000 		lds r20,MDB_USART_TX_READY
 418 0232 81E0      		ldi r24,lo8(1)
 419 0234 0E94 0000 		call send_mdb
 420               	.LVL30:
 427:mdb.c         ****     send_mdb(MDB_USART, s3d.d20, MDB_USART_TX_READY);
 421               		.loc 1 427 5 view .LVU89
 422 0238 6091 0000 		lds r22,s3d+20
 423 023c 70E0      		ldi r23,0
 424 023e 4091 0000 		lds r20,MDB_USART_TX_READY
 425 0242 81E0      		ldi r24,lo8(1)
 426 0244 0E94 0000 		call send_mdb
 427               	.LVL31:
 428:mdb.c         ****     send_mdb(MDB_USART, s3d.d21, MDB_USART_TX_READY);
 428               		.loc 1 428 5 view .LVU90
 429 0248 6091 0000 		lds r22,s3d+21
 430 024c 70E0      		ldi r23,0
 431 024e 4091 0000 		lds r20,MDB_USART_TX_READY
 432 0252 81E0      		ldi r24,lo8(1)
 433 0254 0E94 0000 		call send_mdb
 434               	.LVL32:
 429:mdb.c         ****     send_mdb(MDB_USART, s3d.d22, MDB_USART_TX_READY);
 435               		.loc 1 429 5 view .LVU91
 436 0258 6091 0000 		lds r22,s3d+22
 437 025c 70E0      		ldi r23,0
 438 025e 4091 0000 		lds r20,MDB_USART_TX_READY
 439 0262 81E0      		ldi r24,lo8(1)
 440 0264 0E94 0000 		call send_mdb
 441               	.LVL33:
 430:mdb.c         ****     send_mdb(MDB_USART, s3d.d23, MDB_USART_TX_READY);
 442               		.loc 1 430 5 view .LVU92
 443 0268 6091 0000 		lds r22,s3d+23
 444 026c 70E0      		ldi r23,0
 445 026e 4091 0000 		lds r20,MDB_USART_TX_READY
 446 0272 81E0      		ldi r24,lo8(1)
 447 0274 0E94 0000 		call send_mdb
 448               	.LVL34:
 431:mdb.c         ****     send_mdb(MDB_USART, s3d.d24, MDB_USART_TX_READY);
 449               		.loc 1 431 5 view .LVU93
 450 0278 6091 0000 		lds r22,s3d+24
 451 027c 70E0      		ldi r23,0
 452 027e 4091 0000 		lds r20,MDB_USART_TX_READY
 453 0282 81E0      		ldi r24,lo8(1)
 454 0284 0E94 0000 		call send_mdb
 455               	.LVL35:
 432:mdb.c         ****     send_mdb(MDB_USART, s3d.d25, MDB_USART_TX_READY);
 456               		.loc 1 432 5 view .LVU94
 457 0288 6091 0000 		lds r22,s3d+25
 458 028c 70E0      		ldi r23,0
 459 028e 4091 0000 		lds r20,MDB_USART_TX_READY
 460 0292 81E0      		ldi r24,lo8(1)
 461 0294 0E94 0000 		call send_mdb
 462               	.LVL36:
 433:mdb.c         ****     send_mdb(MDB_USART, s3d.d26, MDB_USART_TX_READY);
 463               		.loc 1 433 5 view .LVU95
 464 0298 6091 0000 		lds r22,s3d+26
 465 029c 70E0      		ldi r23,0
 466 029e 4091 0000 		lds r20,MDB_USART_TX_READY
 467 02a2 81E0      		ldi r24,lo8(1)
 468 02a4 0E94 0000 		call send_mdb
 469               	.LVL37:
 434:mdb.c         ****     send_mdb(MDB_USART, s3d.d27, MDB_USART_TX_READY);
 470               		.loc 1 434 5 view .LVU96
 471 02a8 6091 0000 		lds r22,s3d+27
 472 02ac 70E0      		ldi r23,0
 473 02ae 4091 0000 		lds r20,MDB_USART_TX_READY
 474 02b2 81E0      		ldi r24,lo8(1)
 475 02b4 0E94 0000 		call send_mdb
 476               	.LVL38:
 435:mdb.c         ****     send_mdb(MDB_USART, s3d.d28, MDB_USART_TX_READY);
 477               		.loc 1 435 5 view .LVU97
 478 02b8 6091 0000 		lds r22,s3d+28
 479 02bc 70E0      		ldi r23,0
 480 02be 4091 0000 		lds r20,MDB_USART_TX_READY
 481 02c2 81E0      		ldi r24,lo8(1)
 482 02c4 0E94 0000 		call send_mdb
 483               	.LVL39:
 436:mdb.c         ****     send_mdb(MDB_USART, s3d.d29, MDB_USART_TX_READY);
 484               		.loc 1 436 5 view .LVU98
 485 02c8 6091 0000 		lds r22,s3d+29
 486 02cc 70E0      		ldi r23,0
 487 02ce 4091 0000 		lds r20,MDB_USART_TX_READY
 488 02d2 81E0      		ldi r24,lo8(1)
 489 02d4 0E94 0000 		call send_mdb
 490               	.LVL40:
 437:mdb.c         ****     send_mdb(MDB_USART, s3d.d30, MDB_USART_TX_READY);
 491               		.loc 1 437 5 view .LVU99
 492 02d8 6091 0000 		lds r22,s3d+30
 493 02dc 7091 0000 		lds r23,s3d+30+1
 494 02e0 4091 0000 		lds r20,MDB_USART_TX_READY
 495 02e4 81E0      		ldi r24,lo8(1)
 496 02e6 0E94 0000 		call send_mdb
 497               	.LVL41:
 438:mdb.c         **** 
 439:mdb.c         ****     char abc[80];
 498               		.loc 1 439 5 view .LVU100
 440:mdb.c         ****     for (int i = 0; i < 32; i++)
 499               		.loc 1 440 5 view .LVU101
 500               	.LBB13:
 501               		.loc 1 440 10 view .LVU102
 502               		.loc 1 440 23 view .LVU103
 503               		.loc 1 440 14 is_stmt 0 view .LVU104
 504 02ea 10E0      		ldi r17,0
 505 02ec 00E0      		ldi r16,0
 441:mdb.c         ****     {
 442:mdb.c         ****         sprintf(abc, "STAGE 3 DATA[%d] = %#08x", i, data2[i]);
 506               		.loc 1 442 9 view .LVU105
 507 02ee 80E0      		ldi r24,lo8(.LC0)
 508 02f0 A82E      		mov r10,r24
 509 02f2 80E0      		ldi r24,hi8(.LC0)
 510 02f4 B82E      		mov r11,r24
 511 02f6 7E01      		movw r14,r28
 512 02f8 B1E8      		ldi r27,-127
 513 02fa EB0E      		add r14,r27
 514 02fc F11C      		adc r15,__zero_reg__
 515               	.LVL42:
 516               	.L8:
 517               		.loc 1 442 9 is_stmt 1 discriminator 3 view .LVU106
 518               		.loc 1 442 58 is_stmt 0 discriminator 3 view .LVU107
 519 02fe F601      		movw r30,r12
 520 0300 8191      		ld r24,Z+
 521 0302 6F01      		movw r12,r30
 522               		.loc 1 442 9 discriminator 3 view .LVU108
 523 0304 1F92      		push __zero_reg__
 524 0306 8F93      		push r24
 525 0308 1F93      		push r17
 526 030a 0F93      		push r16
 527 030c BF92      		push r11
 528 030e AF92      		push r10
 529 0310 FF92      		push r15
 530 0312 EF92      		push r14
 531 0314 0E94 0000 		call sprintf
 532               	.LVL43:
 443:mdb.c         ****         send_str(UPLINK_USART, abc);
 533               		.loc 1 443 9 is_stmt 1 discriminator 3 view .LVU109
 534 0318 B701      		movw r22,r14
 535 031a 80E0      		ldi r24,0
 536 031c 0E94 0000 		call send_str
 537               	.LVL44:
 440:mdb.c         ****     for (int i = 0; i < 32; i++)
 538               		.loc 1 440 30 discriminator 3 view .LVU110
 539 0320 0F5F      		subi r16,-1
 540 0322 1F4F      		sbci r17,-1
 541               	.LVL45:
 440:mdb.c         ****     for (int i = 0; i < 32; i++)
 542               		.loc 1 440 23 discriminator 3 view .LVU111
 543 0324 0FB6      		in __tmp_reg__,__SREG__
 544 0326 F894      		cli
 545 0328 DEBF      		out __SP_H__,r29
 546 032a 0FBE      		out __SREG__,__tmp_reg__
 547 032c CDBF      		out __SP_L__,r28
 548 032e 0032      		cpi r16,32
 549 0330 1105      		cpc r17,__zero_reg__
 550 0332 01F4      		brne .L8
 551               	/* epilogue start */
 552               	.LBE13:
 444:mdb.c         ****     }
 445:mdb.c         **** 
 446:mdb.c         ****     //   mdb_active_cmd = MDB_IDLE;
 447:mdb.c         ****     // mdb_poll_reply = MDB_REPLY_ACK;
 448:mdb.c         **** 
 449:mdb.c         ****     return;
 450:mdb.c         **** }
 553               		.loc 1 450 1 is_stmt 0 view .LVU112
 554 0334 C053      		subi r28,48
 555 0336 DF4F      		sbci r29,-1
 556 0338 0FB6      		in __tmp_reg__,__SREG__
 557 033a F894      		cli
 558 033c DEBF      		out __SP_H__,r29
 559 033e 0FBE      		out __SREG__,__tmp_reg__
 560 0340 CDBF      		out __SP_L__,r28
 561 0342 DF91      		pop r29
 562 0344 CF91      		pop r28
 563 0346 1F91      		pop r17
 564 0348 0F91      		pop r16
 565               	.LVL46:
 566               		.loc 1 450 1 view .LVU113
 567 034a FF90      		pop r15
 568 034c EF90      		pop r14
 569 034e DF90      		pop r13
 570 0350 CF90      		pop r12
 571 0352 BF90      		pop r11
 572 0354 AF90      		pop r10
 573 0356 0895      		ret
 574               		.cfi_endproc
 575               	.LFE10:
 577               		.section	.rodata.str1.1
 578               	.LC2:
 579 0019 6461 7461 		.string	"data[5]: %#08x ;;checksum-calc: %#08x\r\n"
 579      5B35 5D3A 
 579      2025 2330 
 579      3878 203B 
 579      3B63 6865 
 580               	.LC3:
 581 0041 7374 6167 		.string	"stage2checksum: %#08x mdb_poll_reply : %#08x\r\n"
 581      6532 6368 
 581      6563 6B73 
 581      756D 3A20 
 581      2523 3038 
 582               		.section	.rodata
 583               	.LC1:
 584 0000 00        		.string	""
 585 0001 00        		.string	""
 586 0002 00        		.string	""
 587 0003 00        		.string	""
 588 0004 00        		.string	""
 589 0005 00        		.string	""
 590               		.text
 591               	.global	mdb_setup
 593               	mdb_setup:
 594               	.LFB9:
 200:mdb.c         **** 
 595               		.loc 1 200 1 is_stmt 1 view -0
 596               		.cfi_startproc
 597 0358 AF92      		push r10
 598               	.LCFI12:
 599               		.cfi_def_cfa_offset 4
 600               		.cfi_offset 10, -3
 601 035a BF92      		push r11
 602               	.LCFI13:
 603               		.cfi_def_cfa_offset 5
 604               		.cfi_offset 11, -4
 605 035c CF92      		push r12
 606               	.LCFI14:
 607               		.cfi_def_cfa_offset 6
 608               		.cfi_offset 12, -5
 609 035e DF92      		push r13
 610               	.LCFI15:
 611               		.cfi_def_cfa_offset 7
 612               		.cfi_offset 13, -6
 613 0360 EF92      		push r14
 614               	.LCFI16:
 615               		.cfi_def_cfa_offset 8
 616               		.cfi_offset 14, -7
 617 0362 FF92      		push r15
 618               	.LCFI17:
 619               		.cfi_def_cfa_offset 9
 620               		.cfi_offset 15, -8
 621 0364 0F93      		push r16
 622               	.LCFI18:
 623               		.cfi_def_cfa_offset 10
 624               		.cfi_offset 16, -9
 625 0366 1F93      		push r17
 626               	.LCFI19:
 627               		.cfi_def_cfa_offset 11
 628               		.cfi_offset 17, -10
 629 0368 CF93      		push r28
 630               	.LCFI20:
 631               		.cfi_def_cfa_offset 12
 632               		.cfi_offset 28, -11
 633 036a DF93      		push r29
 634               	.LCFI21:
 635               		.cfi_def_cfa_offset 13
 636               		.cfi_offset 29, -12
 637 036c CDB7      		in r28,__SP_L__
 638 036e DEB7      		in r29,__SP_H__
 639               	.LCFI22:
 640               		.cfi_def_cfa_register 28
 641 0370 AE97      		sbiw r28,46
 642               	.LCFI23:
 643               		.cfi_def_cfa_offset 59
 644 0372 0FB6      		in __tmp_reg__,__SREG__
 645 0374 F894      		cli
 646 0376 DEBF      		out __SP_H__,r29
 647 0378 0FBE      		out __SREG__,__tmp_reg__
 648 037a CDBF      		out __SP_L__,r28
 649               	/* prologue: function */
 650               	/* frame size = 46 */
 651               	/* stack size = 56 */
 652               	.L__stack_usage = 56
 202:mdb.c         ****     static uint8_t state = 0;
 653               		.loc 1 202 5 view .LVU115
 203:mdb.c         ****     uint8_t data[6] = {0, 0, 0, 0, 0, 0};
 654               		.loc 1 203 5 view .LVU116
 204:mdb.c         ****     uint8_t index = 0;
 655               		.loc 1 204 5 view .LVU117
 204:mdb.c         ****     uint8_t index = 0;
 656               		.loc 1 204 13 is_stmt 0 view .LVU118
 657 037c 86E0      		ldi r24,lo8(6)
 658 037e E0E0      		ldi r30,lo8(.LC1)
 659 0380 F0E0      		ldi r31,hi8(.LC1)
 660 0382 DE01      		movw r26,r28
 661 0384 9996      		adiw r26,41
 662               		0:
 663 0386 0190      		ld r0,Z+
 664 0388 0D92      		st X+,r0
 665 038a 8A95      		dec r24
 666 038c 01F4      		brne 0b
 205:mdb.c         **** 
 667               		.loc 1 205 5 is_stmt 1 view .LVU119
 668               	.LVL47:
 209:mdb.c         ****     {
 669               		.loc 1 209 5 view .LVU120
 209:mdb.c         ****     {
 670               		.loc 1 209 8 is_stmt 0 view .LVU121
 671 038e 8091 0000 		lds r24,state.36
 672 0392 8230      		cpi r24,lo8(2)
 673 0394 00F0      		brlo .+2
 674 0396 00C0      		rjmp .L13
 675               	.LBB14:
 212:mdb.c         ****             return;
 676               		.loc 1 212 9 is_stmt 1 view .LVU122
 212:mdb.c         ****             return;
 677               		.loc 1 212 13 is_stmt 0 view .LVU123
 678 0398 60E0      		ldi r22,0
 679 039a 81E0      		ldi r24,lo8(1)
 680 039c 0E94 0000 		call buffer_level
 681               	.LVL48:
 212:mdb.c         ****             return;
 682               		.loc 1 212 12 view .LVU124
 683 03a0 8C30      		cpi r24,lo8(12)
 684 03a2 00F4      		brsh .+2
 685 03a4 00C0      		rjmp .L12
 686 03a6 7E01      		movw r14,r28
 687 03a8 89E2      		ldi r24,41
 688 03aa E80E      		add r14,r24
 689 03ac F11C      		adc r15,__zero_reg__
 690 03ae 6E01      		movw r12,r28
 691 03b0 9FE2      		ldi r25,47
 692 03b2 C90E      		add r12,r25
 693 03b4 D11C      		adc r13,__zero_reg__
 694               	.LVL49:
 695               	.L15:
 218:mdb.c         ****         }
 696               		.loc 1 218 13 is_stmt 1 discriminator 3 view .LVU125
 218:mdb.c         ****         }
 697               		.loc 1 218 36 is_stmt 0 discriminator 3 view .LVU126
 698 03b6 81E0      		ldi r24,lo8(1)
 699 03b8 0E94 0000 		call recv_mdb
 700               	.LVL50:
 218:mdb.c         ****         }
 701               		.loc 1 218 27 discriminator 3 view .LVU127
 702 03bc F701      		movw r30,r14
 703 03be 8193      		st Z+,r24
 704 03c0 7F01      		movw r14,r30
 216:mdb.c         ****         {
 705               		.loc 1 216 41 is_stmt 1 discriminator 3 view .LVU128
 216:mdb.c         ****         {
 706               		.loc 1 216 31 discriminator 3 view .LVU129
 707 03c2 EC15      		cp r30,r12
 708 03c4 FD05      		cpc r31,r13
 709 03c6 01F4      		brne .L15
 223:mdb.c         **** 
 710               		.loc 1 223 9 view .LVU130
 223:mdb.c         **** 
 711               		.loc 1 223 25 is_stmt 0 view .LVU131
 712 03c8 F9A4      		ldd r15,Y+41
 225:mdb.c         ****         // validate checksum
 713               		.loc 1 225 9 is_stmt 1 view .LVU132
 223:mdb.c         **** 
 714               		.loc 1 223 35 is_stmt 0 view .LVU133
 715 03ca 8AA5      		ldd r24,Y+42
 223:mdb.c         **** 
 716               		.loc 1 223 29 view .LVU134
 717 03cc 8F0D      		add r24,r15
 718 03ce 9927      		clr r25
 719 03d0 991F      		rol r25
 223:mdb.c         **** 
 720               		.loc 1 223 45 view .LVU135
 721 03d2 2BA5      		ldd r18,Y+43
 223:mdb.c         **** 
 722               		.loc 1 223 39 view .LVU136
 723 03d4 820F      		add r24,r18
 724 03d6 911D      		adc r25,__zero_reg__
 223:mdb.c         **** 
 725               		.loc 1 223 55 view .LVU137
 726 03d8 2CA5      		ldd r18,Y+44
 223:mdb.c         **** 
 727               		.loc 1 223 49 view .LVU138
 728 03da 820F      		add r24,r18
 729 03dc 911D      		adc r25,__zero_reg__
 223:mdb.c         **** 
 730               		.loc 1 223 65 view .LVU139
 731 03de 2DA5      		ldd r18,Y+45
 223:mdb.c         **** 
 732               		.loc 1 223 59 view .LVU140
 733 03e0 820F      		add r24,r18
 734 03e2 911D      		adc r25,__zero_reg__
 223:mdb.c         **** 
 735               		.loc 1 223 18 view .LVU141
 736 03e4 2091 0000 		lds r18,checksum.35
 737 03e8 3091 0000 		lds r19,checksum.35+1
 738 03ec 820F      		add r24,r18
 739 03ee 931F      		adc r25,r19
 225:mdb.c         ****         // validate checksum
 740               		.loc 1 225 29 view .LVU142
 741 03f0 9927      		clr r25
 225:mdb.c         ****         // validate checksum
 742               		.loc 1 225 18 view .LVU143
 743 03f2 9093 0000 		sts checksum.35+1,r25
 744 03f6 8093 0000 		sts checksum.35,r24
 227:mdb.c         ****         sprintf(abc, "data[5]: %#08x ;;checksum-calc: %#08x\r\n", data[5], checksum);
 745               		.loc 1 227 9 is_stmt 1 view .LVU144
 228:mdb.c         ****         send_str(UPLINK_USART, abc);
 746               		.loc 1 228 9 view .LVU145
 228:mdb.c         ****         send_str(UPLINK_USART, abc);
 747               		.loc 1 228 71 is_stmt 0 view .LVU146
 748 03fa 2EA5      		ldd r18,Y+46
 228:mdb.c         ****         send_str(UPLINK_USART, abc);
 749               		.loc 1 228 9 view .LVU147
 750 03fc 9F93      		push r25
 751 03fe 8F93      		push r24
 752 0400 A22E      		mov r10,r18
 753 0402 B12C      		mov r11,__zero_reg__
 754 0404 1F92      		push __zero_reg__
 755 0406 2F93      		push r18
 756 0408 80E0      		ldi r24,lo8(.LC2)
 757 040a 90E0      		ldi r25,hi8(.LC2)
 758 040c 9F93      		push r25
 759 040e 8F93      		push r24
 760 0410 CE01      		movw r24,r28
 761 0412 0196      		adiw r24,1
 762 0414 6C01      		movw r12,r24
 763 0416 9F93      		push r25
 764 0418 8F93      		push r24
 765 041a 0E94 0000 		call sprintf
 766               	.LVL51:
 229:mdb.c         ****         if (checksum != data[5])
 767               		.loc 1 229 9 is_stmt 1 view .LVU148
 768 041e B601      		movw r22,r12
 769 0420 80E0      		ldi r24,0
 770 0422 0E94 0000 		call send_str
 771               	.LVL52:
 230:mdb.c         ****         {
 772               		.loc 1 230 9 view .LVU149
 230:mdb.c         ****         {
 773               		.loc 1 230 12 is_stmt 0 view .LVU150
 774 0426 0FB6      		in __tmp_reg__,__SREG__
 775 0428 F894      		cli
 776 042a DEBF      		out __SP_H__,r29
 777 042c 0FBE      		out __SREG__,__tmp_reg__
 778 042e CDBF      		out __SP_L__,r28
 779 0430 8091 0000 		lds r24,checksum.35
 780 0434 9091 0000 		lds r25,checksum.35+1
 781 0438 A816      		cp r10,r24
 782 043a B906      		cpc r11,r25
 783 043c 01F0      		breq .L16
 232:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 784               		.loc 1 232 13 is_stmt 1 view .LVU151
 232:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 785               		.loc 1 232 19 is_stmt 0 view .LVU152
 786 043e 1092 0000 		sts state.36,__zero_reg__
 233:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 787               		.loc 1 233 13 is_stmt 1 view .LVU153
 233:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 788               		.loc 1 233 28 is_stmt 0 view .LVU154
 789 0442 1092 0000 		sts mdb_active_cmd,__zero_reg__
 234:mdb.c         ****             checksum = MDB_SETUP; //MDB_SETUP;
 790               		.loc 1 234 13 is_stmt 1 view .LVU155
 234:mdb.c         ****             checksum = MDB_SETUP; //MDB_SETUP;
 791               		.loc 1 234 28 is_stmt 0 view .LVU156
 792 0446 1092 0000 		sts mdb_poll_reply,__zero_reg__
 235:mdb.c         **** 
 793               		.loc 1 235 13 is_stmt 1 view .LVU157
 235:mdb.c         **** 
 794               		.loc 1 235 22 is_stmt 0 view .LVU158
 795 044a 81E1      		ldi r24,lo8(17)
 796 044c 90E0      		ldi r25,0
 797 044e 9093 0000 		sts checksum.35+1,r25
 798 0452 8093 0000 		sts checksum.35,r24
 237:mdb.c         **** #if TXSWITCH == 1
 799               		.loc 1 237 13 is_stmt 1 view .LVU159
 800               	.LBB15:
 237:mdb.c         **** #if TXSWITCH == 1
 801               		.loc 1 237 38 view .LVU160
 237:mdb.c         **** #if TXSWITCH == 1
 802               		.loc 1 237 38 view .LVU161
 803               	.LBE15:
 237:mdb.c         **** #if TXSWITCH == 1
 804               		.loc 1 237 13 is_stmt 0 view .LVU162
 805 0456 60E0      		ldi r22,lo8(__c.34)
 806 0458 70E0      		ldi r23,hi8(__c.34)
 807 045a 80E0      		ldi r24,0
 808 045c 0E94 0000 		call send_str_p
 809               	.LVL53:
 241:mdb.c         ****         }
 810               		.loc 1 241 13 is_stmt 1 view .LVU163
 811               	.L12:
 812               	/* epilogue start */
 813               	.LBE14:
 383:mdb.c         **** 
 814               		.loc 1 383 1 is_stmt 0 view .LVU164
 815 0460 AE96      		adiw r28,46
 816 0462 0FB6      		in __tmp_reg__,__SREG__
 817 0464 F894      		cli
 818 0466 DEBF      		out __SP_H__,r29
 819 0468 0FBE      		out __SREG__,__tmp_reg__
 820 046a CDBF      		out __SP_L__,r28
 821 046c DF91      		pop r29
 822 046e CF91      		pop r28
 823 0470 1F91      		pop r17
 824 0472 0F91      		pop r16
 825 0474 FF90      		pop r15
 826 0476 EF90      		pop r14
 827 0478 DF90      		pop r13
 828 047a CF90      		pop r12
 829 047c BF90      		pop r11
 830 047e AF90      		pop r10
 831 0480 0895      		ret
 832               	.L16:
 833               	.LBB16:
 244:mdb.c         ****     }
 834               		.loc 1 244 9 is_stmt 1 view .LVU165
 244:mdb.c         ****     }
 835               		.loc 1 244 15 is_stmt 0 view .LVU166
 836 0482 F092 0000 		sts state.36,r15
 837               	.L13:
 838               	.LBE16:
 248:mdb.c         ****     {
 839               		.loc 1 248 5 is_stmt 1 view .LVU167
 840 0486 8091 0000 		lds r24,state.36
 841 048a 8130      		cpi r24,lo8(1)
 842 048c 01F4      		brne .+2
 843 048e 00C0      		rjmp .L18
 844 0490 8230      		cpi r24,lo8(2)
 845 0492 01F4      		brne .+2
 846 0494 00C0      		rjmp .L19
 847 0496 8111      		cpse r24,__zero_reg__
 848 0498 00C0      		rjmp .L20
 849               	.LBB17:
 259:mdb.c         ****         vmc.dispaly_cols = data[2];
 850               		.loc 1 259 9 view .LVU168
 259:mdb.c         ****         vmc.dispaly_cols = data[2];
 851               		.loc 1 259 27 is_stmt 0 view .LVU169
 852 049a 8AA5      		ldd r24,Y+42
 853 049c 8093 0000 		sts vmc,r24
 260:mdb.c         ****         vmc.dispaly_rows = data[3];
 854               		.loc 1 260 9 is_stmt 1 view .LVU170
 260:mdb.c         ****         vmc.dispaly_rows = data[3];
 855               		.loc 1 260 26 is_stmt 0 view .LVU171
 856 04a0 8BA5      		ldd r24,Y+43
 857 04a2 8093 0000 		sts vmc+1,r24
 261:mdb.c         ****         vmc.dispaly_info = data[4];
 858               		.loc 1 261 9 is_stmt 1 view .LVU172
 261:mdb.c         ****         vmc.dispaly_info = data[4];
 859               		.loc 1 261 26 is_stmt 0 view .LVU173
 860 04a6 8CA5      		ldd r24,Y+44
 861 04a8 8093 0000 		sts vmc+2,r24
 262:mdb.c         **** 
 862               		.loc 1 262 9 is_stmt 1 view .LVU174
 262:mdb.c         **** 
 863               		.loc 1 262 26 is_stmt 0 view .LVU175
 864 04ac 8DA5      		ldd r24,Y+45
 865 04ae 8093 0000 		sts vmc+3,r24
 265:mdb.c         ****                      cd.feature_level +
 866               		.loc 1 265 9 is_stmt 1 view .LVU176
 265:mdb.c         ****                      cd.feature_level +
 867               		.loc 1 265 24 is_stmt 0 view .LVU177
 868 04b2 6091 0000 		lds r22,cd
 267:mdb.c         ****                      (cd.country_code & 0xFF) +
 869               		.loc 1 267 25 view .LVU178
 870 04b6 8091 0000 		lds r24,cd+2
 871 04ba 9091 0000 		lds r25,cd+3
 267:mdb.c         ****                      (cd.country_code & 0xFF) +
 872               		.loc 1 267 39 view .LVU179
 873 04be 092F      		mov r16,r25
 874 04c0 10E0      		ldi r17,0
 271:mdb.c         ****                      cd.misc_options) &
 875               		.loc 1 271 39 view .LVU180
 876 04c2 800F      		add r24,r16
 877 04c4 912F      		mov r25,r17
 878 04c6 911D      		adc r25,__zero_reg__
 269:mdb.c         ****                      cd.decimal_places +
 879               		.loc 1 269 24 view .LVU181
 880 04c8 2091 0000 		lds r18,cd+4
 271:mdb.c         ****                      cd.misc_options) &
 881               		.loc 1 271 39 view .LVU182
 882 04cc 820F      		add r24,r18
 883 04ce 911D      		adc r25,__zero_reg__
 270:mdb.c         ****                      cd.max_resp_time +
 884               		.loc 1 270 24 view .LVU183
 885 04d0 2091 0000 		lds r18,cd+5
 271:mdb.c         ****                      cd.misc_options) &
 886               		.loc 1 271 39 view .LVU184
 887 04d4 820F      		add r24,r18
 888 04d6 911D      		adc r25,__zero_reg__
 271:mdb.c         ****                      cd.misc_options) &
 889               		.loc 1 271 24 view .LVU185
 890 04d8 2091 0000 		lds r18,cd+6
 271:mdb.c         ****                      cd.misc_options) &
 891               		.loc 1 271 39 view .LVU186
 892 04dc 820F      		add r24,r18
 893 04de 911D      		adc r25,__zero_reg__
 272:mdb.c         ****                     0xFF) |
 894               		.loc 1 272 24 view .LVU187
 895 04e0 2091 0000 		lds r18,cd+7
 271:mdb.c         ****                      cd.misc_options) &
 896               		.loc 1 271 39 view .LVU188
 897 04e4 820F      		add r24,r18
 898 04e6 911D      		adc r25,__zero_reg__
 266:mdb.c         ****                      (cd.country_code >> 8) +
 899               		.loc 1 266 24 view .LVU189
 900 04e8 2091 0000 		lds r18,cd+1
 265:mdb.c         ****                      cd.feature_level +
 901               		.loc 1 265 24 view .LVU190
 902 04ec 70E0      		ldi r23,0
 265:mdb.c         ****                      cd.feature_level +
 903               		.loc 1 265 36 view .LVU191
 904 04ee 260F      		add r18,r22
 905 04f0 372F      		mov r19,r23
 906 04f2 311D      		adc r19,__zero_reg__
 271:mdb.c         ****                      cd.misc_options) &
 907               		.loc 1 271 39 view .LVU192
 908 04f4 820F      		add r24,r18
 909 04f6 931F      		adc r25,r19
 272:mdb.c         ****                     0xFF) |
 910               		.loc 1 272 39 view .LVU193
 911 04f8 9927      		clr r25
 273:mdb.c         ****                    0x100;
 912               		.loc 1 273 27 view .LVU194
 913 04fa 9160      		ori r25,1
 265:mdb.c         ****                      cd.feature_level +
 914               		.loc 1 265 18 view .LVU195
 915 04fc 9093 0000 		sts checksum.35+1,r25
 916 0500 8093 0000 		sts checksum.35,r24
 277:mdb.c         ****         send_mdb(MDB_USART, cd.feature_level, MDB_USART_TX_READY);
 917               		.loc 1 277 9 is_stmt 1 view .LVU196
 918 0504 4091 0000 		lds r20,MDB_USART_TX_READY
 919 0508 81E0      		ldi r24,lo8(1)
 920 050a 0E94 0000 		call send_mdb
 921               	.LVL54:
 278:mdb.c         ****         send_mdb(MDB_USART, (cd.country_code >> 8), MDB_USART_TX_READY);
 922               		.loc 1 278 9 view .LVU197
 923 050e 6091 0000 		lds r22,cd+1
 924 0512 70E0      		ldi r23,0
 925 0514 4091 0000 		lds r20,MDB_USART_TX_READY
 926 0518 81E0      		ldi r24,lo8(1)
 927 051a 0E94 0000 		call send_mdb
 928               	.LVL55:
 279:mdb.c         ****         send_mdb(MDB_USART, (cd.country_code & 0xFF), MDB_USART_TX_READY);
 929               		.loc 1 279 9 view .LVU198
 930 051e 6091 0000 		lds r22,cd+3
 931 0522 4091 0000 		lds r20,MDB_USART_TX_READY
 932 0526 70E0      		ldi r23,0
 933 0528 81E0      		ldi r24,lo8(1)
 934 052a 0E94 0000 		call send_mdb
 935               	.LVL56:
 280:mdb.c         ****         send_mdb(MDB_USART, cd.scale_factor, MDB_USART_TX_READY);
 936               		.loc 1 280 9 view .LVU199
 937 052e 6091 0000 		lds r22,cd+2
 938 0532 7091 0000 		lds r23,cd+2+1
 939 0536 7727      		clr r23
 940 0538 4091 0000 		lds r20,MDB_USART_TX_READY
 941 053c 81E0      		ldi r24,lo8(1)
 942 053e 0E94 0000 		call send_mdb
 943               	.LVL57:
 281:mdb.c         ****         send_mdb(MDB_USART, cd.decimal_places, MDB_USART_TX_READY);
 944               		.loc 1 281 9 view .LVU200
 945 0542 6091 0000 		lds r22,cd+4
 946 0546 70E0      		ldi r23,0
 947 0548 4091 0000 		lds r20,MDB_USART_TX_READY
 948 054c 81E0      		ldi r24,lo8(1)
 949 054e 0E94 0000 		call send_mdb
 950               	.LVL58:
 282:mdb.c         ****         send_mdb(MDB_USART, cd.max_resp_time, MDB_USART_TX_READY);
 951               		.loc 1 282 9 view .LVU201
 952 0552 6091 0000 		lds r22,cd+5
 953 0556 70E0      		ldi r23,0
 954 0558 4091 0000 		lds r20,MDB_USART_TX_READY
 955 055c 81E0      		ldi r24,lo8(1)
 956 055e 0E94 0000 		call send_mdb
 957               	.LVL59:
 283:mdb.c         ****         send_mdb(MDB_USART, cd.misc_options, MDB_USART_TX_READY);
 958               		.loc 1 283 9 view .LVU202
 959 0562 6091 0000 		lds r22,cd+6
 960 0566 70E0      		ldi r23,0
 961 0568 4091 0000 		lds r20,MDB_USART_TX_READY
 962 056c 81E0      		ldi r24,lo8(1)
 963 056e 0E94 0000 		call send_mdb
 964               	.LVL60:
 284:mdb.c         ****         send_mdb(MDB_USART, checksum, MDB_USART_TX_READY);
 965               		.loc 1 284 9 view .LVU203
 966 0572 6091 0000 		lds r22,cd+7
 967 0576 70E0      		ldi r23,0
 968 0578 4091 0000 		lds r20,MDB_USART_TX_READY
 969 057c 81E0      		ldi r24,lo8(1)
 970 057e 0E94 0000 		call send_mdb
 971               	.LVL61:
 285:mdb.c         **** 
 972               		.loc 1 285 9 view .LVU204
 973 0582 6091 0000 		lds r22,checksum.35
 974 0586 7091 0000 		lds r23,checksum.35+1
 975 058a 4091 0000 		lds r20,MDB_USART_TX_READY
 976 058e 81E0      		ldi r24,lo8(1)
 977 0590 0E94 0000 		call send_mdb
 978               	.LVL62:
 287:mdb.c         **** 
 979               		.loc 1 287 9 view .LVU205
 287:mdb.c         **** 
 980               		.loc 1 287 15 is_stmt 0 view .LVU206
 981 0594 82E0      		ldi r24,lo8(2)
 982 0596 8093 0000 		sts state.36,r24
 290:mdb.c         ****         return;
 983               		.loc 1 290 9 is_stmt 1 view .LVU207
 290:mdb.c         ****         return;
 984               		.loc 1 290 18 is_stmt 0 view .LVU208
 985 059a 81E1      		ldi r24,lo8(17)
 986 059c 90E0      		ldi r25,0
 987 059e 9093 0000 		sts checksum.35+1,r25
 988 05a2 8093 0000 		sts checksum.35,r24
 291:mdb.c         **** 
 989               		.loc 1 291 9 is_stmt 1 view .LVU209
 990 05a6 00C0      		rjmp .L12
 991               	.L18:
 293:mdb.c         **** 
 992               		.loc 1 293 9 view .LVU210
 303:mdb.c         ****         price.min = (data[3] << 8) | data[4];
 993               		.loc 1 303 9 view .LVU211
 303:mdb.c         ****         price.min = (data[3] << 8) | data[4];
 994               		.loc 1 303 19 is_stmt 0 view .LVU212
 995 05a8 8AA5      		ldd r24,Y+42
 996 05aa 9BA5      		ldd r25,Y+43
 997 05ac 9827      		eor r25,r24
 998 05ae 8927      		eor r24,r25
 999 05b0 9827      		eor r25,r24
 1000 05b2 9093 0000 		sts price+1,r25
 1001 05b6 8093 0000 		sts price,r24
 304:mdb.c         **** 
 1002               		.loc 1 304 9 is_stmt 1 view .LVU213
 304:mdb.c         **** 
 1003               		.loc 1 304 19 is_stmt 0 view .LVU214
 1004 05ba 8CA5      		ldd r24,Y+44
 1005 05bc 9DA5      		ldd r25,Y+45
 1006 05be 9827      		eor r25,r24
 1007 05c0 8927      		eor r24,r25
 1008 05c2 9827      		eor r25,r24
 1009 05c4 9093 0000 		sts price+2+1,r25
 1010 05c8 8093 0000 		sts price+2,r24
 307:mdb.c         **** 
 1011               		.loc 1 307 9 is_stmt 1 view .LVU215
 1012 05cc 4091 0000 		lds r20,MDB_USART_TX_READY
 1013 05d0 60E0      		ldi r22,0
 1014 05d2 71E0      		ldi r23,lo8(1)
 1015 05d4 81E0      		ldi r24,lo8(1)
 1016 05d6 0E94 0000 		call send_mdb
 1017               	.LVL63:
 311:mdb.c         ****         //reset_done=TRUE;//////this line is not in orignal code
 1018               		.loc 1 311 9 view .LVU216
 311:mdb.c         ****         //reset_done=TRUE;//////this line is not in orignal code
 1019               		.loc 1 311 19 is_stmt 0 view .LVU217
 1020 05da 82E0      		ldi r24,lo8(2)
 1021 05dc 8093 0000 		sts mdb_state,r24
 313:mdb.c         **** 
 1022               		.loc 1 313 9 is_stmt 1 view .LVU218
 313:mdb.c         **** 
 1023               		.loc 1 313 15 is_stmt 0 view .LVU219
 1024 05e0 1092 0000 		sts state.36,__zero_reg__
 315:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 1025               		.loc 1 315 9 is_stmt 1 view .LVU220
 315:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 1026               		.loc 1 315 18 is_stmt 0 view .LVU221
 1027 05e4 81E1      		ldi r24,lo8(17)
 1028 05e6 90E0      		ldi r25,0
 1029 05e8 9093 0000 		sts checksum.35+1,r25
 1030 05ec 8093 0000 		sts checksum.35,r24
 316:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 1031               		.loc 1 316 9 is_stmt 1 view .LVU222
 316:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 1032               		.loc 1 316 24 is_stmt 0 view .LVU223
 1033 05f0 1092 0000 		sts mdb_active_cmd,__zero_reg__
 317:mdb.c         ****         //mdb_poll_reply = MDB_REPLY_DISPLAY_REQ;
 1034               		.loc 1 317 9 is_stmt 1 view .LVU224
 317:mdb.c         ****         //mdb_poll_reply = MDB_REPLY_DISPLAY_REQ;
 1035               		.loc 1 317 24 is_stmt 0 view .LVU225
 1036 05f4 1092 0000 		sts mdb_poll_reply,__zero_reg__
 321:mdb.c         ****         sprintf(abc2, "stage2checksum: %#08x mdb_poll_reply : %#08x\r\n", checksum, mdb_poll_reply)
 1037               		.loc 1 321 9 is_stmt 1 view .LVU226
 322:mdb.c         ****         send_str(UPLINK_USART, abc2);
 1038               		.loc 1 322 9 view .LVU227
 1039 05f8 1F92      		push __zero_reg__
 1040 05fa 1F92      		push __zero_reg__
 1041 05fc 1F92      		push __zero_reg__
 1042 05fe 8F93      		push r24
 1043 0600 80E0      		ldi r24,lo8(.LC3)
 1044 0602 90E0      		ldi r25,hi8(.LC3)
 1045 0604 9F93      		push r25
 1046 0606 8F93      		push r24
 1047 0608 8E01      		movw r16,r28
 1048 060a 0F5F      		subi r16,-1
 1049 060c 1F4F      		sbci r17,-1
 1050 060e 1F93      		push r17
 1051 0610 0F93      		push r16
 1052 0612 0E94 0000 		call sprintf
 1053               	.LVL64:
 323:mdb.c         **** 
 1054               		.loc 1 323 9 view .LVU228
 1055 0616 B801      		movw r22,r16
 1056 0618 80E0      		ldi r24,0
 1057 061a 0E94 0000 		call send_str
 1058               	.LVL65:
 325:mdb.c         ****         mdb_stage3();
 1059               		.loc 1 325 9 view .LVU229
 325:mdb.c         ****         mdb_stage3();
 1060               		.loc 1 325 11 is_stmt 0 view .LVU230
 1061 061e 81E0      		ldi r24,lo8(1)
 1062 0620 90E0      		ldi r25,0
 1063 0622 9093 0000 		sts m+1,r25
 1064 0626 8093 0000 		sts m,r24
 326:mdb.c         **** 
 1065               		.loc 1 326 9 is_stmt 1 view .LVU231
 1066 062a 0E94 0000 		call mdb_stage3
 1067               	.LVL66:
 328:mdb.c         ****         break;
 1068               		.loc 1 328 9 view .LVU232
 1069 062e 0FB6      		in __tmp_reg__,__SREG__
 1070 0630 F894      		cli
 1071 0632 DEBF      		out __SP_H__,r29
 1072 0634 0FBE      		out __SREG__,__tmp_reg__
 1073 0636 CDBF      		out __SP_L__,r28
 1074 0638 00C0      		rjmp .L12
 1075               	.L19:
 329:mdb.c         **** 
 1076               		.loc 1 329 9 view .LVU233
 334:mdb.c         ****             return;
 1077               		.loc 1 334 9 view .LVU234
 334:mdb.c         ****             return;
 1078               		.loc 1 334 13 is_stmt 0 view .LVU235
 1079 063a 60E0      		ldi r22,0
 1080 063c 81E0      		ldi r24,lo8(1)
 1081 063e 0E94 0000 		call buffer_level
 1082               	.LVL67:
 334:mdb.c         ****             return;
 1083               		.loc 1 334 12 view .LVU236
 1084 0642 8230      		cpi r24,lo8(2)
 1085 0644 00F4      		brsh .+2
 1086 0646 00C0      		rjmp .L12
 347:mdb.c         **** 
 1087               		.loc 1 347 9 is_stmt 1 view .LVU237
 347:mdb.c         **** 
 1088               		.loc 1 347 19 is_stmt 0 view .LVU238
 1089 0648 81E0      		ldi r24,lo8(1)
 1090 064a 0E94 0000 		call recv_mdb
 1091               	.LVL68:
 356:mdb.c         ****         {
 1092               		.loc 1 356 9 is_stmt 1 view .LVU239
 358:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 1093               		.loc 1 358 19 is_stmt 0 view .LVU240
 1094 064e 1092 0000 		sts state.36,__zero_reg__
 359:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 1095               		.loc 1 359 13 is_stmt 1 view .LVU241
 359:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 1096               		.loc 1 359 28 is_stmt 0 view .LVU242
 1097 0652 1092 0000 		sts mdb_active_cmd,__zero_reg__
 360:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [SETUP]"));
 1098               		.loc 1 360 13 is_stmt 1 view .LVU243
 360:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [SETUP]"));
 1099               		.loc 1 360 28 is_stmt 0 view .LVU244
 1100 0656 1092 0000 		sts mdb_poll_reply,__zero_reg__
 356:mdb.c         ****         {
 1101               		.loc 1 356 12 view .LVU245
 1102 065a 8230      		cpi r24,lo8(2)
 1103 065c 00F4      		brsh .+2
 1104 065e 00C0      		rjmp .L12
 358:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 1105               		.loc 1 358 13 is_stmt 1 view .LVU246
 361:mdb.c         ****             return;
 1106               		.loc 1 361 13 view .LVU247
 1107               	.LBB18:
 361:mdb.c         ****             return;
 1108               		.loc 1 361 38 view .LVU248
 361:mdb.c         ****             return;
 1109               		.loc 1 361 38 view .LVU249
 1110               	.LBE18:
 361:mdb.c         ****             return;
 1111               		.loc 1 361 13 is_stmt 0 view .LVU250
 1112 0660 60E0      		ldi r22,lo8(__c.33)
 1113 0662 70E0      		ldi r23,hi8(__c.33)
 1114 0664 80E0      		ldi r24,0
 1115               	/* epilogue start */
 1116               	.LBE17:
 383:mdb.c         **** 
 1117               		.loc 1 383 1 view .LVU251
 1118 0666 AE96      		adiw r28,46
 1119 0668 0FB6      		in __tmp_reg__,__SREG__
 1120 066a F894      		cli
 1121 066c DEBF      		out __SP_H__,r29
 1122 066e 0FBE      		out __SREG__,__tmp_reg__
 1123 0670 CDBF      		out __SP_L__,r28
 1124 0672 DF91      		pop r29
 1125 0674 CF91      		pop r28
 1126 0676 1F91      		pop r17
 1127 0678 0F91      		pop r16
 1128 067a FF90      		pop r15
 1129 067c EF90      		pop r14
 1130 067e DF90      		pop r13
 1131 0680 CF90      		pop r12
 1132 0682 BF90      		pop r11
 1133 0684 AF90      		pop r10
 1134               	.LBB20:
 361:mdb.c         ****             return;
 1135               		.loc 1 361 13 view .LVU252
 1136 0686 0C94 0000 		jmp send_str_p
 1137               	.LVL69:
 1138               	.L20:
 371:mdb.c         **** 
 1139               		.loc 1 371 9 is_stmt 1 view .LVU253
 375:mdb.c         ****         state = 0;
 1140               		.loc 1 375 9 view .LVU254
 1141               	.LBB19:
 375:mdb.c         ****         state = 0;
 1142               		.loc 1 375 34 view .LVU255
 375:mdb.c         ****         state = 0;
 1143               		.loc 1 375 34 view .LVU256
 1144               	.LBE19:
 375:mdb.c         ****         state = 0;
 1145               		.loc 1 375 9 is_stmt 0 view .LVU257
 1146 068a 60E0      		ldi r22,lo8(__c.32)
 1147 068c 70E0      		ldi r23,hi8(__c.32)
 1148 068e 80E0      		ldi r24,0
 1149 0690 0E94 0000 		call send_str_p
 1150               	.LVL70:
 376:mdb.c         **** 
 1151               		.loc 1 376 9 is_stmt 1 view .LVU258
 376:mdb.c         **** 
 1152               		.loc 1 376 15 is_stmt 0 view .LVU259
 1153 0694 1092 0000 		sts state.36,__zero_reg__
 378:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 1154               		.loc 1 378 9 is_stmt 1 view .LVU260
 378:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 1155               		.loc 1 378 24 is_stmt 0 view .LVU261
 1156 0698 1092 0000 		sts mdb_active_cmd,__zero_reg__
 379:mdb.c         ****         return;
 1157               		.loc 1 379 9 is_stmt 1 view .LVU262
 379:mdb.c         ****         return;
 1158               		.loc 1 379 24 is_stmt 0 view .LVU263
 1159 069c 1092 0000 		sts mdb_poll_reply,__zero_reg__
 380:mdb.c         ****         break;
 1160               		.loc 1 380 9 is_stmt 1 view .LVU264
 381:mdb.c         ****     }
 1161               		.loc 1 381 9 view .LVU265
 380:mdb.c         ****         break;
 1162               		.loc 1 380 9 is_stmt 0 view .LVU266
 1163 06a0 00C0      		rjmp .L12
 1164               	.LBE20:
 1165               		.cfi_endproc
 1166               	.LFE9:
 1168               	.global	mdb_poll
 1170               	mdb_poll:
 1171               	.LFB11:
 451:mdb.c         **** void mdb_poll(void)
 452:mdb.c         **** {
 1172               		.loc 1 452 1 is_stmt 1 view -0
 1173               		.cfi_startproc
 1174 06a2 0F93      		push r16
 1175               	.LCFI24:
 1176               		.cfi_def_cfa_offset 4
 1177               		.cfi_offset 16, -3
 1178 06a4 1F93      		push r17
 1179               	.LCFI25:
 1180               		.cfi_def_cfa_offset 5
 1181               		.cfi_offset 17, -4
 1182 06a6 CF93      		push r28
 1183               	.LCFI26:
 1184               		.cfi_def_cfa_offset 6
 1185               		.cfi_offset 28, -5
 1186 06a8 DF93      		push r29
 1187               	.LCFI27:
 1188               		.cfi_def_cfa_offset 7
 1189               		.cfi_offset 29, -6
 1190               	/* prologue: function */
 1191               	/* frame size = 0 */
 1192               	/* stack size = 4 */
 1193               	.L__stack_usage = 4
 453:mdb.c         **** 
 454:mdb.c         ****     static uint8_t state = 0;
 1194               		.loc 1 454 5 view .LVU268
 455:mdb.c         ****     uint16_t checksum = 0;
 1195               		.loc 1 455 5 view .LVU269
 1196               	.LVL71:
 456:mdb.c         **** 
 457:mdb.c         ****     if (state == 0)
 1197               		.loc 1 457 5 view .LVU270
 1198               		.loc 1 457 8 is_stmt 0 view .LVU271
 1199 06aa 8091 0000 		lds r24,state.28
 1200 06ae 8111      		cpse r24,__zero_reg__
 1201 06b0 00C0      		rjmp .L25
 458:mdb.c         ****     {
 459:mdb.c         ****         // Wait for enough data in buffer
 460:mdb.c         ****         if (buffer_level(MDB_USART, RX) < 2)
 1202               		.loc 1 460 9 is_stmt 1 view .LVU272
 1203               		.loc 1 460 13 is_stmt 0 view .LVU273
 1204 06b2 60E0      		ldi r22,0
 1205 06b4 81E0      		ldi r24,lo8(1)
 1206 06b6 0E94 0000 		call buffer_level
 1207               	.LVL72:
 1208               		.loc 1 460 12 view .LVU274
 1209 06ba 8230      		cpi r24,lo8(2)
 1210 06bc 00F0      		brlo .L24
 461:mdb.c         ****             return;
 462:mdb.c         **** 
 463:mdb.c         **** #if DEBUG == 1
 464:mdb.c         ****         send_str_p(UPLINK_USART, PSTR("POLL\r\n"));
 465:mdb.c         **** #endif
 466:mdb.c         **** 
 467:mdb.c         ****         // validate checksum
 468:mdb.c         ****         if (recv_mdb(MDB_USART) != MDB_POLL)
 1211               		.loc 1 468 9 is_stmt 1 view .LVU275
 1212               		.loc 1 468 13 is_stmt 0 view .LVU276
 1213 06be 81E0      		ldi r24,lo8(1)
 1214 06c0 0E94 0000 		call recv_mdb
 1215               	.LVL73:
 1216               		.loc 1 468 12 view .LVU277
 1217 06c4 4297      		sbiw r24,18
 1218 06c6 01F0      		breq .L28
 469:mdb.c         ****         {
 470:mdb.c         ****             //    char ba[30];
 471:mdb.c         ****             //  sprintf(ba,"recv_mdb  %d\r\n",recv_mdb(MDB_USART));
 472:mdb.c         ****             //            send_str(UPLINK_USART,ba);
 473:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 1219               		.loc 1 473 13 is_stmt 1 view .LVU278
 1220               		.loc 1 473 28 is_stmt 0 view .LVU279
 1221 06c8 1092 0000 		sts mdb_active_cmd,__zero_reg__
 474:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 1222               		.loc 1 474 13 is_stmt 1 view .LVU280
 1223               		.loc 1 474 28 is_stmt 0 view .LVU281
 1224 06cc 1092 0000 		sts mdb_poll_reply,__zero_reg__
 475:mdb.c         ****             state = 0;
 1225               		.loc 1 475 13 is_stmt 1 view .LVU282
 1226               		.loc 1 475 19 is_stmt 0 view .LVU283
 1227 06d0 1092 0000 		sts state.28,__zero_reg__
 476:mdb.c         **** 
 477:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("Error: Invalid checksum [Poll]\r\n"));
 1228               		.loc 1 477 13 is_stmt 1 view .LVU284
 1229               	.LBB21:
 1230               		.loc 1 477 38 view .LVU285
 1231               		.loc 1 477 38 view .LVU286
 1232               	.LBE21:
 1233               		.loc 1 477 13 is_stmt 0 view .LVU287
 1234 06d4 60E0      		ldi r22,lo8(__c.27)
 1235 06d6 70E0      		ldi r23,hi8(__c.27)
 1236               	.L73:
 478:mdb.c         ****             return;
 479:mdb.c         ****         }
 480:mdb.c         **** 
 481:mdb.c         ****         state = 1;
 482:mdb.c         ****     }
 483:mdb.c         **** 
 484:mdb.c         ****     switch (mdb_poll_reply)
 485:mdb.c         ****     {
 486:mdb.c         **** 
 487:mdb.c         ****     case MDB_REPLY_ACK:
 488:mdb.c         ****         // send ACK
 489:mdb.c         **** 
 490:mdb.c         ****         send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY); ////*uncomment it
 491:mdb.c         **** 
 492:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 493:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 494:mdb.c         **** 
 495:mdb.c         ****         //sprintf(buf,"checksum-total-recv:      0x%08x\r\n", checksum);
 496:mdb.c         ****         //#if DEBUG == 1
 497:mdb.c         ****         send_str_p(UPLINK_USART, PSTR("ACK00\r\n"));
 498:mdb.c         ****         //#endif
 499:mdb.c         ****         txSwitchState(PIN12, 1);
 500:mdb.c         **** #if TXSWITCH == 1
 501:mdb.c         ****         txSwitchState(PIN12, 1); ////this should be one
 502:mdb.c         **** #endif
 503:mdb.c         ****         //MDB_USART_TX_READY=0;
 504:mdb.c         ****         state = 0;
 505:mdb.c         ****         break;
 506:mdb.c         **** 
 507:mdb.c         ****     case MDB_REPLY_JUST_RESET:
 508:mdb.c         ****         // send JUST RESET
 509:mdb.c         ****         if (state == 1)
 510:mdb.c         ****         {
 511:mdb.c         ****             send_mdb(MDB_USART, 0x000, MDB_USART_TX_READY);
 512:mdb.c         ****             send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY);
 513:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("JustREset00\r\n"));
 514:mdb.c         **** 
 515:mdb.c         ****             // {asm("ldi r30,0"); asm("ldi r31,0"); asm("ijmp");}
 516:mdb.c         **** #if TXSWITCH == 1
 517:mdb.c         ****             txSwitchState(PIN12, 0);
 518:mdb.c         **** #endif
 519:mdb.c         ****             state = 2;
 520:mdb.c         ****             //return; //no return in orignal
 521:mdb.c         ****         }
 522:mdb.c         **** 
 523:mdb.c         ****         // wait for the ACK
 524:mdb.c         ****         else if (state == 2)
 525:mdb.c         ****         {
 526:mdb.c         ****             // wait for enough data in Buffer
 527:mdb.c         ****             if (buffer_level(MDB_USART, RX) < 2)
 528:mdb.c         ****                 return;
 529:mdb.c         ****             // check if VMC sent ACK
 530:mdb.c         ****             if (recv_mdb(MDB_USART) != 0x000)
 531:mdb.c         ****             {
 532:mdb.c         ****                 mdb_active_cmd = MDB_IDLE;
 533:mdb.c         ****                 mdb_poll_reply = MDB_REPLY_ACK;
 534:mdb.c         ****                 state = 0;
 535:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [JUST RESET]\r\n"));
 536:mdb.c         ****                 return;
 537:mdb.c         ****             }
 538:mdb.c         **** 
 539:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 540:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 541:mdb.c         ****             state = 0;
 542:mdb.c         ****             return;
 543:mdb.c         ****         }
 544:mdb.c         ****         break;
 545:mdb.c         **** 
 546:mdb.c         ****     case MDB_REPLY_READER_CFG:
 547:mdb.c         ****         // not yet implemented
 548:mdb.c         **** 
 549:mdb.c         ****         break;
 550:mdb.c         **** 
 551:mdb.c         ****     case MDB_REPLY_DISPLAY_REQ:
 552:mdb.c         ****         // not yet implemented
 553:mdb.c         ****         send_mdb(MDB_USART, 0x002, MDB_USART_TX_READY);
 554:mdb.c         ****         send_mdb(MDB_USART, 0x032, MDB_USART_TX_READY);
 555:mdb.c         ****         //sending iota
 556:mdb.c         ****         send_mdb(MDB_USART, 0x049, MDB_USART_TX_READY);
 557:mdb.c         ****         send_mdb(MDB_USART, 0x04F, MDB_USART_TX_READY);
 558:mdb.c         ****         send_mdb(MDB_USART, 0x054, MDB_USART_TX_READY);
 559:mdb.c         ****         send_mdb(MDB_USART, 0x041, MDB_USART_TX_READY);
 560:mdb.c         **** 
 561:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 562:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 563:mdb.c         **** 
 564:mdb.c         ****         state = 0;
 565:mdb.c         ****         break;
 566:mdb.c         **** 
 567:mdb.c         ****     case MDB_REPLY_BEGIN_SESSION:
 568:mdb.c         ****         //added newly
 569:mdb.c         ****         if (session.start.flag && state == 1)
 570:mdb.c         ****         {
 571:mdb.c         **** 
 572:mdb.c         ****             send_mdb(MDB_USART, 0x003, MDB_USART_TX_READY);
 573:mdb.c         ****             send_mdb(MDB_USART, (session.start.funds >> 8), MDB_USART_TX_READY);
 574:mdb.c         ****             send_mdb(MDB_USART, (session.start.funds & 0xFF), MDB_USART_TX_READY);
 575:mdb.c         ****             checksum = 0x003 + (session.start.funds >> 8) + (session.start.funds & 0xFF);
 576:mdb.c         ****             checksum = (checksum & 0xFF) | 0x100;
 577:mdb.c         ****             send_mdb(MDB_USART, checksum, MDB_USART_TX_READY);
 578:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("BeginSession00\r\n"));
 579:mdb.c         ****             state = 2;
 580:mdb.c         **** 
 581:mdb.c         ****             //                play(1);
 582:mdb.c         ****         }
 583:mdb.c         **** 
 584:mdb.c         ****         else if (session.start.flag && state == 2)
 585:mdb.c         ****         {
 586:mdb.c         ****             // wait for enough data in Buffer
 587:mdb.c         ****             if (buffer_level(MDB_USART, RX) < 2)
 588:mdb.c         ****                 return;
 589:mdb.c         ****             //   play(2);
 590:mdb.c         ****             // check if VMC sent ACK
 591:mdb.c         ****             if (recv_mdb(MDB_USART) != 0x000)
 592:mdb.c         ****             {
 593:mdb.c         ****                 mdb_active_cmd = MDB_IDLE;
 594:mdb.c         ****                 mdb_poll_reply = MDB_REPLY_ACK;
 595:mdb.c         ****                 session.start.flag = 0;
 596:mdb.c         ****                 session.start.funds = 0;
 597:mdb.c         ****                 state = 0;
 598:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [START SESSION]\r\n"));
 599:mdb.c         ****                 return;
 600:mdb.c         ****             }
 601:mdb.c         ****             session.start.flag = 0;
 602:mdb.c         ****             session.start.funds = 0;
 603:mdb.c         ****             mdb_state = MDB_SESSION_IDLE;
 604:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 605:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 606:mdb.c         ****             state = 0;
 607:mdb.c         ****             return;
 608:mdb.c         ****         }
 609:mdb.c         ****         break;
 610:mdb.c         **** 
 611:mdb.c         ****     case MDB_REPLY_SESSION_CANCEL_REQ:
 612:mdb.c         ****         if (state == 1)
 613:mdb.c         ****         {
 614:mdb.c         ****             send_mdb(MDB_USART, 0x004, MDB_USART_TX_READY);
 615:mdb.c         ****             send_mdb(MDB_USART, 0x104, MDB_USART_TX_READY);
 616:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("SessionCancelled00\r\n"));
 617:mdb.c         ****             state = 2;
 618:mdb.c         ****             // play(4);
 619:mdb.c         ****         }
 620:mdb.c         ****         else if (state == 2)
 621:mdb.c         ****         {
 622:mdb.c         ****             // wait for enough data in Buffer
 623:mdb.c         ****             //play(4);
 624:mdb.c         ****             if (buffer_level(MDB_USART, RX) < 2)
 625:mdb.c         ****                 return;
 626:mdb.c         ****             // check if VMC sent ACK
 627:mdb.c         ****             if (recv_mdb(MDB_USART) != 0x000)
 628:mdb.c         ****             {
 629:mdb.c         ****                 mdb_active_cmd = MDB_IDLE;
 630:mdb.c         ****                 mdb_poll_reply = MDB_REPLY_ACK;
 631:mdb.c         ****                 session.start.flag = 0;
 632:mdb.c         ****                 session.start.funds = 0;
 633:mdb.c         ****                 state = 0;
 634:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [SESSION CANCEL REQ]\r\n")
 635:mdb.c         ****                 return;
 636:mdb.c         ****             }
 637:mdb.c         ****             session.start.flag = 0;
 638:mdb.c         ****             session.start.funds = 0;
 639:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 640:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 641:mdb.c         ****             state = 0;
 642:mdb.c         ****             return;
 643:mdb.c         ****         }
 644:mdb.c         ****         break;
 645:mdb.c         **** 
 646:mdb.c         ****     case MDB_REPLY_VEND_APPROVED:
 647:mdb.c         ****         if (session.result.vend_approved && state == 1)
 648:mdb.c         ****         {
 649:mdb.c         ****             send_mdb(MDB_USART, 0x005, MDB_USART_TX_READY);
 650:mdb.c         ****             send_mdb(MDB_USART, (session.result.vend_amount >> 8), MDB_USART_TX_READY);
 651:mdb.c         ****             send_mdb(MDB_USART, (session.result.vend_amount & 0xFF), MDB_USART_TX_READY);
 652:mdb.c         ****             checksum = 0x005 + (session.result.vend_amount >> 8) + (session.result.vend_amount & 0x
 653:mdb.c         ****             checksum = (checksum & 0xFF) | 0x100;
 654:mdb.c         ****             send_mdb(MDB_USART, checksum, MDB_USART_TX_READY);
 655:mdb.c         ****             state = 2;
 656:mdb.c         ****             // play(5);
 657:mdb.c         ****         }
 658:mdb.c         ****         else if (session.result.vend_approved && state == 2)
 659:mdb.c         ****         {
 660:mdb.c         ****             //play(5);
 661:mdb.c         ****             // wait for enough data in Buffer
 662:mdb.c         ****             if (buffer_level(MDB_USART, RX) < 2)
 663:mdb.c         ****                 return;
 664:mdb.c         ****             // check if VMC sent ACK
 665:mdb.c         ****             if (recv_mdb(MDB_USART) != 0x000)
 666:mdb.c         ****             {
 667:mdb.c         ****                 mdb_active_cmd = MDB_IDLE;
 668:mdb.c         ****                 mdb_poll_reply = MDB_REPLY_ACK;
 669:mdb.c         ****                 session.result.vend_approved = 0;
 670:mdb.c         ****                 session.result.vend_amount = 0;
 671:mdb.c         ****                 state = 0;
 672:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [VEND APPROVE]\r\n"));
 673:mdb.c         ****                 return;
 674:mdb.c         ****             }
 675:mdb.c         ****             session.result.vend_approved = 0;
 676:mdb.c         ****             session.result.vend_amount = 0;
 677:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 678:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 679:mdb.c         ****             state = 0;
 680:mdb.c         ****             return;
 681:mdb.c         ****         }
 682:mdb.c         ****         break;
 683:mdb.c         **** 
 684:mdb.c         ****     case MDB_REPLY_VEND_DENIED:
 685:mdb.c         ****         if (session.result.vend_denied && state == 1)
 686:mdb.c         ****         {
 687:mdb.c         ****             send_mdb(MDB_USART, 0x006, MDB_USART_TX_READY);
 688:mdb.c         ****             send_mdb(MDB_USART, 0x106, MDB_USART_TX_READY);
 689:mdb.c         ****             state = 2;
 690:mdb.c         ****             //                play(4);
 691:mdb.c         ****         }
 692:mdb.c         ****         else if (session.result.vend_denied && state == 2)
 693:mdb.c         ****         {
 694:mdb.c         ****             // wait for enough data in Buffer
 695:mdb.c         ****             // play(4);
 696:mdb.c         ****             if (buffer_level(MDB_USART, RX) < 2)
 697:mdb.c         ****                 return;
 698:mdb.c         ****             // check if VMC sent ACK
 699:mdb.c         ****             if (recv_mdb(MDB_USART) != 0x000)
 700:mdb.c         ****             {
 701:mdb.c         ****                 mdb_active_cmd = MDB_IDLE;
 702:mdb.c         ****                 mdb_poll_reply = MDB_REPLY_ACK;
 703:mdb.c         ****                 session.start.flag = 0;
 704:mdb.c         ****                 session.start.funds = 0;
 705:mdb.c         ****                 session.result.vend_denied = 0;
 706:mdb.c         ****                 state = 0;
 707:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [VEND DENY]\r\n"));
 708:mdb.c         ****                 return;
 709:mdb.c         ****             }
 710:mdb.c         ****             session.start.flag = 0;
 711:mdb.c         ****             session.start.funds = 0;
 712:mdb.c         ****             session.result.vend_denied = 0;
 713:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 714:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 715:mdb.c         ****             state = 0;
 716:mdb.c         ****             return;
 717:mdb.c         ****         }
 718:mdb.c         ****         break;
 719:mdb.c         **** 
 720:mdb.c         ****     case MDB_REPLY_END_SESSION:
 721:mdb.c         ****         if (state == 1)
 722:mdb.c         ****         {
 723:mdb.c         ****             send_mdb(MDB_USART, 0x007, MDB_USART_TX_READY);
 724:mdb.c         ****             send_mdb(MDB_USART, 0x107, MDB_USART_TX_READY);
 725:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("EndSession00\r\n"));
 726:mdb.c         ****             state = 2;
 727:mdb.c         ****         }
 728:mdb.c         ****         else if (state == 2)
 729:mdb.c         ****         {
 730:mdb.c         ****             // wait for enough data in Buffer
 731:mdb.c         ****             if (buffer_level(MDB_USART, RX) < 2)
 732:mdb.c         ****                 return;
 733:mdb.c         ****             // check if VMC sent ACK
 734:mdb.c         ****             if (recv_mdb(MDB_USART) != 0x000)
 735:mdb.c         ****             {
 736:mdb.c         ****                 mdb_active_cmd = MDB_IDLE;
 737:mdb.c         ****                 mdb_poll_reply = MDB_REPLY_ACK;
 738:mdb.c         ****                 state = 0;
 739:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [END SESSION]\r\n"));
 740:mdb.c         ****                 return;
 741:mdb.c         ****             }
 742:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 743:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 744:mdb.c         ****             state = 0;
 745:mdb.c         ****             return;
 746:mdb.c         ****         }
 747:mdb.c         ****         break;
 748:mdb.c         **** 
 749:mdb.c         ****     case MDB_REPLY_CANCELED:
 750:mdb.c         ****         if (state == 1)
 751:mdb.c         ****         {
 752:mdb.c         ****             send_mdb(MDB_USART, 0x008, MDB_USART_TX_READY);
 753:mdb.c         ****             send_mdb(MDB_USART, 0x108, MDB_USART_TX_READY);
 754:mdb.c         ****             state = 2;
 755:mdb.c         ****             //play(4);
 756:mdb.c         ****         }
 757:mdb.c         ****         else if (state == 2)
 758:mdb.c         ****         {
 759:mdb.c         ****             // wait for enough data in Buffer
 760:mdb.c         ****             if (buffer_level(MDB_USART, RX) < 2)
 761:mdb.c         ****                 return;
 762:mdb.c         ****             // check if VMC sent ACK
 763:mdb.c         ****             if (recv_mdb(MDB_USART) != 0x000)
 764:mdb.c         ****             {
 765:mdb.c         ****                 mdb_active_cmd = MDB_IDLE;
 766:mdb.c         ****                 mdb_poll_reply = MDB_REPLY_ACK;
 767:mdb.c         ****                 state = 0;
 768:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [REPLY CANCELED]\r\n"));
 1237               		.loc 1 768 17 view .LVU288
 1238 06d8 80E0      		ldi r24,0
 1239               	/* epilogue start */
 769:mdb.c         ****                 return;
 770:mdb.c         ****             }
 771:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 772:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 773:mdb.c         ****             state = 0;
 774:mdb.c         ****             return;
 775:mdb.c         ****         }
 776:mdb.c         ****         break;
 777:mdb.c         **** 
 778:mdb.c         ****     case MDB_REPLY_PERIPHERIAL_ID:
 779:mdb.c         **** 
 780:mdb.c         ****         break;
 781:mdb.c         **** 
 782:mdb.c         ****     case MDB_REPLY_ERROR:
 783:mdb.c         **** 
 784:mdb.c         ****         break;
 785:mdb.c         **** 
 786:mdb.c         ****     case MDB_REPLY_CMD_OUT_SEQUENCE:
 787:mdb.c         **** 
 788:mdb.c         ****         break;
 789:mdb.c         ****     }
 790:mdb.c         **** }
 1240               		.loc 1 790 1 view .LVU289
 1241 06da DF91      		pop r29
 1242 06dc CF91      		pop r28
 1243 06de 1F91      		pop r17
 1244 06e0 0F91      		pop r16
 768:mdb.c         ****                 return;
 1245               		.loc 1 768 17 view .LVU290
 1246 06e2 0C94 0000 		jmp send_str_p
 1247               	.LVL74:
 1248               	.L28:
 481:mdb.c         ****     }
 1249               		.loc 1 481 9 is_stmt 1 view .LVU291
 481:mdb.c         ****     }
 1250               		.loc 1 481 15 is_stmt 0 view .LVU292
 1251 06e6 81E0      		ldi r24,lo8(1)
 1252 06e8 8093 0000 		sts state.28,r24
 1253               	.L25:
 484:mdb.c         ****     {
 1254               		.loc 1 484 5 is_stmt 1 view .LVU293
 1255 06ec E091 0000 		lds r30,mdb_poll_reply
 1256 06f0 EA30      		cpi r30,lo8(10)
 1257 06f2 00F4      		brsh .L24
 1258 06f4 F0E0      		ldi r31,0
 1259 06f6 8827      		clr r24
 1260 06f8 E050      		subi r30,pm_lo8(-(.L30))
 1261 06fa F040      		sbci r31,pm_hi8(-(.L30))
 1262 06fc 8040      		sbci r24,pm_hh8(-(.L30))
 1263 06fe 0C94 0000 		jmp __tablejump2__
 1264               		.section	.jumptables.gcc.mdb_poll,"a",@progbits
 1265               		.p2align	1
 1266               	.L30:
 1267 0000 0000      		.word gs(.L38)
 1268 0002 0000      		.word gs(.L37)
 1269 0004 0000      		.word gs(.L24)
 1270 0006 0000      		.word gs(.L36)
 1271 0008 0000      		.word gs(.L35)
 1272 000a 0000      		.word gs(.L34)
 1273 000c 0000      		.word gs(.L33)
 1274 000e 0000      		.word gs(.L32)
 1275 0010 0000      		.word gs(.L31)
 1276 0012 0000      		.word gs(.L29)
 1277               		.text
 1278               	.L38:
 490:mdb.c         **** 
 1279               		.loc 1 490 9 view .LVU294
 1280 0702 4091 0000 		lds r20,MDB_USART_TX_READY
 1281 0706 60E0      		ldi r22,0
 1282 0708 71E0      		ldi r23,lo8(1)
 1283 070a 81E0      		ldi r24,lo8(1)
 1284 070c 0E94 0000 		call send_mdb
 1285               	.LVL75:
 492:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 1286               		.loc 1 492 9 view .LVU295
 492:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 1287               		.loc 1 492 24 is_stmt 0 view .LVU296
 1288 0710 1092 0000 		sts mdb_active_cmd,__zero_reg__
 493:mdb.c         **** 
 1289               		.loc 1 493 9 is_stmt 1 view .LVU297
 493:mdb.c         **** 
 1290               		.loc 1 493 24 is_stmt 0 view .LVU298
 1291 0714 1092 0000 		sts mdb_poll_reply,__zero_reg__
 497:mdb.c         ****         //#endif
 1292               		.loc 1 497 9 is_stmt 1 view .LVU299
 1293               	.LBB22:
 497:mdb.c         ****         //#endif
 1294               		.loc 1 497 34 view .LVU300
 497:mdb.c         ****         //#endif
 1295               		.loc 1 497 34 view .LVU301
 1296               	.LBE22:
 497:mdb.c         ****         //#endif
 1297               		.loc 1 497 9 is_stmt 0 view .LVU302
 1298 0718 60E0      		ldi r22,lo8(__c.26)
 1299 071a 70E0      		ldi r23,hi8(__c.26)
 1300 071c 80E0      		ldi r24,0
 1301 071e 0E94 0000 		call send_str_p
 1302               	.LVL76:
 499:mdb.c         **** #if TXSWITCH == 1
 1303               		.loc 1 499 9 is_stmt 1 view .LVU303
 1304 0722 61E0      		ldi r22,lo8(1)
 1305 0724 8CE0      		ldi r24,lo8(12)
 1306 0726 0E94 0000 		call txSwitchState
 1307               	.LVL77:
 504:mdb.c         ****         break;
 1308               		.loc 1 504 9 view .LVU304
 1309               	.L70:
 541:mdb.c         ****             return;
 1310               		.loc 1 541 13 view .LVU305
 541:mdb.c         ****             return;
 1311               		.loc 1 541 19 is_stmt 0 view .LVU306
 1312 072a 1092 0000 		sts state.28,__zero_reg__
 542:mdb.c         ****         }
 1313               		.loc 1 542 13 is_stmt 1 view .LVU307
 1314               	.LVL78:
 1315               	.L24:
 1316               	/* epilogue start */
 1317               		.loc 1 790 1 is_stmt 0 view .LVU308
 1318 072e DF91      		pop r29
 1319 0730 CF91      		pop r28
 1320 0732 1F91      		pop r17
 1321 0734 0F91      		pop r16
 1322 0736 0895      		ret
 1323               	.LVL79:
 1324               	.L37:
 509:mdb.c         ****         {
 1325               		.loc 1 509 9 is_stmt 1 view .LVU309
 509:mdb.c         ****         {
 1326               		.loc 1 509 19 is_stmt 0 view .LVU310
 1327 0738 8091 0000 		lds r24,state.28
 509:mdb.c         ****         {
 1328               		.loc 1 509 12 view .LVU311
 1329 073c 8130      		cpi r24,lo8(1)
 1330 073e 01F4      		brne .L39
 511:mdb.c         ****             send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY);
 1331               		.loc 1 511 13 is_stmt 1 view .LVU312
 1332 0740 4091 0000 		lds r20,MDB_USART_TX_READY
 1333 0744 70E0      		ldi r23,0
 1334 0746 60E0      		ldi r22,0
 1335 0748 0E94 0000 		call send_mdb
 1336               	.LVL80:
 512:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("JustREset00\r\n"));
 1337               		.loc 1 512 13 view .LVU313
 1338 074c 4091 0000 		lds r20,MDB_USART_TX_READY
 1339 0750 60E0      		ldi r22,0
 1340 0752 71E0      		ldi r23,lo8(1)
 1341 0754 81E0      		ldi r24,lo8(1)
 1342 0756 0E94 0000 		call send_mdb
 1343               	.LVL81:
 513:mdb.c         **** 
 1344               		.loc 1 513 13 view .LVU314
 1345               	.LBB23:
 513:mdb.c         **** 
 1346               		.loc 1 513 38 view .LVU315
 513:mdb.c         **** 
 1347               		.loc 1 513 38 view .LVU316
 1348               	.LBE23:
 513:mdb.c         **** 
 1349               		.loc 1 513 13 is_stmt 0 view .LVU317
 1350 075a 60E0      		ldi r22,lo8(__c.25)
 1351 075c 70E0      		ldi r23,hi8(__c.25)
 1352               	.LVL82:
 1353               	.L74:
 725:mdb.c         ****             state = 2;
 1354               		.loc 1 725 13 view .LVU318
 1355 075e 80E0      		ldi r24,0
 1356 0760 0E94 0000 		call send_str_p
 1357               	.LVL83:
 726:mdb.c         ****         }
 1358               		.loc 1 726 13 is_stmt 1 view .LVU319
 1359               	.L71:
 754:mdb.c         ****             //play(4);
 1360               		.loc 1 754 13 view .LVU320
 754:mdb.c         ****             //play(4);
 1361               		.loc 1 754 19 is_stmt 0 view .LVU321
 1362 0764 82E0      		ldi r24,lo8(2)
 1363 0766 8093 0000 		sts state.28,r24
 1364 076a 00C0      		rjmp .L24
 1365               	.LVL84:
 1366               	.L39:
 524:mdb.c         ****         {
 1367               		.loc 1 524 14 is_stmt 1 view .LVU322
 524:mdb.c         ****         {
 1368               		.loc 1 524 17 is_stmt 0 view .LVU323
 1369 076c 8230      		cpi r24,lo8(2)
 1370 076e 01F4      		brne .L24
 527:mdb.c         ****                 return;
 1371               		.loc 1 527 13 is_stmt 1 view .LVU324
 527:mdb.c         ****                 return;
 1372               		.loc 1 527 17 is_stmt 0 view .LVU325
 1373 0770 60E0      		ldi r22,0
 1374 0772 81E0      		ldi r24,lo8(1)
 1375 0774 0E94 0000 		call buffer_level
 1376               	.LVL85:
 527:mdb.c         ****                 return;
 1377               		.loc 1 527 16 view .LVU326
 1378 0778 8230      		cpi r24,lo8(2)
 1379 077a 00F0      		brlo .L24
 530:mdb.c         ****             {
 1380               		.loc 1 530 13 is_stmt 1 view .LVU327
 530:mdb.c         ****             {
 1381               		.loc 1 530 17 is_stmt 0 view .LVU328
 1382 077c 81E0      		ldi r24,lo8(1)
 1383 077e 0E94 0000 		call recv_mdb
 1384               	.LVL86:
 530:mdb.c         ****             {
 1385               		.loc 1 530 16 view .LVU329
 1386 0782 892B      		or r24,r25
 1387 0784 01F0      		breq .L41
 532:mdb.c         ****                 mdb_poll_reply = MDB_REPLY_ACK;
 1388               		.loc 1 532 17 is_stmt 1 view .LVU330
 532:mdb.c         ****                 mdb_poll_reply = MDB_REPLY_ACK;
 1389               		.loc 1 532 32 is_stmt 0 view .LVU331
 1390 0786 1092 0000 		sts mdb_active_cmd,__zero_reg__
 533:mdb.c         ****                 state = 0;
 1391               		.loc 1 533 17 is_stmt 1 view .LVU332
 533:mdb.c         ****                 state = 0;
 1392               		.loc 1 533 32 is_stmt 0 view .LVU333
 1393 078a 1092 0000 		sts mdb_poll_reply,__zero_reg__
 534:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [JUST RESET]\r\n"));
 1394               		.loc 1 534 17 is_stmt 1 view .LVU334
 534:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [JUST RESET]\r\n"));
 1395               		.loc 1 534 23 is_stmt 0 view .LVU335
 1396 078e 1092 0000 		sts state.28,__zero_reg__
 535:mdb.c         ****                 return;
 1397               		.loc 1 535 17 is_stmt 1 view .LVU336
 1398               	.LBB24:
 535:mdb.c         ****                 return;
 1399               		.loc 1 535 42 view .LVU337
 535:mdb.c         ****                 return;
 1400               		.loc 1 535 42 view .LVU338
 1401               	.LBE24:
 535:mdb.c         ****                 return;
 1402               		.loc 1 535 17 is_stmt 0 view .LVU339
 1403 0792 60E0      		ldi r22,lo8(__c.24)
 1404 0794 70E0      		ldi r23,hi8(__c.24)
 1405 0796 00C0      		rjmp .L73
 1406               	.L36:
 553:mdb.c         ****         send_mdb(MDB_USART, 0x032, MDB_USART_TX_READY);
 1407               		.loc 1 553 9 is_stmt 1 view .LVU340
 1408 0798 4091 0000 		lds r20,MDB_USART_TX_READY
 1409 079c 62E0      		ldi r22,lo8(2)
 1410 079e 70E0      		ldi r23,0
 1411 07a0 81E0      		ldi r24,lo8(1)
 1412 07a2 0E94 0000 		call send_mdb
 1413               	.LVL87:
 554:mdb.c         ****         //sending iota
 1414               		.loc 1 554 9 view .LVU341
 1415 07a6 4091 0000 		lds r20,MDB_USART_TX_READY
 1416 07aa 62E3      		ldi r22,lo8(50)
 1417 07ac 70E0      		ldi r23,0
 1418 07ae 81E0      		ldi r24,lo8(1)
 1419 07b0 0E94 0000 		call send_mdb
 1420               	.LVL88:
 556:mdb.c         ****         send_mdb(MDB_USART, 0x04F, MDB_USART_TX_READY);
 1421               		.loc 1 556 9 view .LVU342
 1422 07b4 4091 0000 		lds r20,MDB_USART_TX_READY
 1423 07b8 69E4      		ldi r22,lo8(73)
 1424 07ba 70E0      		ldi r23,0
 1425 07bc 81E0      		ldi r24,lo8(1)
 1426 07be 0E94 0000 		call send_mdb
 1427               	.LVL89:
 557:mdb.c         ****         send_mdb(MDB_USART, 0x054, MDB_USART_TX_READY);
 1428               		.loc 1 557 9 view .LVU343
 1429 07c2 4091 0000 		lds r20,MDB_USART_TX_READY
 1430 07c6 6FE4      		ldi r22,lo8(79)
 1431 07c8 70E0      		ldi r23,0
 1432 07ca 81E0      		ldi r24,lo8(1)
 1433 07cc 0E94 0000 		call send_mdb
 1434               	.LVL90:
 558:mdb.c         ****         send_mdb(MDB_USART, 0x041, MDB_USART_TX_READY);
 1435               		.loc 1 558 9 view .LVU344
 1436 07d0 4091 0000 		lds r20,MDB_USART_TX_READY
 1437 07d4 64E5      		ldi r22,lo8(84)
 1438 07d6 70E0      		ldi r23,0
 1439 07d8 81E0      		ldi r24,lo8(1)
 1440 07da 0E94 0000 		call send_mdb
 1441               	.LVL91:
 559:mdb.c         **** 
 1442               		.loc 1 559 9 view .LVU345
 1443 07de 4091 0000 		lds r20,MDB_USART_TX_READY
 1444 07e2 61E4      		ldi r22,lo8(65)
 1445 07e4 70E0      		ldi r23,0
 1446 07e6 81E0      		ldi r24,lo8(1)
 1447 07e8 0E94 0000 		call send_mdb
 1448               	.LVL92:
 561:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 1449               		.loc 1 561 9 view .LVU346
 1450               	.L41:
 539:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 1451               		.loc 1 539 13 view .LVU347
 539:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 1452               		.loc 1 539 28 is_stmt 0 view .LVU348
 1453 07ec 1092 0000 		sts mdb_active_cmd,__zero_reg__
 540:mdb.c         ****             state = 0;
 1454               		.loc 1 540 13 is_stmt 1 view .LVU349
 540:mdb.c         ****             state = 0;
 1455               		.loc 1 540 28 is_stmt 0 view .LVU350
 1456 07f0 1092 0000 		sts mdb_poll_reply,__zero_reg__
 1457 07f4 00C0      		rjmp .L70
 1458               	.L35:
 569:mdb.c         ****         {
 1459               		.loc 1 569 9 is_stmt 1 view .LVU351
 569:mdb.c         ****         {
 1460               		.loc 1 569 12 is_stmt 0 view .LVU352
 1461 07f6 8091 0000 		lds r24,session
 1462 07fa 8823      		tst r24
 1463 07fc 01F4      		brne .+2
 1464 07fe 00C0      		rjmp .L24
 569:mdb.c         ****         {
 1465               		.loc 1 569 41 discriminator 1 view .LVU353
 1466 0800 8091 0000 		lds r24,state.28
 569:mdb.c         ****         {
 1467               		.loc 1 569 32 discriminator 1 view .LVU354
 1468 0804 8130      		cpi r24,lo8(1)
 1469 0806 01F4      		brne .L42
 572:mdb.c         ****             send_mdb(MDB_USART, (session.start.funds >> 8), MDB_USART_TX_READY);
 1470               		.loc 1 572 13 is_stmt 1 view .LVU355
 1471 0808 4091 0000 		lds r20,MDB_USART_TX_READY
 1472 080c 63E0      		ldi r22,lo8(3)
 1473 080e 70E0      		ldi r23,0
 1474 0810 0E94 0000 		call send_mdb
 1475               	.LVL93:
 573:mdb.c         ****             send_mdb(MDB_USART, (session.start.funds & 0xFF), MDB_USART_TX_READY);
 1476               		.loc 1 573 13 view .LVU356
 1477 0814 6091 0000 		lds r22,session+2
 1478 0818 4091 0000 		lds r20,MDB_USART_TX_READY
 1479 081c 70E0      		ldi r23,0
 1480 081e 81E0      		ldi r24,lo8(1)
 1481 0820 0E94 0000 		call send_mdb
 1482               	.LVL94:
 574:mdb.c         ****             checksum = 0x003 + (session.start.funds >> 8) + (session.start.funds & 0xFF);
 1483               		.loc 1 574 13 view .LVU357
 1484 0824 6091 0000 		lds r22,session+1
 1485 0828 7091 0000 		lds r23,session+1+1
 1486 082c 7727      		clr r23
 1487 082e 4091 0000 		lds r20,MDB_USART_TX_READY
 1488 0832 81E0      		ldi r24,lo8(1)
 1489 0834 0E94 0000 		call send_mdb
 1490               	.LVL95:
 575:mdb.c         ****             checksum = (checksum & 0xFF) | 0x100;
 1491               		.loc 1 575 13 view .LVU358
 575:mdb.c         ****             checksum = (checksum & 0xFF) | 0x100;
 1492               		.loc 1 575 46 is_stmt 0 view .LVU359
 1493 0838 8091 0000 		lds r24,session+1
 1494 083c 9091 0000 		lds r25,session+2
 1495               	.LVL96:
 576:mdb.c         ****             send_mdb(MDB_USART, checksum, MDB_USART_TX_READY);
 1496               		.loc 1 576 13 is_stmt 1 view .LVU360
 575:mdb.c         ****             checksum = (checksum & 0xFF) | 0x100;
 1497               		.loc 1 575 53 is_stmt 0 view .LVU361
 1498 0840 092F      		mov r16,r25
 1499 0842 10E0      		ldi r17,0
 575:mdb.c         ****             checksum = (checksum & 0xFF) | 0x100;
 1500               		.loc 1 575 59 view .LVU362
 1501 0844 B801      		movw r22,r16
 1502 0846 680F      		add r22,r24
 1503 0848 711D      		adc r23,__zero_reg__
 575:mdb.c         ****             checksum = (checksum & 0xFF) | 0x100;
 1504               		.loc 1 575 22 view .LVU363
 1505 084a 6D5F      		subi r22,-3
 1506 084c 7F4F      		sbci r23,-1
 576:mdb.c         ****             send_mdb(MDB_USART, checksum, MDB_USART_TX_READY);
 1507               		.loc 1 576 34 view .LVU364
 1508 084e 7727      		clr r23
 1509               	.LVL97:
 577:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("BeginSession00\r\n"));
 1510               		.loc 1 577 13 is_stmt 1 view .LVU365
 576:mdb.c         ****             send_mdb(MDB_USART, checksum, MDB_USART_TX_READY);
 1511               		.loc 1 576 22 is_stmt 0 view .LVU366
 1512 0850 7160      		ori r23,1
 1513               	.LVL98:
 577:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("BeginSession00\r\n"));
 1514               		.loc 1 577 13 view .LVU367
 1515 0852 4091 0000 		lds r20,MDB_USART_TX_READY
 1516 0856 81E0      		ldi r24,lo8(1)
 1517 0858 0E94 0000 		call send_mdb
 1518               	.LVL99:
 578:mdb.c         ****             state = 2;
 1519               		.loc 1 578 13 is_stmt 1 view .LVU368
 1520               	.LBB25:
 578:mdb.c         ****             state = 2;
 1521               		.loc 1 578 38 view .LVU369
 578:mdb.c         ****             state = 2;
 1522               		.loc 1 578 38 view .LVU370
 1523               	.LBE25:
 578:mdb.c         ****             state = 2;
 1524               		.loc 1 578 13 is_stmt 0 view .LVU371
 1525 085c 60E0      		ldi r22,lo8(__c.23)
 1526 085e 70E0      		ldi r23,hi8(__c.23)
 1527 0860 00C0      		rjmp .L74
 1528               	.LVL100:
 1529               	.L42:
 584:mdb.c         ****         {
 1530               		.loc 1 584 14 is_stmt 1 discriminator 1 view .LVU372
 584:mdb.c         ****         {
 1531               		.loc 1 584 37 is_stmt 0 discriminator 1 view .LVU373
 1532 0862 8230      		cpi r24,lo8(2)
 1533 0864 01F0      		breq .+2
 1534 0866 00C0      		rjmp .L24
 587:mdb.c         ****                 return;
 1535               		.loc 1 587 13 is_stmt 1 view .LVU374
 587:mdb.c         ****                 return;
 1536               		.loc 1 587 17 is_stmt 0 view .LVU375
 1537 0868 60E0      		ldi r22,0
 1538 086a 81E0      		ldi r24,lo8(1)
 1539 086c 0E94 0000 		call buffer_level
 1540               	.LVL101:
 587:mdb.c         ****                 return;
 1541               		.loc 1 587 16 view .LVU376
 1542 0870 8230      		cpi r24,lo8(2)
 1543 0872 00F4      		brsh .+2
 1544 0874 00C0      		rjmp .L24
 591:mdb.c         ****             {
 1545               		.loc 1 591 13 is_stmt 1 view .LVU377
 591:mdb.c         ****             {
 1546               		.loc 1 591 17 is_stmt 0 view .LVU378
 1547 0876 81E0      		ldi r24,lo8(1)
 1548 0878 0E94 0000 		call recv_mdb
 1549               	.LVL102:
 591:mdb.c         ****             {
 1550               		.loc 1 591 16 view .LVU379
 1551 087c 892B      		or r24,r25
 1552 087e 01F0      		breq .L43
 593:mdb.c         ****                 mdb_poll_reply = MDB_REPLY_ACK;
 1553               		.loc 1 593 17 is_stmt 1 view .LVU380
 593:mdb.c         ****                 mdb_poll_reply = MDB_REPLY_ACK;
 1554               		.loc 1 593 32 is_stmt 0 view .LVU381
 1555 0880 1092 0000 		sts mdb_active_cmd,__zero_reg__
 594:mdb.c         ****                 session.start.flag = 0;
 1556               		.loc 1 594 17 is_stmt 1 view .LVU382
 594:mdb.c         ****                 session.start.flag = 0;
 1557               		.loc 1 594 32 is_stmt 0 view .LVU383
 1558 0884 1092 0000 		sts mdb_poll_reply,__zero_reg__
 595:mdb.c         ****                 session.start.funds = 0;
 1559               		.loc 1 595 17 is_stmt 1 view .LVU384
 595:mdb.c         ****                 session.start.funds = 0;
 1560               		.loc 1 595 36 is_stmt 0 view .LVU385
 1561 0888 1092 0000 		sts session,__zero_reg__
 596:mdb.c         ****                 state = 0;
 1562               		.loc 1 596 17 is_stmt 1 view .LVU386
 596:mdb.c         ****                 state = 0;
 1563               		.loc 1 596 37 is_stmt 0 view .LVU387
 1564 088c 1092 0000 		sts session+1+1,__zero_reg__
 1565 0890 1092 0000 		sts session+1,__zero_reg__
 597:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [START SESSION]\r\n"));
 1566               		.loc 1 597 17 is_stmt 1 view .LVU388
 597:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [START SESSION]\r\n"));
 1567               		.loc 1 597 23 is_stmt 0 view .LVU389
 1568 0894 1092 0000 		sts state.28,__zero_reg__
 598:mdb.c         ****                 return;
 1569               		.loc 1 598 17 is_stmt 1 view .LVU390
 1570               	.LBB26:
 598:mdb.c         ****                 return;
 1571               		.loc 1 598 42 view .LVU391
 598:mdb.c         ****                 return;
 1572               		.loc 1 598 42 view .LVU392
 1573               	.LBE26:
 598:mdb.c         ****                 return;
 1574               		.loc 1 598 17 is_stmt 0 view .LVU393
 1575 0898 60E0      		ldi r22,lo8(__c.22)
 1576 089a 70E0      		ldi r23,hi8(__c.22)
 1577 089c 00C0      		rjmp .L73
 1578               	.L43:
 601:mdb.c         ****             session.start.funds = 0;
 1579               		.loc 1 601 13 is_stmt 1 view .LVU394
 601:mdb.c         ****             session.start.funds = 0;
 1580               		.loc 1 601 32 is_stmt 0 view .LVU395
 1581 089e 1092 0000 		sts session,__zero_reg__
 602:mdb.c         ****             mdb_state = MDB_SESSION_IDLE;
 1582               		.loc 1 602 13 is_stmt 1 view .LVU396
 602:mdb.c         ****             mdb_state = MDB_SESSION_IDLE;
 1583               		.loc 1 602 33 is_stmt 0 view .LVU397
 1584 08a2 1092 0000 		sts session+1+1,__zero_reg__
 1585 08a6 1092 0000 		sts session+1,__zero_reg__
 603:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 1586               		.loc 1 603 13 is_stmt 1 view .LVU398
 603:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 1587               		.loc 1 603 23 is_stmt 0 view .LVU399
 1588 08aa 83E0      		ldi r24,lo8(3)
 1589 08ac 8093 0000 		sts mdb_state,r24
 604:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 1590               		.loc 1 604 13 is_stmt 1 view .LVU400
 1591 08b0 00C0      		rjmp .L41
 1592               	.L34:
 612:mdb.c         ****         {
 1593               		.loc 1 612 9 view .LVU401
 612:mdb.c         ****         {
 1594               		.loc 1 612 19 is_stmt 0 view .LVU402
 1595 08b2 8091 0000 		lds r24,state.28
 612:mdb.c         ****         {
 1596               		.loc 1 612 12 view .LVU403
 1597 08b6 8130      		cpi r24,lo8(1)
 1598 08b8 01F4      		brne .L44
 614:mdb.c         ****             send_mdb(MDB_USART, 0x104, MDB_USART_TX_READY);
 1599               		.loc 1 614 13 is_stmt 1 view .LVU404
 1600 08ba 4091 0000 		lds r20,MDB_USART_TX_READY
 1601 08be 64E0      		ldi r22,lo8(4)
 1602 08c0 70E0      		ldi r23,0
 1603 08c2 0E94 0000 		call send_mdb
 1604               	.LVL103:
 615:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("SessionCancelled00\r\n"));
 1605               		.loc 1 615 13 view .LVU405
 1606 08c6 4091 0000 		lds r20,MDB_USART_TX_READY
 1607 08ca 64E0      		ldi r22,lo8(4)
 1608 08cc 71E0      		ldi r23,lo8(1)
 1609 08ce 81E0      		ldi r24,lo8(1)
 1610 08d0 0E94 0000 		call send_mdb
 1611               	.LVL104:
 616:mdb.c         ****             state = 2;
 1612               		.loc 1 616 13 view .LVU406
 1613               	.LBB27:
 616:mdb.c         ****             state = 2;
 1614               		.loc 1 616 38 view .LVU407
 616:mdb.c         ****             state = 2;
 1615               		.loc 1 616 38 view .LVU408
 1616               	.LBE27:
 616:mdb.c         ****             state = 2;
 1617               		.loc 1 616 13 is_stmt 0 view .LVU409
 1618 08d4 60E0      		ldi r22,lo8(__c.21)
 1619 08d6 70E0      		ldi r23,hi8(__c.21)
 1620 08d8 00C0      		rjmp .L74
 1621               	.L44:
 620:mdb.c         ****         {
 1622               		.loc 1 620 14 is_stmt 1 view .LVU410
 620:mdb.c         ****         {
 1623               		.loc 1 620 17 is_stmt 0 view .LVU411
 1624 08da 8230      		cpi r24,lo8(2)
 1625 08dc 01F0      		breq .+2
 1626 08de 00C0      		rjmp .L24
 624:mdb.c         ****                 return;
 1627               		.loc 1 624 13 is_stmt 1 view .LVU412
 624:mdb.c         ****                 return;
 1628               		.loc 1 624 17 is_stmt 0 view .LVU413
 1629 08e0 60E0      		ldi r22,0
 1630 08e2 81E0      		ldi r24,lo8(1)
 1631 08e4 0E94 0000 		call buffer_level
 1632               	.LVL105:
 624:mdb.c         ****                 return;
 1633               		.loc 1 624 16 view .LVU414
 1634 08e8 8230      		cpi r24,lo8(2)
 1635 08ea 00F4      		brsh .+2
 1636 08ec 00C0      		rjmp .L24
 627:mdb.c         ****             {
 1637               		.loc 1 627 13 is_stmt 1 view .LVU415
 627:mdb.c         ****             {
 1638               		.loc 1 627 17 is_stmt 0 view .LVU416
 1639 08ee 81E0      		ldi r24,lo8(1)
 1640 08f0 0E94 0000 		call recv_mdb
 1641               	.LVL106:
 627:mdb.c         ****             {
 1642               		.loc 1 627 16 view .LVU417
 1643 08f4 892B      		or r24,r25
 1644 08f6 01F0      		breq .L45
 629:mdb.c         ****                 mdb_poll_reply = MDB_REPLY_ACK;
 1645               		.loc 1 629 17 is_stmt 1 view .LVU418
 629:mdb.c         ****                 mdb_poll_reply = MDB_REPLY_ACK;
 1646               		.loc 1 629 32 is_stmt 0 view .LVU419
 1647 08f8 1092 0000 		sts mdb_active_cmd,__zero_reg__
 630:mdb.c         ****                 session.start.flag = 0;
 1648               		.loc 1 630 17 is_stmt 1 view .LVU420
 630:mdb.c         ****                 session.start.flag = 0;
 1649               		.loc 1 630 32 is_stmt 0 view .LVU421
 1650 08fc 1092 0000 		sts mdb_poll_reply,__zero_reg__
 631:mdb.c         ****                 session.start.funds = 0;
 1651               		.loc 1 631 17 is_stmt 1 view .LVU422
 631:mdb.c         ****                 session.start.funds = 0;
 1652               		.loc 1 631 36 is_stmt 0 view .LVU423
 1653 0900 1092 0000 		sts session,__zero_reg__
 632:mdb.c         ****                 state = 0;
 1654               		.loc 1 632 17 is_stmt 1 view .LVU424
 632:mdb.c         ****                 state = 0;
 1655               		.loc 1 632 37 is_stmt 0 view .LVU425
 1656 0904 1092 0000 		sts session+1+1,__zero_reg__
 1657 0908 1092 0000 		sts session+1,__zero_reg__
 633:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [SESSION CANCEL REQ]\r\n")
 1658               		.loc 1 633 17 is_stmt 1 view .LVU426
 633:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [SESSION CANCEL REQ]\r\n")
 1659               		.loc 1 633 23 is_stmt 0 view .LVU427
 1660 090c 1092 0000 		sts state.28,__zero_reg__
 634:mdb.c         ****                 return;
 1661               		.loc 1 634 17 is_stmt 1 view .LVU428
 1662               	.LBB28:
 634:mdb.c         ****                 return;
 1663               		.loc 1 634 42 view .LVU429
 634:mdb.c         ****                 return;
 1664               		.loc 1 634 42 view .LVU430
 1665               	.LBE28:
 634:mdb.c         ****                 return;
 1666               		.loc 1 634 17 is_stmt 0 view .LVU431
 1667 0910 60E0      		ldi r22,lo8(__c.20)
 1668 0912 70E0      		ldi r23,hi8(__c.20)
 1669 0914 00C0      		rjmp .L73
 1670               	.L45:
 637:mdb.c         ****             session.start.funds = 0;
 1671               		.loc 1 637 13 is_stmt 1 view .LVU432
 637:mdb.c         ****             session.start.funds = 0;
 1672               		.loc 1 637 32 is_stmt 0 view .LVU433
 1673 0916 1092 0000 		sts session,__zero_reg__
 638:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 1674               		.loc 1 638 13 is_stmt 1 view .LVU434
 638:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 1675               		.loc 1 638 33 is_stmt 0 view .LVU435
 1676 091a 1092 0000 		sts session+1+1,__zero_reg__
 1677 091e 1092 0000 		sts session+1,__zero_reg__
 639:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 1678               		.loc 1 639 13 is_stmt 1 view .LVU436
 1679 0922 00C0      		rjmp .L41
 1680               	.L33:
 647:mdb.c         ****         {
 1681               		.loc 1 647 9 view .LVU437
 647:mdb.c         ****         {
 1682               		.loc 1 647 12 is_stmt 0 view .LVU438
 1683 0924 8091 0000 		lds r24,session+3
 1684 0928 8823      		tst r24
 1685 092a 01F4      		brne .+2
 1686 092c 00C0      		rjmp .L24
 647:mdb.c         ****         {
 1687               		.loc 1 647 51 discriminator 1 view .LVU439
 1688 092e 8091 0000 		lds r24,state.28
 647:mdb.c         ****         {
 1689               		.loc 1 647 42 discriminator 1 view .LVU440
 1690 0932 8130      		cpi r24,lo8(1)
 1691 0934 01F4      		brne .L46
 649:mdb.c         ****             send_mdb(MDB_USART, (session.result.vend_amount >> 8), MDB_USART_TX_READY);
 1692               		.loc 1 649 13 is_stmt 1 view .LVU441
 1693 0936 4091 0000 		lds r20,MDB_USART_TX_READY
 1694 093a 65E0      		ldi r22,lo8(5)
 1695 093c 70E0      		ldi r23,0
 1696 093e 0E94 0000 		call send_mdb
 1697               	.LVL107:
 650:mdb.c         ****             send_mdb(MDB_USART, (session.result.vend_amount & 0xFF), MDB_USART_TX_READY);
 1698               		.loc 1 650 13 view .LVU442
 1699 0942 6091 0000 		lds r22,session+6
 1700 0946 4091 0000 		lds r20,MDB_USART_TX_READY
 1701 094a 70E0      		ldi r23,0
 1702 094c 81E0      		ldi r24,lo8(1)
 1703 094e 0E94 0000 		call send_mdb
 1704               	.LVL108:
 651:mdb.c         ****             checksum = 0x005 + (session.result.vend_amount >> 8) + (session.result.vend_amount & 0x
 1705               		.loc 1 651 13 view .LVU443
 1706 0952 6091 0000 		lds r22,session+5
 1707 0956 7091 0000 		lds r23,session+5+1
 1708 095a 7727      		clr r23
 1709 095c 4091 0000 		lds r20,MDB_USART_TX_READY
 1710 0960 81E0      		ldi r24,lo8(1)
 1711 0962 0E94 0000 		call send_mdb
 1712               	.LVL109:
 652:mdb.c         ****             checksum = (checksum & 0xFF) | 0x100;
 1713               		.loc 1 652 13 view .LVU444
 652:mdb.c         ****             checksum = (checksum & 0xFF) | 0x100;
 1714               		.loc 1 652 47 is_stmt 0 view .LVU445
 1715 0966 8091 0000 		lds r24,session+5
 1716 096a 9091 0000 		lds r25,session+6
 1717               	.LVL110:
 653:mdb.c         ****             send_mdb(MDB_USART, checksum, MDB_USART_TX_READY);
 1718               		.loc 1 653 13 is_stmt 1 view .LVU446
 652:mdb.c         ****             checksum = (checksum & 0xFF) | 0x100;
 1719               		.loc 1 652 60 is_stmt 0 view .LVU447
 1720 096e C92F      		mov r28,r25
 1721 0970 90E0      		ldi r25,0
 1722               	.LVL111:
 652:mdb.c         ****             checksum = (checksum & 0xFF) | 0x100;
 1723               		.loc 1 652 60 view .LVU448
 1724 0972 D92F      		mov r29,r25
 652:mdb.c         ****             checksum = (checksum & 0xFF) | 0x100;
 1725               		.loc 1 652 66 view .LVU449
 1726 0974 BE01      		movw r22,r28
 1727 0976 680F      		add r22,r24
 1728 0978 711D      		adc r23,__zero_reg__
 652:mdb.c         ****             checksum = (checksum & 0xFF) | 0x100;
 1729               		.loc 1 652 22 view .LVU450
 1730 097a 6B5F      		subi r22,-5
 1731 097c 7F4F      		sbci r23,-1
 653:mdb.c         ****             send_mdb(MDB_USART, checksum, MDB_USART_TX_READY);
 1732               		.loc 1 653 34 view .LVU451
 1733 097e 7727      		clr r23
 1734               	.LVL112:
 654:mdb.c         ****             state = 2;
 1735               		.loc 1 654 13 is_stmt 1 view .LVU452
 653:mdb.c         ****             send_mdb(MDB_USART, checksum, MDB_USART_TX_READY);
 1736               		.loc 1 653 22 is_stmt 0 view .LVU453
 1737 0980 7160      		ori r23,1
 1738               	.LVL113:
 654:mdb.c         ****             state = 2;
 1739               		.loc 1 654 13 view .LVU454
 1740 0982 4091 0000 		lds r20,MDB_USART_TX_READY
 1741               	.LVL114:
 1742               	.L72:
 753:mdb.c         ****             state = 2;
 1743               		.loc 1 753 13 view .LVU455
 1744 0986 81E0      		ldi r24,lo8(1)
 1745 0988 0E94 0000 		call send_mdb
 1746               	.LVL115:
 1747 098c 00C0      		rjmp .L71
 1748               	.LVL116:
 1749               	.L46:
 658:mdb.c         ****         {
 1750               		.loc 1 658 14 is_stmt 1 discriminator 1 view .LVU456
 658:mdb.c         ****         {
 1751               		.loc 1 658 47 is_stmt 0 discriminator 1 view .LVU457
 1752 098e 8230      		cpi r24,lo8(2)
 1753 0990 01F0      		breq .+2
 1754 0992 00C0      		rjmp .L24
 662:mdb.c         ****                 return;
 1755               		.loc 1 662 13 is_stmt 1 view .LVU458
 662:mdb.c         ****                 return;
 1756               		.loc 1 662 17 is_stmt 0 view .LVU459
 1757 0994 60E0      		ldi r22,0
 1758 0996 81E0      		ldi r24,lo8(1)
 1759 0998 0E94 0000 		call buffer_level
 1760               	.LVL117:
 662:mdb.c         ****                 return;
 1761               		.loc 1 662 16 view .LVU460
 1762 099c 8230      		cpi r24,lo8(2)
 1763 099e 00F4      		brsh .+2
 1764 09a0 00C0      		rjmp .L24
 665:mdb.c         ****             {
 1765               		.loc 1 665 13 is_stmt 1 view .LVU461
 665:mdb.c         ****             {
 1766               		.loc 1 665 17 is_stmt 0 view .LVU462
 1767 09a2 81E0      		ldi r24,lo8(1)
 1768 09a4 0E94 0000 		call recv_mdb
 1769               	.LVL118:
 665:mdb.c         ****             {
 1770               		.loc 1 665 16 view .LVU463
 1771 09a8 892B      		or r24,r25
 1772 09aa 01F0      		breq .L47
 667:mdb.c         ****                 mdb_poll_reply = MDB_REPLY_ACK;
 1773               		.loc 1 667 17 is_stmt 1 view .LVU464
 667:mdb.c         ****                 mdb_poll_reply = MDB_REPLY_ACK;
 1774               		.loc 1 667 32 is_stmt 0 view .LVU465
 1775 09ac 1092 0000 		sts mdb_active_cmd,__zero_reg__
 668:mdb.c         ****                 session.result.vend_approved = 0;
 1776               		.loc 1 668 17 is_stmt 1 view .LVU466
 668:mdb.c         ****                 session.result.vend_approved = 0;
 1777               		.loc 1 668 32 is_stmt 0 view .LVU467
 1778 09b0 1092 0000 		sts mdb_poll_reply,__zero_reg__
 669:mdb.c         ****                 session.result.vend_amount = 0;
 1779               		.loc 1 669 17 is_stmt 1 view .LVU468
 669:mdb.c         ****                 session.result.vend_amount = 0;
 1780               		.loc 1 669 46 is_stmt 0 view .LVU469
 1781 09b4 1092 0000 		sts session+3,__zero_reg__
 670:mdb.c         ****                 state = 0;
 1782               		.loc 1 670 17 is_stmt 1 view .LVU470
 670:mdb.c         ****                 state = 0;
 1783               		.loc 1 670 44 is_stmt 0 view .LVU471
 1784 09b8 1092 0000 		sts session+5+1,__zero_reg__
 1785 09bc 1092 0000 		sts session+5,__zero_reg__
 671:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [VEND APPROVE]\r\n"));
 1786               		.loc 1 671 17 is_stmt 1 view .LVU472
 671:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [VEND APPROVE]\r\n"));
 1787               		.loc 1 671 23 is_stmt 0 view .LVU473
 1788 09c0 1092 0000 		sts state.28,__zero_reg__
 672:mdb.c         ****                 return;
 1789               		.loc 1 672 17 is_stmt 1 view .LVU474
 1790               	.LBB29:
 672:mdb.c         ****                 return;
 1791               		.loc 1 672 42 view .LVU475
 672:mdb.c         ****                 return;
 1792               		.loc 1 672 42 view .LVU476
 1793               	.LBE29:
 672:mdb.c         ****                 return;
 1794               		.loc 1 672 17 is_stmt 0 view .LVU477
 1795 09c4 60E0      		ldi r22,lo8(__c.19)
 1796 09c6 70E0      		ldi r23,hi8(__c.19)
 1797 09c8 00C0      		rjmp .L73
 1798               	.L47:
 675:mdb.c         ****             session.result.vend_amount = 0;
 1799               		.loc 1 675 13 is_stmt 1 view .LVU478
 675:mdb.c         ****             session.result.vend_amount = 0;
 1800               		.loc 1 675 42 is_stmt 0 view .LVU479
 1801 09ca 1092 0000 		sts session+3,__zero_reg__
 676:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 1802               		.loc 1 676 13 is_stmt 1 view .LVU480
 676:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 1803               		.loc 1 676 40 is_stmt 0 view .LVU481
 1804 09ce 1092 0000 		sts session+5+1,__zero_reg__
 1805 09d2 1092 0000 		sts session+5,__zero_reg__
 677:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 1806               		.loc 1 677 13 is_stmt 1 view .LVU482
 1807 09d6 00C0      		rjmp .L41
 1808               	.L32:
 685:mdb.c         ****         {
 1809               		.loc 1 685 9 view .LVU483
 685:mdb.c         ****         {
 1810               		.loc 1 685 12 is_stmt 0 view .LVU484
 1811 09d8 8091 0000 		lds r24,session+4
 1812 09dc 8823      		tst r24
 1813 09de 01F4      		brne .+2
 1814 09e0 00C0      		rjmp .L24
 685:mdb.c         ****         {
 1815               		.loc 1 685 49 discriminator 1 view .LVU485
 1816 09e2 8091 0000 		lds r24,state.28
 685:mdb.c         ****         {
 1817               		.loc 1 685 40 discriminator 1 view .LVU486
 1818 09e6 8130      		cpi r24,lo8(1)
 1819 09e8 01F4      		brne .L48
 687:mdb.c         ****             send_mdb(MDB_USART, 0x106, MDB_USART_TX_READY);
 1820               		.loc 1 687 13 is_stmt 1 view .LVU487
 1821 09ea 4091 0000 		lds r20,MDB_USART_TX_READY
 1822 09ee 66E0      		ldi r22,lo8(6)
 1823 09f0 70E0      		ldi r23,0
 1824 09f2 0E94 0000 		call send_mdb
 1825               	.LVL119:
 688:mdb.c         ****             state = 2;
 1826               		.loc 1 688 13 view .LVU488
 1827 09f6 4091 0000 		lds r20,MDB_USART_TX_READY
 1828 09fa 66E0      		ldi r22,lo8(6)
 1829 09fc 71E0      		ldi r23,lo8(1)
 1830 09fe 00C0      		rjmp .L72
 1831               	.L48:
 692:mdb.c         ****         {
 1832               		.loc 1 692 14 discriminator 1 view .LVU489
 692:mdb.c         ****         {
 1833               		.loc 1 692 45 is_stmt 0 discriminator 1 view .LVU490
 1834 0a00 8230      		cpi r24,lo8(2)
 1835 0a02 01F0      		breq .+2
 1836 0a04 00C0      		rjmp .L24
 696:mdb.c         ****                 return;
 1837               		.loc 1 696 13 is_stmt 1 view .LVU491
 696:mdb.c         ****                 return;
 1838               		.loc 1 696 17 is_stmt 0 view .LVU492
 1839 0a06 60E0      		ldi r22,0
 1840 0a08 81E0      		ldi r24,lo8(1)
 1841 0a0a 0E94 0000 		call buffer_level
 1842               	.LVL120:
 696:mdb.c         ****                 return;
 1843               		.loc 1 696 16 view .LVU493
 1844 0a0e 8230      		cpi r24,lo8(2)
 1845 0a10 00F4      		brsh .+2
 1846 0a12 00C0      		rjmp .L24
 699:mdb.c         ****             {
 1847               		.loc 1 699 13 is_stmt 1 view .LVU494
 699:mdb.c         ****             {
 1848               		.loc 1 699 17 is_stmt 0 view .LVU495
 1849 0a14 81E0      		ldi r24,lo8(1)
 1850 0a16 0E94 0000 		call recv_mdb
 1851               	.LVL121:
 699:mdb.c         ****             {
 1852               		.loc 1 699 16 view .LVU496
 1853 0a1a 892B      		or r24,r25
 1854 0a1c 01F0      		breq .L49
 701:mdb.c         ****                 mdb_poll_reply = MDB_REPLY_ACK;
 1855               		.loc 1 701 17 is_stmt 1 view .LVU497
 701:mdb.c         ****                 mdb_poll_reply = MDB_REPLY_ACK;
 1856               		.loc 1 701 32 is_stmt 0 view .LVU498
 1857 0a1e 1092 0000 		sts mdb_active_cmd,__zero_reg__
 702:mdb.c         ****                 session.start.flag = 0;
 1858               		.loc 1 702 17 is_stmt 1 view .LVU499
 702:mdb.c         ****                 session.start.flag = 0;
 1859               		.loc 1 702 32 is_stmt 0 view .LVU500
 1860 0a22 1092 0000 		sts mdb_poll_reply,__zero_reg__
 703:mdb.c         ****                 session.start.funds = 0;
 1861               		.loc 1 703 17 is_stmt 1 view .LVU501
 703:mdb.c         ****                 session.start.funds = 0;
 1862               		.loc 1 703 36 is_stmt 0 view .LVU502
 1863 0a26 1092 0000 		sts session,__zero_reg__
 704:mdb.c         ****                 session.result.vend_denied = 0;
 1864               		.loc 1 704 17 is_stmt 1 view .LVU503
 704:mdb.c         ****                 session.result.vend_denied = 0;
 1865               		.loc 1 704 37 is_stmt 0 view .LVU504
 1866 0a2a 1092 0000 		sts session+1+1,__zero_reg__
 1867 0a2e 1092 0000 		sts session+1,__zero_reg__
 705:mdb.c         ****                 state = 0;
 1868               		.loc 1 705 17 is_stmt 1 view .LVU505
 705:mdb.c         ****                 state = 0;
 1869               		.loc 1 705 44 is_stmt 0 view .LVU506
 1870 0a32 1092 0000 		sts session+4,__zero_reg__
 706:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [VEND DENY]\r\n"));
 1871               		.loc 1 706 17 is_stmt 1 view .LVU507
 706:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [VEND DENY]\r\n"));
 1872               		.loc 1 706 23 is_stmt 0 view .LVU508
 1873 0a36 1092 0000 		sts state.28,__zero_reg__
 707:mdb.c         ****                 return;
 1874               		.loc 1 707 17 is_stmt 1 view .LVU509
 1875               	.LBB30:
 707:mdb.c         ****                 return;
 1876               		.loc 1 707 42 view .LVU510
 707:mdb.c         ****                 return;
 1877               		.loc 1 707 42 view .LVU511
 1878               	.LBE30:
 707:mdb.c         ****                 return;
 1879               		.loc 1 707 17 is_stmt 0 view .LVU512
 1880 0a3a 60E0      		ldi r22,lo8(__c.18)
 1881 0a3c 70E0      		ldi r23,hi8(__c.18)
 1882 0a3e 00C0      		rjmp .L73
 1883               	.L49:
 710:mdb.c         ****             session.start.funds = 0;
 1884               		.loc 1 710 13 is_stmt 1 view .LVU513
 710:mdb.c         ****             session.start.funds = 0;
 1885               		.loc 1 710 32 is_stmt 0 view .LVU514
 1886 0a40 1092 0000 		sts session,__zero_reg__
 711:mdb.c         ****             session.result.vend_denied = 0;
 1887               		.loc 1 711 13 is_stmt 1 view .LVU515
 711:mdb.c         ****             session.result.vend_denied = 0;
 1888               		.loc 1 711 33 is_stmt 0 view .LVU516
 1889 0a44 1092 0000 		sts session+1+1,__zero_reg__
 1890 0a48 1092 0000 		sts session+1,__zero_reg__
 712:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 1891               		.loc 1 712 13 is_stmt 1 view .LVU517
 712:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 1892               		.loc 1 712 40 is_stmt 0 view .LVU518
 1893 0a4c 1092 0000 		sts session+4,__zero_reg__
 713:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 1894               		.loc 1 713 13 is_stmt 1 view .LVU519
 1895 0a50 00C0      		rjmp .L41
 1896               	.L31:
 721:mdb.c         ****         {
 1897               		.loc 1 721 9 view .LVU520
 721:mdb.c         ****         {
 1898               		.loc 1 721 19 is_stmt 0 view .LVU521
 1899 0a52 8091 0000 		lds r24,state.28
 721:mdb.c         ****         {
 1900               		.loc 1 721 12 view .LVU522
 1901 0a56 8130      		cpi r24,lo8(1)
 1902 0a58 01F4      		brne .L50
 723:mdb.c         ****             send_mdb(MDB_USART, 0x107, MDB_USART_TX_READY);
 1903               		.loc 1 723 13 is_stmt 1 view .LVU523
 1904 0a5a 4091 0000 		lds r20,MDB_USART_TX_READY
 1905 0a5e 67E0      		ldi r22,lo8(7)
 1906 0a60 70E0      		ldi r23,0
 1907 0a62 0E94 0000 		call send_mdb
 1908               	.LVL122:
 724:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("EndSession00\r\n"));
 1909               		.loc 1 724 13 view .LVU524
 1910 0a66 4091 0000 		lds r20,MDB_USART_TX_READY
 1911 0a6a 67E0      		ldi r22,lo8(7)
 1912 0a6c 71E0      		ldi r23,lo8(1)
 1913 0a6e 81E0      		ldi r24,lo8(1)
 1914 0a70 0E94 0000 		call send_mdb
 1915               	.LVL123:
 725:mdb.c         ****             state = 2;
 1916               		.loc 1 725 13 view .LVU525
 1917               	.LBB31:
 725:mdb.c         ****             state = 2;
 1918               		.loc 1 725 38 view .LVU526
 725:mdb.c         ****             state = 2;
 1919               		.loc 1 725 38 view .LVU527
 1920               	.LBE31:
 725:mdb.c         ****             state = 2;
 1921               		.loc 1 725 13 is_stmt 0 view .LVU528
 1922 0a74 60E0      		ldi r22,lo8(__c.17)
 1923 0a76 70E0      		ldi r23,hi8(__c.17)
 1924 0a78 00C0      		rjmp .L74
 1925               	.L50:
 728:mdb.c         ****         {
 1926               		.loc 1 728 14 is_stmt 1 view .LVU529
 728:mdb.c         ****         {
 1927               		.loc 1 728 17 is_stmt 0 view .LVU530
 1928 0a7a 8230      		cpi r24,lo8(2)
 1929 0a7c 01F0      		breq .+2
 1930 0a7e 00C0      		rjmp .L24
 731:mdb.c         ****                 return;
 1931               		.loc 1 731 13 is_stmt 1 view .LVU531
 731:mdb.c         ****                 return;
 1932               		.loc 1 731 17 is_stmt 0 view .LVU532
 1933 0a80 60E0      		ldi r22,0
 1934 0a82 81E0      		ldi r24,lo8(1)
 1935 0a84 0E94 0000 		call buffer_level
 1936               	.LVL124:
 731:mdb.c         ****                 return;
 1937               		.loc 1 731 16 view .LVU533
 1938 0a88 8230      		cpi r24,lo8(2)
 1939 0a8a 00F4      		brsh .+2
 1940 0a8c 00C0      		rjmp .L24
 734:mdb.c         ****             {
 1941               		.loc 1 734 13 is_stmt 1 view .LVU534
 734:mdb.c         ****             {
 1942               		.loc 1 734 17 is_stmt 0 view .LVU535
 1943 0a8e 81E0      		ldi r24,lo8(1)
 1944 0a90 0E94 0000 		call recv_mdb
 1945               	.LVL125:
 734:mdb.c         ****             {
 1946               		.loc 1 734 16 view .LVU536
 1947 0a94 892B      		or r24,r25
 1948 0a96 01F4      		brne .+2
 1949 0a98 00C0      		rjmp .L41
 736:mdb.c         ****                 mdb_poll_reply = MDB_REPLY_ACK;
 1950               		.loc 1 736 17 is_stmt 1 view .LVU537
 736:mdb.c         ****                 mdb_poll_reply = MDB_REPLY_ACK;
 1951               		.loc 1 736 32 is_stmt 0 view .LVU538
 1952 0a9a 1092 0000 		sts mdb_active_cmd,__zero_reg__
 737:mdb.c         ****                 state = 0;
 1953               		.loc 1 737 17 is_stmt 1 view .LVU539
 737:mdb.c         ****                 state = 0;
 1954               		.loc 1 737 32 is_stmt 0 view .LVU540
 1955 0a9e 1092 0000 		sts mdb_poll_reply,__zero_reg__
 738:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [END SESSION]\r\n"));
 1956               		.loc 1 738 17 is_stmt 1 view .LVU541
 738:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [END SESSION]\r\n"));
 1957               		.loc 1 738 23 is_stmt 0 view .LVU542
 1958 0aa2 1092 0000 		sts state.28,__zero_reg__
 739:mdb.c         ****                 return;
 1959               		.loc 1 739 17 is_stmt 1 view .LVU543
 1960               	.LBB32:
 739:mdb.c         ****                 return;
 1961               		.loc 1 739 42 view .LVU544
 739:mdb.c         ****                 return;
 1962               		.loc 1 739 42 view .LVU545
 1963               	.LBE32:
 739:mdb.c         ****                 return;
 1964               		.loc 1 739 17 is_stmt 0 view .LVU546
 1965 0aa6 60E0      		ldi r22,lo8(__c.16)
 1966 0aa8 70E0      		ldi r23,hi8(__c.16)
 1967 0aaa 00C0      		rjmp .L73
 1968               	.L29:
 750:mdb.c         ****         {
 1969               		.loc 1 750 9 is_stmt 1 view .LVU547
 750:mdb.c         ****         {
 1970               		.loc 1 750 19 is_stmt 0 view .LVU548
 1971 0aac 8091 0000 		lds r24,state.28
 750:mdb.c         ****         {
 1972               		.loc 1 750 12 view .LVU549
 1973 0ab0 8130      		cpi r24,lo8(1)
 1974 0ab2 01F4      		brne .L51
 752:mdb.c         ****             send_mdb(MDB_USART, 0x108, MDB_USART_TX_READY);
 1975               		.loc 1 752 13 is_stmt 1 view .LVU550
 1976 0ab4 4091 0000 		lds r20,MDB_USART_TX_READY
 1977 0ab8 68E0      		ldi r22,lo8(8)
 1978 0aba 70E0      		ldi r23,0
 1979 0abc 0E94 0000 		call send_mdb
 1980               	.LVL126:
 753:mdb.c         ****             state = 2;
 1981               		.loc 1 753 13 view .LVU551
 1982 0ac0 4091 0000 		lds r20,MDB_USART_TX_READY
 1983 0ac4 68E0      		ldi r22,lo8(8)
 1984 0ac6 71E0      		ldi r23,lo8(1)
 1985 0ac8 00C0      		rjmp .L72
 1986               	.L51:
 757:mdb.c         ****         {
 1987               		.loc 1 757 14 view .LVU552
 757:mdb.c         ****         {
 1988               		.loc 1 757 17 is_stmt 0 view .LVU553
 1989 0aca 8230      		cpi r24,lo8(2)
 1990 0acc 01F0      		breq .+2
 1991 0ace 00C0      		rjmp .L24
 760:mdb.c         ****                 return;
 1992               		.loc 1 760 13 is_stmt 1 view .LVU554
 760:mdb.c         ****                 return;
 1993               		.loc 1 760 17 is_stmt 0 view .LVU555
 1994 0ad0 60E0      		ldi r22,0
 1995 0ad2 81E0      		ldi r24,lo8(1)
 1996 0ad4 0E94 0000 		call buffer_level
 1997               	.LVL127:
 760:mdb.c         ****                 return;
 1998               		.loc 1 760 16 view .LVU556
 1999 0ad8 8230      		cpi r24,lo8(2)
 2000 0ada 00F4      		brsh .+2
 2001 0adc 00C0      		rjmp .L24
 763:mdb.c         ****             {
 2002               		.loc 1 763 13 is_stmt 1 view .LVU557
 763:mdb.c         ****             {
 2003               		.loc 1 763 17 is_stmt 0 view .LVU558
 2004 0ade 81E0      		ldi r24,lo8(1)
 2005 0ae0 0E94 0000 		call recv_mdb
 2006               	.LVL128:
 763:mdb.c         ****             {
 2007               		.loc 1 763 16 view .LVU559
 2008 0ae4 892B      		or r24,r25
 2009 0ae6 01F4      		brne .+2
 2010 0ae8 00C0      		rjmp .L41
 765:mdb.c         ****                 mdb_poll_reply = MDB_REPLY_ACK;
 2011               		.loc 1 765 17 is_stmt 1 view .LVU560
 765:mdb.c         ****                 mdb_poll_reply = MDB_REPLY_ACK;
 2012               		.loc 1 765 32 is_stmt 0 view .LVU561
 2013 0aea 1092 0000 		sts mdb_active_cmd,__zero_reg__
 766:mdb.c         ****                 state = 0;
 2014               		.loc 1 766 17 is_stmt 1 view .LVU562
 766:mdb.c         ****                 state = 0;
 2015               		.loc 1 766 32 is_stmt 0 view .LVU563
 2016 0aee 1092 0000 		sts mdb_poll_reply,__zero_reg__
 767:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [REPLY CANCELED]\r\n"));
 2017               		.loc 1 767 17 is_stmt 1 view .LVU564
 767:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [REPLY CANCELED]\r\n"));
 2018               		.loc 1 767 23 is_stmt 0 view .LVU565
 2019 0af2 1092 0000 		sts state.28,__zero_reg__
 768:mdb.c         ****                 return;
 2020               		.loc 1 768 17 is_stmt 1 view .LVU566
 2021               	.LBB33:
 768:mdb.c         ****                 return;
 2022               		.loc 1 768 42 view .LVU567
 768:mdb.c         ****                 return;
 2023               		.loc 1 768 42 view .LVU568
 2024               	.LBE33:
 768:mdb.c         ****                 return;
 2025               		.loc 1 768 17 is_stmt 0 view .LVU569
 2026 0af6 60E0      		ldi r22,lo8(__c.15)
 2027 0af8 70E0      		ldi r23,hi8(__c.15)
 2028 0afa 00C0      		rjmp .L73
 2029               		.cfi_endproc
 2030               	.LFE11:
 2032               		.section	.rodata.str1.1
 2033               	.LC4:
 2034 0070 4076 656E 		.string	"@vend-request %d;%d;%d;%d;%d*\r\n"
 2034      642D 7265 
 2034      7175 6573 
 2034      7420 2564 
 2034      3B25 643B 
 2035               	.LC5:
 2036 0090 7665 6E64 		.string	"vend-success %d\r\n"
 2036      2D73 7563 
 2036      6365 7373 
 2036      2025 640D 
 2036      0A00 
 2037               		.text
 2038               	.global	mdb_vend
 2040               	mdb_vend:
 2041               	.LFB12:
 791:mdb.c         **** 
 792:mdb.c         **** void mdb_vend(void)
 793:mdb.c         **** {
 2042               		.loc 1 793 1 is_stmt 1 view -0
 2043               		.cfi_startproc
 2044 0afc EF92      		push r14
 2045               	.LCFI28:
 2046               		.cfi_def_cfa_offset 4
 2047               		.cfi_offset 14, -3
 2048 0afe FF92      		push r15
 2049               	.LCFI29:
 2050               		.cfi_def_cfa_offset 5
 2051               		.cfi_offset 15, -4
 2052 0b00 0F93      		push r16
 2053               	.LCFI30:
 2054               		.cfi_def_cfa_offset 6
 2055               		.cfi_offset 16, -5
 2056 0b02 1F93      		push r17
 2057               	.LCFI31:
 2058               		.cfi_def_cfa_offset 7
 2059               		.cfi_offset 17, -6
 2060 0b04 CF93      		push r28
 2061               	.LCFI32:
 2062               		.cfi_def_cfa_offset 8
 2063               		.cfi_offset 28, -7
 2064 0b06 DF93      		push r29
 2065               	.LCFI33:
 2066               		.cfi_def_cfa_offset 9
 2067               		.cfi_offset 29, -8
 2068 0b08 CDB7      		in r28,__SP_L__
 2069 0b0a DEB7      		in r29,__SP_H__
 2070               	.LCFI34:
 2071               		.cfi_def_cfa_register 28
 2072 0b0c A897      		sbiw r28,40
 2073               	.LCFI35:
 2074               		.cfi_def_cfa_offset 49
 2075 0b0e 0FB6      		in __tmp_reg__,__SREG__
 2076 0b10 F894      		cli
 2077 0b12 DEBF      		out __SP_H__,r29
 2078 0b14 0FBE      		out __SREG__,__tmp_reg__
 2079 0b16 CDBF      		out __SP_L__,r28
 2080               	/* prologue: function */
 2081               	/* frame size = 40 */
 2082               	/* stack size = 46 */
 2083               	.L__stack_usage = 46
 794:mdb.c         **** 
 795:mdb.c         ****     static uint8_t data[6] = {0, 0, 0, 0, 0, 0};
 2084               		.loc 1 795 5 view .LVU571
 796:mdb.c         ****     static uint8_t state = 0;
 2085               		.loc 1 796 5 view .LVU572
 797:mdb.c         ****     uint8_t checksum = MDB_VEND;
 2086               		.loc 1 797 5 view .LVU573
 2087               	.LVL129:
 798:mdb.c         ****     char buffer[40];
 2088               		.loc 1 798 5 view .LVU574
 799:mdb.c         ****     send_str_p(UPLINK_USART, PSTR("MDB-VEND00\r\n"));
 2089               		.loc 1 799 5 view .LVU575
 2090               	.LBB34:
 2091               		.loc 1 799 30 view .LVU576
 2092               		.loc 1 799 30 view .LVU577
 2093               	.LBE34:
 2094               		.loc 1 799 5 is_stmt 0 view .LVU578
 2095 0b18 60E0      		ldi r22,lo8(__c.14)
 2096 0b1a 70E0      		ldi r23,hi8(__c.14)
 2097 0b1c 80E0      		ldi r24,0
 2098 0b1e 0E94 0000 		call send_str_p
 2099               	.LVL130:
 800:mdb.c         ****     // wait for the subcommand
 801:mdb.c         ****     if (state == 0)
 2100               		.loc 1 801 5 is_stmt 1 view .LVU579
 2101               		.loc 1 801 8 is_stmt 0 view .LVU580
 2102 0b22 8091 0000 		lds r24,state.13
 2103 0b26 8111      		cpse r24,__zero_reg__
 2104 0b28 00C0      		rjmp .L76
 802:mdb.c         ****     {
 803:mdb.c         ****         // wait for enough data in buffer
 804:mdb.c         ****         if (buffer_level(MDB_USART, RX) < 2)
 2105               		.loc 1 804 9 is_stmt 1 view .LVU581
 2106               		.loc 1 804 13 is_stmt 0 view .LVU582
 2107 0b2a 60E0      		ldi r22,0
 2108 0b2c 81E0      		ldi r24,lo8(1)
 2109 0b2e 0E94 0000 		call buffer_level
 2110               	.LVL131:
 2111               		.loc 1 804 12 view .LVU583
 2112 0b32 8230      		cpi r24,lo8(2)
 2113 0b34 00F4      		brsh .+2
 2114 0b36 00C0      		rjmp .L75
 805:mdb.c         ****             return;
 806:mdb.c         **** 
 807:mdb.c         ****         // fetch the subommand from Buffer
 808:mdb.c         ****         data[0] = recv_mdb(MDB_USART);
 2115               		.loc 1 808 9 is_stmt 1 view .LVU584
 2116               		.loc 1 808 19 is_stmt 0 view .LVU585
 2117 0b38 81E0      		ldi r24,lo8(1)
 2118 0b3a 0E94 0000 		call recv_mdb
 2119               	.LVL132:
 2120               		.loc 1 808 17 view .LVU586
 2121 0b3e 8093 0000 		sts data.12,r24
 809:mdb.c         ****         state = 1;
 2122               		.loc 1 809 9 is_stmt 1 view .LVU587
 2123               		.loc 1 809 15 is_stmt 0 view .LVU588
 2124 0b42 81E0      		ldi r24,lo8(1)
 2125 0b44 8093 0000 		sts state.13,r24
 2126               	.L76:
 810:mdb.c         ****     }
 811:mdb.c         **** 
 812:mdb.c         ****     // switch through subcommands
 813:mdb.c         ****     switch (data[0])
 2127               		.loc 1 813 5 is_stmt 1 view .LVU589
 2128               		.loc 1 813 17 is_stmt 0 view .LVU590
 2129 0b48 8091 0000 		lds r24,data.12
 2130               		.loc 1 813 5 view .LVU591
 2131 0b4c 8230      		cpi r24,lo8(2)
 2132 0b4e 01F4      		brne .+2
 2133 0b50 00C0      		rjmp .L78
 2134 0b52 00F0      		brlo .+2
 2135 0b54 00C0      		rjmp .L79
 2136 0b56 8111      		cpse r24,__zero_reg__
 2137 0b58 00C0      		rjmp .L93
 814:mdb.c         ****     {
 815:mdb.c         ****     // vend request
 816:mdb.c         ****     case 0:
 817:mdb.c         ****         // wait for enough data in buffer
 818:mdb.c         ****         if (buffer_level(MDB_USART, RX) < 10)
 2138               		.loc 1 818 9 is_stmt 1 view .LVU592
 2139               		.loc 1 818 13 is_stmt 0 view .LVU593
 2140 0b5a 60E0      		ldi r22,0
 2141 0b5c 81E0      		ldi r24,lo8(1)
 2142 0b5e 0E94 0000 		call buffer_level
 2143               	.LVL133:
 2144               		.loc 1 818 12 view .LVU594
 2145 0b62 8A30      		cpi r24,lo8(10)
 2146 0b64 00F4      		brsh .+2
 2147 0b66 00C0      		rjmp .L75
 2148 0b68 00E0      		ldi r16,lo8(data.12+1)
 2149 0b6a 10E0      		ldi r17,hi8(data.12+1)
 2150 0b6c 80E0      		ldi r24,lo8(data.12+6)
 2151 0b6e E82E      		mov r14,r24
 2152 0b70 80E0      		ldi r24,hi8(data.12+6)
 2153 0b72 F82E      		mov r15,r24
 2154               	.L85:
 2155               	.LVL134:
 2156               	.LBB35:
 819:mdb.c         ****             return;
 820:mdb.c         **** 
 821:mdb.c         **** #if DEBUG == 1
 822:mdb.c         ****         send_str_p(UPLINK_USART, PSTR("VEND REQUEST\r\n"));
 823:mdb.c         **** #endif
 824:mdb.c         **** 
 825:mdb.c         ****         // fetch the data from buffer
 826:mdb.c         ****         for (uint8_t i = 1; i < 6; i++)
 827:mdb.c         ****         {
 828:mdb.c         ****             data[i] = (uint8_t)recv_mdb(MDB_USART);
 2157               		.loc 1 828 13 is_stmt 1 discriminator 3 view .LVU595
 2158               		.loc 1 828 32 is_stmt 0 discriminator 3 view .LVU596
 2159 0b74 81E0      		ldi r24,lo8(1)
 2160 0b76 0E94 0000 		call recv_mdb
 2161               	.LVL135:
 2162               		.loc 1 828 23 discriminator 3 view .LVU597
 2163 0b7a F801      		movw r30,r16
 2164 0b7c 8193      		st Z+,r24
 2165 0b7e 8F01      		movw r16,r30
 2166               	.LVL136:
 826:mdb.c         ****         {
 2167               		.loc 1 826 37 is_stmt 1 discriminator 3 view .LVU598
 826:mdb.c         ****         {
 2168               		.loc 1 826 31 discriminator 3 view .LVU599
 2169 0b80 EE16      		cp r14,r30
 2170 0b82 FF06      		cpc r15,r31
 2171 0b84 01F4      		brne .L85
 2172               	.LBE35:
 829:mdb.c         ****         }
 830:mdb.c         **** 
 831:mdb.c         ****         // calculate checksum
 832:mdb.c         ****         checksum += data[0] + data[1] + data[2] + data[3] + data[4];
 2173               		.loc 1 832 9 view .LVU600
 2174               		.loc 1 832 35 is_stmt 0 view .LVU601
 2175 0b86 9091 0000 		lds r25,data.12+1
 2176               		.loc 1 832 45 view .LVU602
 2177 0b8a 2091 0000 		lds r18,data.12+2
 2178               		.loc 1 832 55 view .LVU603
 2179 0b8e 3091 0000 		lds r19,data.12+3
 2180               		.loc 1 832 65 view .LVU604
 2181 0b92 4091 0000 		lds r20,data.12+4
 2182               	.LVL137:
 833:mdb.c         ****         checksum &= 0xFF;
 2183               		.loc 1 833 9 is_stmt 1 view .LVU605
 834:mdb.c         **** 
 835:mdb.c         ****         // validate checksum
 836:mdb.c         ****         if (checksum != data[5])
 2184               		.loc 1 836 9 view .LVU606
 2185               		.loc 1 836 29 is_stmt 0 view .LVU607
 2186 0b96 5091 0000 		lds r21,data.12+5
 832:mdb.c         ****         checksum &= 0xFF;
 2187               		.loc 1 832 29 view .LVU608
 2188 0b9a 8091 0000 		lds r24,data.12
 2189 0b9e 890F      		add r24,r25
 2190               	.LVL138:
 832:mdb.c         ****         checksum &= 0xFF;
 2191               		.loc 1 832 18 view .LVU609
 2192 0ba0 8D5E      		subi r24,lo8(-(19))
 2193               	.LVL139:
 832:mdb.c         ****         checksum &= 0xFF;
 2194               		.loc 1 832 18 view .LVU610
 2195 0ba2 820F      		add r24,r18
 2196               	.LVL140:
 832:mdb.c         ****         checksum &= 0xFF;
 2197               		.loc 1 832 18 view .LVU611
 2198 0ba4 830F      		add r24,r19
 2199 0ba6 840F      		add r24,r20
 2200               		.loc 1 836 12 view .LVU612
 2201 0ba8 5817      		cp r21,r24
 2202 0baa 01F0      		breq .L86
 837:mdb.c         ****         {
 838:mdb.c         ****             state = 0;
 2203               		.loc 1 838 13 is_stmt 1 view .LVU613
 2204               		.loc 1 838 19 is_stmt 0 view .LVU614
 2205 0bac 1092 0000 		sts state.13,__zero_reg__
 839:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 2206               		.loc 1 839 13 is_stmt 1 view .LVU615
 2207               		.loc 1 839 28 is_stmt 0 view .LVU616
 2208 0bb0 1092 0000 		sts mdb_active_cmd,__zero_reg__
 840:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 2209               		.loc 1 840 13 is_stmt 1 view .LVU617
 2210               		.loc 1 840 28 is_stmt 0 view .LVU618
 2211 0bb4 1092 0000 		sts mdb_poll_reply,__zero_reg__
 841:mdb.c         ****             checksum = MDB_VEND;
 2212               		.loc 1 841 13 is_stmt 1 view .LVU619
 2213               	.LVL141:
 842:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("Error: invalid checksum [VEND]\r\n"));
 2214               		.loc 1 842 13 view .LVU620
 2215               	.LBB36:
 2216               		.loc 1 842 38 view .LVU621
 2217               		.loc 1 842 38 view .LVU622
 2218               	.LBE36:
 2219               		.loc 1 842 13 is_stmt 0 view .LVU623
 2220 0bb8 60E0      		ldi r22,lo8(__c.11)
 2221 0bba 70E0      		ldi r23,hi8(__c.11)
 2222               	.LVL142:
 2223               	.L95:
 843:mdb.c         ****             return;
 844:mdb.c         ****         }
 845:mdb.c         **** 
 846:mdb.c         ****         sprintf(buffer, "@vend-request %d;%d;%d;%d;%d*\r\n", data[1], data[2], data[3], data[4], da
 847:mdb.c         ****         send_str(UPLINK_USART, buffer);
 848:mdb.c         ****         send_str(UPLINK_USART, buffer);
 849:mdb.c         **** 
 850:mdb.c         ****         // send ACK
 851:mdb.c         ****         send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY);
 852:mdb.c         ****         state = 0;
 853:mdb.c         ****         mdb_state = MDB_VENDING;
 854:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 855:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 856:mdb.c         ****         return;
 857:mdb.c         ****         break;
 858:mdb.c         **** 
 859:mdb.c         ****     // vend cancel
 860:mdb.c         ****     case 1:
 861:mdb.c         ****         // wait for enough data in buffer
 862:mdb.c         ****         if (buffer_level(MDB_USART, RX) < 2)
 863:mdb.c         ****             return;
 864:mdb.c         **** 
 865:mdb.c         **** #if DEBUG == 1
 866:mdb.c         ****         send_str_p(UPLINK_USART, PSTR("VEND Cancel\r\n"));
 867:mdb.c         **** #endif
 868:mdb.c         **** 
 869:mdb.c         ****         //play(1);
 870:mdb.c         **** 
 871:mdb.c         ****         // fetch the data from buffer
 872:mdb.c         ****         data[1] = (uint8_t)recv_mdb(MDB_USART);
 873:mdb.c         **** 
 874:mdb.c         ****         // calculate checksum
 875:mdb.c         ****         checksum += data[0];
 876:mdb.c         ****         checksum &= 0xFF;
 877:mdb.c         **** 
 878:mdb.c         ****         vendStateT = 2; //newly added
 879:mdb.c         ****         //saveVendState(vendStateT);
 880:mdb.c         **** 
 881:mdb.c         ****         // validate checksum
 882:mdb.c         ****         if (checksum != data[1])
 883:mdb.c         ****         {
 884:mdb.c         ****             state = 0;
 885:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 886:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 887:mdb.c         ****             checksum = MDB_VEND;
 888:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("Error: invalid checksum [VEND]\r\n"));
 889:mdb.c         ****             return;
 890:mdb.c         ****         }
 891:mdb.c         **** 
 892:mdb.c         ****         send_str_p(UPLINK_USART, PSTR("vend-cancel\r\n"));
 893:mdb.c         **** 
 894:mdb.c         ****         // send ACK
 895:mdb.c         ****         send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY);
 896:mdb.c         ****         state = 0;
 897:mdb.c         ****         mdb_state = MDB_SESSION_IDLE;
 898:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 899:mdb.c         ****         mdb_poll_reply = MDB_REPLY_VEND_DENIED;
 900:mdb.c         ****         RESET(); //NOT IN ORG
 901:mdb.c         ****         return;
 902:mdb.c         ****         break;
 903:mdb.c         **** 
 904:mdb.c         ****     // vend success
 905:mdb.c         ****     case 2:
 906:mdb.c         ****         // wait for enough data in buffer
 907:mdb.c         ****         if (buffer_level(MDB_USART, RX) < 6)
 908:mdb.c         ****             return;
 909:mdb.c         ****         vendStateT = 1;
 910:mdb.c         ****         /*  vendStateT=1;//newly added 
 911:mdb.c         ****             //saveVendState(vendStateT); */
 912:mdb.c         ****         // play(3);
 913:mdb.c         **** #if DEBUG == 1
 914:mdb.c         ****         send_str_p(UPLINK_USART, PSTR("VEND SUCCESS\r\n"));
 915:mdb.c         **** #endif
 916:mdb.c         **** 
 917:mdb.c         ****         // fetch the data from buffer
 918:mdb.c         ****         for (uint8_t i = 1; i < 4; i++)
 919:mdb.c         ****         {
 920:mdb.c         ****             data[i] = (uint8_t)recv_mdb(MDB_USART);
 921:mdb.c         ****         }
 922:mdb.c         **** 
 923:mdb.c         ****         // calculate checksum
 924:mdb.c         ****         checksum += data[0] + data[1] + data[2];
 925:mdb.c         ****         checksum &= 0xFF;
 926:mdb.c         **** 
 927:mdb.c         ****         // validate checksum
 928:mdb.c         ****         if (checksum != data[3])
 929:mdb.c         ****         {
 930:mdb.c         ****             state = 0;
 931:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 932:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 933:mdb.c         ****             checksum = MDB_VEND;
 934:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("Error: invalid checksum [VEND]\r\n"));
 935:mdb.c         ****             return;
 936:mdb.c         ****         }
 937:mdb.c         **** 
 938:mdb.c         ****         vendStateT = 1; //newly added
 939:mdb.c         ****         ////saveVendState(vendStateT);
 940:mdb.c         **** 
 941:mdb.c         ****         sprintf(buffer, "vend-success %d\r\n", (data[1] + data[2]));
 942:mdb.c         ****         send_str(0, buffer);
 943:mdb.c         **** 
 944:mdb.c         ****         // send ACK
 945:mdb.c         ****         send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY);
 946:mdb.c         ****         state = 0;
 947:mdb.c         ****         mdb_state = MDB_SESSION_IDLE;
 948:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 949:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 950:mdb.c         **** 
 951:mdb.c         ****         //RESET();///////////////////++Added
 952:mdb.c         ****         vendStateT = 1;
 953:mdb.c         **** 
 954:mdb.c         ****         return;
 955:mdb.c         ****         break;
 956:mdb.c         **** 
 957:mdb.c         ****     // vend failure
 958:mdb.c         ****     case 3:
 959:mdb.c         ****         // wait for enough data in buffer
 960:mdb.c         ****         if (buffer_level(MDB_USART, RX) < 2)
 961:mdb.c         ****             return;
 962:mdb.c         **** 
 963:mdb.c         **** #if DEBUG == 1
 964:mdb.c         ****         send_str_p(UPLINK_USART, PSTR("VEND FAILURE\r\n"));
 965:mdb.c         **** #endif
 966:mdb.c         **** 
 967:mdb.c         ****         // play(4);
 968:mdb.c         **** 
 969:mdb.c         ****         // fetch the data from buffer
 970:mdb.c         ****         data[1] = (uint8_t)recv_mdb(MDB_USART);
 971:mdb.c         **** 
 972:mdb.c         ****         // calculate checksum
 973:mdb.c         ****         checksum += data[0];
 974:mdb.c         ****         checksum &= 0xFF;
 975:mdb.c         **** 
 976:mdb.c         ****         // validate checksum
 977:mdb.c         ****         if (checksum != data[1])
 978:mdb.c         ****         {
 979:mdb.c         ****             state = 0;
 980:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 981:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 982:mdb.c         ****             checksum = MDB_VEND;
 983:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("Error: invalid checksum [VEND]\r\n"));
 984:mdb.c         ****             return;
 985:mdb.c         ****         }
 986:mdb.c         **** 
 987:mdb.c         ****         send_str_p(UPLINK_USART, PSTR("vend-failure\r\n"));
 988:mdb.c         **** 
 989:mdb.c         ****         vendStateT = 2;
 990:mdb.c         ****         //saveVendState(vendStateT);
 991:mdb.c         **** 
 992:mdb.c         ****         // send ACK
 993:mdb.c         ****         send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY);
 994:mdb.c         ****         state = 0;
 995:mdb.c         ****         mdb_state = MDB_ENABLED;
 996:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 997:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 998:mdb.c         ****         RESET(); //NOT IN ORG
 999:mdb.c         ****         return;
1000:mdb.c         ****         break;
1001:mdb.c         **** 
1002:mdb.c         ****     // session complete
1003:mdb.c         ****     case 4:
1004:mdb.c         ****         // wait for enough data in buffer
1005:mdb.c         ****         if (buffer_level(MDB_USART, RX) < 2)
1006:mdb.c         ****             return;
1007:mdb.c         **** 
1008:mdb.c         **** #if DEBUG == 1
1009:mdb.c         ****         send_str_p(UPLINK_USART, PSTR("VEND SESSION COMPLETE\r\n"));
1010:mdb.c         **** #endif
1011:mdb.c         **** 
1012:mdb.c         ****         vendStateT = 1;
1013:mdb.c         ****         //saveVendState(vendStateT);
1014:mdb.c         **** 
1015:mdb.c         ****         // fetch the data from buffer
1016:mdb.c         ****         data[1] = (uint8_t)recv_mdb(MDB_USART);
1017:mdb.c         **** 
1018:mdb.c         ****         // calculate checksum
1019:mdb.c         ****         checksum += data[0];
1020:mdb.c         ****         checksum &= 0xFF;
1021:mdb.c         **** 
1022:mdb.c         ****         // validate checksum
1023:mdb.c         ****         if (checksum != data[1])
1024:mdb.c         ****         {
1025:mdb.c         ****             state = 0;
1026:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
1027:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
1028:mdb.c         ****             checksum = MDB_VEND;
1029:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("Error: invalid checksum [VEND]\r\n"));
 2224               		.loc 1 1029 13 view .LVU624
 2225 0bbc 80E0      		ldi r24,0
 2226               	/* epilogue start */
1030:mdb.c         ****             return;
1031:mdb.c         ****         }
1032:mdb.c         **** 
1033:mdb.c         ****         send_str_p(UPLINK_USART, PSTR("session-complete\r\n"));
1034:mdb.c         ****         vendStateT = 1;
1035:mdb.c         ****         //saveVendState(vendStateT);
1036:mdb.c         ****         // send ACK
1037:mdb.c         ****         send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY);
1038:mdb.c         ****         state = 0;
1039:mdb.c         ****         mdb_state = MDB_ENABLED;
1040:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
1041:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK; ///orignal
1042:mdb.c         ****                                         ////mdb_poll_reply = MDB_REPLY_END_SESSION;
1043:mdb.c         **** 
1044:mdb.c         ****         // RESET();
1045:mdb.c         ****         vendStateT = 1;
1046:mdb.c         ****         return;
1047:mdb.c         ****         break;
1048:mdb.c         ****     }
1049:mdb.c         **** }
 2227               		.loc 1 1049 1 view .LVU625
 2228 0bbe A896      		adiw r28,40
 2229 0bc0 0FB6      		in __tmp_reg__,__SREG__
 2230 0bc2 F894      		cli
 2231 0bc4 DEBF      		out __SP_H__,r29
 2232 0bc6 0FBE      		out __SREG__,__tmp_reg__
 2233 0bc8 CDBF      		out __SP_L__,r28
 2234 0bca DF91      		pop r29
 2235 0bcc CF91      		pop r28
 2236 0bce 1F91      		pop r17
 2237 0bd0 0F91      		pop r16
 2238 0bd2 FF90      		pop r15
 2239 0bd4 EF90      		pop r14
1029:mdb.c         ****             return;
 2240               		.loc 1 1029 13 view .LVU626
 2241 0bd6 0C94 0000 		jmp send_str_p
 2242               	.LVL143:
 2243               	.L79:
 813:mdb.c         ****     {
 2244               		.loc 1 813 5 view .LVU627
 2245 0bda 8330      		cpi r24,lo8(3)
 2246 0bdc 01F4      		brne .+2
 2247 0bde 00C0      		rjmp .L82
 2248 0be0 8430      		cpi r24,lo8(4)
 2249 0be2 01F4      		brne .+2
 2250 0be4 00C0      		rjmp .L83
 2251               	.LVL144:
 2252               	.L75:
 2253               	/* epilogue start */
 2254               		.loc 1 1049 1 view .LVU628
 2255 0be6 A896      		adiw r28,40
 2256 0be8 0FB6      		in __tmp_reg__,__SREG__
 2257 0bea F894      		cli
 2258 0bec DEBF      		out __SP_H__,r29
 2259 0bee 0FBE      		out __SREG__,__tmp_reg__
 2260 0bf0 CDBF      		out __SP_L__,r28
 2261 0bf2 DF91      		pop r29
 2262 0bf4 CF91      		pop r28
 2263 0bf6 1F91      		pop r17
 2264 0bf8 0F91      		pop r16
 2265 0bfa FF90      		pop r15
 2266 0bfc EF90      		pop r14
 2267 0bfe 0895      		ret
 2268               	.LVL145:
 2269               	.L86:
 846:mdb.c         ****         send_str(UPLINK_USART, buffer);
 2270               		.loc 1 846 9 is_stmt 1 view .LVU629
 2271 0c00 1F92      		push __zero_reg__
 2272               	.LVL146:
 846:mdb.c         ****         send_str(UPLINK_USART, buffer);
 2273               		.loc 1 846 9 is_stmt 0 view .LVU630
 2274 0c02 5F93      		push r21
 2275 0c04 1F92      		push __zero_reg__
 2276 0c06 4F93      		push r20
 2277 0c08 1F92      		push __zero_reg__
 2278 0c0a 3F93      		push r19
 2279 0c0c 1F92      		push __zero_reg__
 2280 0c0e 2F93      		push r18
 2281 0c10 1F92      		push __zero_reg__
 2282 0c12 9F93      		push r25
 2283 0c14 80E0      		ldi r24,lo8(.LC4)
 2284 0c16 90E0      		ldi r25,hi8(.LC4)
 2285 0c18 9F93      		push r25
 2286 0c1a 8F93      		push r24
 2287 0c1c 8E01      		movw r16,r28
 2288               	.LVL147:
 846:mdb.c         ****         send_str(UPLINK_USART, buffer);
 2289               		.loc 1 846 9 view .LVU631
 2290 0c1e 0F5F      		subi r16,-1
 2291 0c20 1F4F      		sbci r17,-1
 2292 0c22 1F93      		push r17
 2293 0c24 0F93      		push r16
 2294 0c26 0E94 0000 		call sprintf
 2295               	.LVL148:
 847:mdb.c         ****         send_str(UPLINK_USART, buffer);
 2296               		.loc 1 847 9 is_stmt 1 view .LVU632
 2297 0c2a B801      		movw r22,r16
 2298 0c2c 80E0      		ldi r24,0
 2299 0c2e 0E94 0000 		call send_str
 2300               	.LVL149:
 848:mdb.c         **** 
 2301               		.loc 1 848 9 view .LVU633
 2302 0c32 B801      		movw r22,r16
 2303 0c34 80E0      		ldi r24,0
 2304 0c36 0E94 0000 		call send_str
 2305               	.LVL150:
 851:mdb.c         ****         state = 0;
 2306               		.loc 1 851 9 view .LVU634
 2307 0c3a 4091 0000 		lds r20,MDB_USART_TX_READY
 2308 0c3e 60E0      		ldi r22,0
 2309 0c40 71E0      		ldi r23,lo8(1)
 2310 0c42 81E0      		ldi r24,lo8(1)
 2311 0c44 0E94 0000 		call send_mdb
 2312               	.LVL151:
 852:mdb.c         ****         mdb_state = MDB_VENDING;
 2313               		.loc 1 852 9 view .LVU635
 852:mdb.c         ****         mdb_state = MDB_VENDING;
 2314               		.loc 1 852 15 is_stmt 0 view .LVU636
 2315 0c48 1092 0000 		sts state.13,__zero_reg__
 853:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 2316               		.loc 1 853 9 is_stmt 1 view .LVU637
 853:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 2317               		.loc 1 853 19 is_stmt 0 view .LVU638
 2318 0c4c 84E0      		ldi r24,lo8(4)
 2319 0c4e 8093 0000 		sts mdb_state,r24
 854:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 2320               		.loc 1 854 9 is_stmt 1 view .LVU639
 854:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 2321               		.loc 1 854 24 is_stmt 0 view .LVU640
 2322 0c52 1092 0000 		sts mdb_active_cmd,__zero_reg__
 855:mdb.c         ****         return;
 2323               		.loc 1 855 9 is_stmt 1 view .LVU641
 855:mdb.c         ****         return;
 2324               		.loc 1 855 24 is_stmt 0 view .LVU642
 2325 0c56 1092 0000 		sts mdb_poll_reply,__zero_reg__
 856:mdb.c         ****         break;
 2326               		.loc 1 856 9 is_stmt 1 view .LVU643
 2327 0c5a 0FB6      		in __tmp_reg__,__SREG__
 2328 0c5c F894      		cli
 2329 0c5e DEBF      		out __SP_H__,r29
 2330 0c60 0FBE      		out __SREG__,__tmp_reg__
 2331 0c62 CDBF      		out __SP_L__,r28
 2332 0c64 00C0      		rjmp .L75
 2333               	.LVL152:
 2334               	.L93:
 857:mdb.c         **** 
 2335               		.loc 1 857 9 view .LVU644
 862:mdb.c         ****             return;
 2336               		.loc 1 862 9 view .LVU645
 862:mdb.c         ****             return;
 2337               		.loc 1 862 13 is_stmt 0 view .LVU646
 2338 0c66 60E0      		ldi r22,0
 2339 0c68 81E0      		ldi r24,lo8(1)
 2340 0c6a 0E94 0000 		call buffer_level
 2341               	.LVL153:
 862:mdb.c         ****             return;
 2342               		.loc 1 862 12 view .LVU647
 2343 0c6e 8230      		cpi r24,lo8(2)
 2344 0c70 00F4      		brsh .+2
 2345 0c72 00C0      		rjmp .L75
 872:mdb.c         **** 
 2346               		.loc 1 872 9 is_stmt 1 view .LVU648
 872:mdb.c         **** 
 2347               		.loc 1 872 28 is_stmt 0 view .LVU649
 2348 0c74 81E0      		ldi r24,lo8(1)
 2349 0c76 0E94 0000 		call recv_mdb
 2350               	.LVL154:
 872:mdb.c         **** 
 2351               		.loc 1 872 17 view .LVU650
 2352 0c7a 8093 0000 		sts data.12+1,r24
 875:mdb.c         ****         checksum &= 0xFF;
 2353               		.loc 1 875 9 is_stmt 1 view .LVU651
 875:mdb.c         ****         checksum &= 0xFF;
 2354               		.loc 1 875 18 is_stmt 0 view .LVU652
 2355 0c7e 9091 0000 		lds r25,data.12
 2356 0c82 9D5E      		subi r25,lo8(-(19))
 2357               	.LVL155:
 876:mdb.c         **** 
 2358               		.loc 1 876 9 is_stmt 1 view .LVU653
 878:mdb.c         ****         //saveVendState(vendStateT);
 2359               		.loc 1 878 9 view .LVU654
 878:mdb.c         ****         //saveVendState(vendStateT);
 2360               		.loc 1 878 20 is_stmt 0 view .LVU655
 2361 0c84 22E0      		ldi r18,lo8(2)
 2362 0c86 2093 0000 		sts vendStateT,r18
 882:mdb.c         ****         {
 2363               		.loc 1 882 9 is_stmt 1 view .LVU656
 882:mdb.c         ****         {
 2364               		.loc 1 882 12 is_stmt 0 view .LVU657
 2365 0c8a 8917      		cp r24,r25
 2366 0c8c 01F0      		breq .L88
 884:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 2367               		.loc 1 884 13 is_stmt 1 view .LVU658
 884:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 2368               		.loc 1 884 19 is_stmt 0 view .LVU659
 2369 0c8e 1092 0000 		sts state.13,__zero_reg__
 885:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 2370               		.loc 1 885 13 is_stmt 1 view .LVU660
 885:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 2371               		.loc 1 885 28 is_stmt 0 view .LVU661
 2372 0c92 1092 0000 		sts mdb_active_cmd,__zero_reg__
 886:mdb.c         ****             checksum = MDB_VEND;
 2373               		.loc 1 886 13 is_stmt 1 view .LVU662
 886:mdb.c         ****             checksum = MDB_VEND;
 2374               		.loc 1 886 28 is_stmt 0 view .LVU663
 2375 0c96 1092 0000 		sts mdb_poll_reply,__zero_reg__
 887:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("Error: invalid checksum [VEND]\r\n"));
 2376               		.loc 1 887 13 is_stmt 1 view .LVU664
 2377               	.LVL156:
 888:mdb.c         ****             return;
 2378               		.loc 1 888 13 view .LVU665
 2379               	.LBB37:
 888:mdb.c         ****             return;
 2380               		.loc 1 888 38 view .LVU666
 888:mdb.c         ****             return;
 2381               		.loc 1 888 38 view .LVU667
 2382               	.LBE37:
 888:mdb.c         ****             return;
 2383               		.loc 1 888 13 is_stmt 0 view .LVU668
 2384 0c9a 60E0      		ldi r22,lo8(__c.10)
 2385 0c9c 70E0      		ldi r23,hi8(__c.10)
 2386 0c9e 00C0      		rjmp .L95
 2387               	.LVL157:
 2388               	.L88:
 892:mdb.c         **** 
 2389               		.loc 1 892 9 is_stmt 1 view .LVU669
 2390               	.LBB38:
 892:mdb.c         **** 
 2391               		.loc 1 892 34 view .LVU670
 892:mdb.c         **** 
 2392               		.loc 1 892 34 view .LVU671
 2393               	.LBE38:
 892:mdb.c         **** 
 2394               		.loc 1 892 9 is_stmt 0 view .LVU672
 2395 0ca0 60E0      		ldi r22,lo8(__c.9)
 2396 0ca2 70E0      		ldi r23,hi8(__c.9)
 2397 0ca4 80E0      		ldi r24,0
 2398 0ca6 0E94 0000 		call send_str_p
 2399               	.LVL158:
 895:mdb.c         ****         state = 0;
 2400               		.loc 1 895 9 is_stmt 1 view .LVU673
 2401 0caa 4091 0000 		lds r20,MDB_USART_TX_READY
 2402 0cae 60E0      		ldi r22,0
 2403 0cb0 71E0      		ldi r23,lo8(1)
 2404 0cb2 81E0      		ldi r24,lo8(1)
 2405 0cb4 0E94 0000 		call send_mdb
 2406               	.LVL159:
 896:mdb.c         ****         mdb_state = MDB_SESSION_IDLE;
 2407               		.loc 1 896 9 view .LVU674
 896:mdb.c         ****         mdb_state = MDB_SESSION_IDLE;
 2408               		.loc 1 896 15 is_stmt 0 view .LVU675
 2409 0cb8 1092 0000 		sts state.13,__zero_reg__
 897:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 2410               		.loc 1 897 9 is_stmt 1 view .LVU676
 897:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 2411               		.loc 1 897 19 is_stmt 0 view .LVU677
 2412 0cbc 83E0      		ldi r24,lo8(3)
 2413 0cbe 8093 0000 		sts mdb_state,r24
 898:mdb.c         ****         mdb_poll_reply = MDB_REPLY_VEND_DENIED;
 2414               		.loc 1 898 9 is_stmt 1 view .LVU678
 898:mdb.c         ****         mdb_poll_reply = MDB_REPLY_VEND_DENIED;
 2415               		.loc 1 898 24 is_stmt 0 view .LVU679
 2416 0cc2 1092 0000 		sts mdb_active_cmd,__zero_reg__
 899:mdb.c         ****         RESET(); //NOT IN ORG
 2417               		.loc 1 899 9 is_stmt 1 view .LVU680
 899:mdb.c         ****         RESET(); //NOT IN ORG
 2418               		.loc 1 899 24 is_stmt 0 view .LVU681
 2419 0cc6 87E0      		ldi r24,lo8(7)
 2420 0cc8 8093 0000 		sts mdb_poll_reply,r24
 900:mdb.c         ****         return;
 2421               		.loc 1 900 9 is_stmt 1 view .LVU682
 2422               	.L94:
 998:mdb.c         ****         return;
 2423               		.loc 1 998 9 view .LVU683
 2424               	/* #APP */
 2425               	 ;  998 "mdb.c" 1
 2426 0ccc E0E0      		ldi r30,0
 2427               	 ;  0 "" 2
 998:mdb.c         ****         return;
 2428               		.loc 1 998 9 view .LVU684
 2429               	 ;  998 "mdb.c" 1
 2430 0cce F0E0      		ldi r31,0
 2431               	 ;  0 "" 2
 998:mdb.c         ****         return;
 2432               		.loc 1 998 9 view .LVU685
 2433               	 ;  998 "mdb.c" 1
 2434 0cd0 0994      		ijmp
 2435               	 ;  0 "" 2
 998:mdb.c         ****         return;
 2436               		.loc 1 998 16 view .LVU686
 999:mdb.c         ****         break;
 2437               		.loc 1 999 9 view .LVU687
 2438               	/* #NOAPP */
 2439 0cd2 00C0      		rjmp .L75
 2440               	.LVL160:
 2441               	.L78:
 902:mdb.c         **** 
 2442               		.loc 1 902 9 view .LVU688
 907:mdb.c         ****             return;
 2443               		.loc 1 907 9 view .LVU689
 907:mdb.c         ****             return;
 2444               		.loc 1 907 13 is_stmt 0 view .LVU690
 2445 0cd4 60E0      		ldi r22,0
 2446 0cd6 81E0      		ldi r24,lo8(1)
 2447 0cd8 0E94 0000 		call buffer_level
 2448               	.LVL161:
 907:mdb.c         ****             return;
 2449               		.loc 1 907 12 view .LVU691
 2450 0cdc 8630      		cpi r24,lo8(6)
 2451 0cde 00F4      		brsh .+2
 2452 0ce0 00C0      		rjmp .L75
 909:mdb.c         ****         /*  vendStateT=1;//newly added 
 2453               		.loc 1 909 9 is_stmt 1 view .LVU692
 909:mdb.c         ****         /*  vendStateT=1;//newly added 
 2454               		.loc 1 909 20 is_stmt 0 view .LVU693
 2455 0ce2 11E0      		ldi r17,lo8(1)
 2456 0ce4 1093 0000 		sts vendStateT,r17
 918:mdb.c         ****         {
 2457               		.loc 1 918 9 is_stmt 1 view .LVU694
 2458               	.LBB39:
 918:mdb.c         ****         {
 2459               		.loc 1 918 14 view .LVU695
 2460               	.LVL162:
 918:mdb.c         ****         {
 2461               		.loc 1 918 31 view .LVU696
 920:mdb.c         ****         }
 2462               		.loc 1 920 13 view .LVU697
 920:mdb.c         ****         }
 2463               		.loc 1 920 32 is_stmt 0 view .LVU698
 2464 0ce8 81E0      		ldi r24,lo8(1)
 2465 0cea 0E94 0000 		call recv_mdb
 2466               	.LVL163:
 920:mdb.c         ****         }
 2467               		.loc 1 920 23 view .LVU699
 2468 0cee 8093 0000 		sts data.12+1,r24
 918:mdb.c         ****         {
 2469               		.loc 1 918 37 is_stmt 1 view .LVU700
 2470               	.LVL164:
 918:mdb.c         ****         {
 2471               		.loc 1 918 31 view .LVU701
 920:mdb.c         ****         }
 2472               		.loc 1 920 13 view .LVU702
 920:mdb.c         ****         }
 2473               		.loc 1 920 32 is_stmt 0 view .LVU703
 2474 0cf2 81E0      		ldi r24,lo8(1)
 2475 0cf4 0E94 0000 		call recv_mdb
 2476               	.LVL165:
 920:mdb.c         ****         }
 2477               		.loc 1 920 23 view .LVU704
 2478 0cf8 8093 0000 		sts data.12+2,r24
 918:mdb.c         ****         {
 2479               		.loc 1 918 37 is_stmt 1 view .LVU705
 2480               	.LVL166:
 918:mdb.c         ****         {
 2481               		.loc 1 918 31 view .LVU706
 920:mdb.c         ****         }
 2482               		.loc 1 920 13 view .LVU707
 920:mdb.c         ****         }
 2483               		.loc 1 920 32 is_stmt 0 view .LVU708
 2484 0cfc 81E0      		ldi r24,lo8(1)
 2485 0cfe 0E94 0000 		call recv_mdb
 2486               	.LVL167:
 2487 0d02 282F      		mov r18,r24
 920:mdb.c         ****         }
 2488               		.loc 1 920 21 view .LVU709
 2489 0d04 8093 0000 		sts data.12+3,r24
 918:mdb.c         ****         {
 2490               		.loc 1 918 37 is_stmt 1 view .LVU710
 2491               	.LVL168:
 918:mdb.c         ****         {
 2492               		.loc 1 918 31 view .LVU711
 2493               	.LBE39:
 924:mdb.c         ****         checksum &= 0xFF;
 2494               		.loc 1 924 9 view .LVU712
 924:mdb.c         ****         checksum &= 0xFF;
 2495               		.loc 1 924 35 is_stmt 0 view .LVU713
 2496 0d08 8091 0000 		lds r24,data.12+1
 924:mdb.c         ****         checksum &= 0xFF;
 2497               		.loc 1 924 45 view .LVU714
 2498 0d0c 3091 0000 		lds r19,data.12+2
 2499               	.LVL169:
 925:mdb.c         **** 
 2500               		.loc 1 925 9 is_stmt 1 view .LVU715
 928:mdb.c         ****         {
 2501               		.loc 1 928 9 view .LVU716
 924:mdb.c         ****         checksum &= 0xFF;
 2502               		.loc 1 924 29 is_stmt 0 view .LVU717
 2503 0d10 9091 0000 		lds r25,data.12
 2504 0d14 980F      		add r25,r24
 924:mdb.c         ****         checksum &= 0xFF;
 2505               		.loc 1 924 18 view .LVU718
 2506 0d16 9D5E      		subi r25,lo8(-(19))
 2507 0d18 930F      		add r25,r19
 928:mdb.c         ****         {
 2508               		.loc 1 928 12 view .LVU719
 2509 0d1a 2917      		cp r18,r25
 2510 0d1c 01F0      		breq .L89
 930:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 2511               		.loc 1 930 13 is_stmt 1 view .LVU720
 930:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 2512               		.loc 1 930 19 is_stmt 0 view .LVU721
 2513 0d1e 1092 0000 		sts state.13,__zero_reg__
 931:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 2514               		.loc 1 931 13 is_stmt 1 view .LVU722
 931:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 2515               		.loc 1 931 28 is_stmt 0 view .LVU723
 2516 0d22 1092 0000 		sts mdb_active_cmd,__zero_reg__
 932:mdb.c         ****             checksum = MDB_VEND;
 2517               		.loc 1 932 13 is_stmt 1 view .LVU724
 932:mdb.c         ****             checksum = MDB_VEND;
 2518               		.loc 1 932 28 is_stmt 0 view .LVU725
 2519 0d26 1092 0000 		sts mdb_poll_reply,__zero_reg__
 933:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("Error: invalid checksum [VEND]\r\n"));
 2520               		.loc 1 933 13 is_stmt 1 view .LVU726
 2521               	.LVL170:
 934:mdb.c         ****             return;
 2522               		.loc 1 934 13 view .LVU727
 2523               	.LBB40:
 934:mdb.c         ****             return;
 2524               		.loc 1 934 38 view .LVU728
 934:mdb.c         ****             return;
 2525               		.loc 1 934 38 view .LVU729
 2526               	.LBE40:
 934:mdb.c         ****             return;
 2527               		.loc 1 934 13 is_stmt 0 view .LVU730
 2528 0d2a 60E0      		ldi r22,lo8(__c.8)
 2529 0d2c 70E0      		ldi r23,hi8(__c.8)
 2530 0d2e 00C0      		rjmp .L95
 2531               	.LVL171:
 2532               	.L89:
 938:mdb.c         ****         ////saveVendState(vendStateT);
 2533               		.loc 1 938 9 is_stmt 1 view .LVU731
 938:mdb.c         ****         ////saveVendState(vendStateT);
 2534               		.loc 1 938 20 is_stmt 0 view .LVU732
 2535 0d30 1093 0000 		sts vendStateT,r17
 941:mdb.c         ****         send_str(0, buffer);
 2536               		.loc 1 941 9 is_stmt 1 view .LVU733
 2537 0d34 830F      		add r24,r19
 2538 0d36 9927      		clr r25
 2539 0d38 991F      		rol r25
 2540               	.LVL172:
 941:mdb.c         ****         send_str(0, buffer);
 2541               		.loc 1 941 9 is_stmt 0 view .LVU734
 2542 0d3a 9F93      		push r25
 2543               	.LVL173:
 941:mdb.c         ****         send_str(0, buffer);
 2544               		.loc 1 941 9 view .LVU735
 2545 0d3c 8F93      		push r24
 2546 0d3e 80E0      		ldi r24,lo8(.LC5)
 2547 0d40 90E0      		ldi r25,hi8(.LC5)
 2548 0d42 9F93      		push r25
 2549 0d44 8F93      		push r24
 2550 0d46 FE01      		movw r30,r28
 2551 0d48 3196      		adiw r30,1
 2552 0d4a 7F01      		movw r14,r30
 2553 0d4c FF93      		push r31
 2554 0d4e EF93      		push r30
 2555 0d50 0E94 0000 		call sprintf
 2556               	.LVL174:
 942:mdb.c         **** 
 2557               		.loc 1 942 9 is_stmt 1 view .LVU736
 2558 0d54 B701      		movw r22,r14
 2559 0d56 80E0      		ldi r24,0
 2560 0d58 0E94 0000 		call send_str
 2561               	.LVL175:
 945:mdb.c         ****         state = 0;
 2562               		.loc 1 945 9 view .LVU737
 2563 0d5c 4091 0000 		lds r20,MDB_USART_TX_READY
 2564 0d60 60E0      		ldi r22,0
 2565 0d62 71E0      		ldi r23,lo8(1)
 2566 0d64 81E0      		ldi r24,lo8(1)
 2567 0d66 0E94 0000 		call send_mdb
 2568               	.LVL176:
 946:mdb.c         ****         mdb_state = MDB_SESSION_IDLE;
 2569               		.loc 1 946 9 view .LVU738
 946:mdb.c         ****         mdb_state = MDB_SESSION_IDLE;
 2570               		.loc 1 946 15 is_stmt 0 view .LVU739
 2571 0d6a 1092 0000 		sts state.13,__zero_reg__
 947:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 2572               		.loc 1 947 9 is_stmt 1 view .LVU740
 947:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 2573               		.loc 1 947 19 is_stmt 0 view .LVU741
 2574 0d6e 83E0      		ldi r24,lo8(3)
 2575 0d70 8093 0000 		sts mdb_state,r24
 948:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 2576               		.loc 1 948 9 is_stmt 1 view .LVU742
 948:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 2577               		.loc 1 948 24 is_stmt 0 view .LVU743
 2578 0d74 1092 0000 		sts mdb_active_cmd,__zero_reg__
 949:mdb.c         **** 
 2579               		.loc 1 949 9 is_stmt 1 view .LVU744
 949:mdb.c         **** 
 2580               		.loc 1 949 24 is_stmt 0 view .LVU745
 2581 0d78 1092 0000 		sts mdb_poll_reply,__zero_reg__
 952:mdb.c         **** 
 2582               		.loc 1 952 9 is_stmt 1 view .LVU746
 952:mdb.c         **** 
 2583               		.loc 1 952 20 is_stmt 0 view .LVU747
 2584 0d7c 1093 0000 		sts vendStateT,r17
 954:mdb.c         ****         break;
 2585               		.loc 1 954 9 is_stmt 1 view .LVU748
 2586 0d80 0F90      		pop __tmp_reg__
 2587 0d82 0F90      		pop __tmp_reg__
 2588 0d84 0F90      		pop __tmp_reg__
 2589 0d86 0F90      		pop __tmp_reg__
 2590 0d88 0F90      		pop __tmp_reg__
 2591 0d8a 0F90      		pop __tmp_reg__
 2592 0d8c 00C0      		rjmp .L75
 2593               	.LVL177:
 2594               	.L82:
 955:mdb.c         **** 
 2595               		.loc 1 955 9 view .LVU749
 960:mdb.c         ****             return;
 2596               		.loc 1 960 9 view .LVU750
 960:mdb.c         ****             return;
 2597               		.loc 1 960 13 is_stmt 0 view .LVU751
 2598 0d8e 60E0      		ldi r22,0
 2599 0d90 81E0      		ldi r24,lo8(1)
 2600 0d92 0E94 0000 		call buffer_level
 2601               	.LVL178:
 960:mdb.c         ****             return;
 2602               		.loc 1 960 12 view .LVU752
 2603 0d96 8230      		cpi r24,lo8(2)
 2604 0d98 00F4      		brsh .+2
 2605 0d9a 00C0      		rjmp .L75
 970:mdb.c         **** 
 2606               		.loc 1 970 9 is_stmt 1 view .LVU753
 970:mdb.c         **** 
 2607               		.loc 1 970 28 is_stmt 0 view .LVU754
 2608 0d9c 81E0      		ldi r24,lo8(1)
 2609 0d9e 0E94 0000 		call recv_mdb
 2610               	.LVL179:
 970:mdb.c         **** 
 2611               		.loc 1 970 17 view .LVU755
 2612 0da2 8093 0000 		sts data.12+1,r24
 973:mdb.c         ****         checksum &= 0xFF;
 2613               		.loc 1 973 9 is_stmt 1 view .LVU756
 2614               	.LVL180:
 974:mdb.c         **** 
 2615               		.loc 1 974 9 view .LVU757
 977:mdb.c         ****         {
 2616               		.loc 1 977 9 view .LVU758
 973:mdb.c         ****         checksum &= 0xFF;
 2617               		.loc 1 973 18 is_stmt 0 view .LVU759
 2618 0da6 9091 0000 		lds r25,data.12
 2619 0daa 9D5E      		subi r25,lo8(-(19))
 2620               	.LVL181:
 977:mdb.c         ****         {
 2621               		.loc 1 977 12 view .LVU760
 2622 0dac 8917      		cp r24,r25
 2623 0dae 01F0      		breq .L90
 979:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 2624               		.loc 1 979 13 is_stmt 1 view .LVU761
 979:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 2625               		.loc 1 979 19 is_stmt 0 view .LVU762
 2626 0db0 1092 0000 		sts state.13,__zero_reg__
 980:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 2627               		.loc 1 980 13 is_stmt 1 view .LVU763
 980:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 2628               		.loc 1 980 28 is_stmt 0 view .LVU764
 2629 0db4 1092 0000 		sts mdb_active_cmd,__zero_reg__
 981:mdb.c         ****             checksum = MDB_VEND;
 2630               		.loc 1 981 13 is_stmt 1 view .LVU765
 981:mdb.c         ****             checksum = MDB_VEND;
 2631               		.loc 1 981 28 is_stmt 0 view .LVU766
 2632 0db8 1092 0000 		sts mdb_poll_reply,__zero_reg__
 982:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("Error: invalid checksum [VEND]\r\n"));
 2633               		.loc 1 982 13 is_stmt 1 view .LVU767
 2634               	.LVL182:
 983:mdb.c         ****             return;
 2635               		.loc 1 983 13 view .LVU768
 2636               	.LBB41:
 983:mdb.c         ****             return;
 2637               		.loc 1 983 38 view .LVU769
 983:mdb.c         ****             return;
 2638               		.loc 1 983 38 view .LVU770
 2639               	.LBE41:
 983:mdb.c         ****             return;
 2640               		.loc 1 983 13 is_stmt 0 view .LVU771
 2641 0dbc 60E0      		ldi r22,lo8(__c.7)
 2642 0dbe 70E0      		ldi r23,hi8(__c.7)
 2643 0dc0 00C0      		rjmp .L95
 2644               	.LVL183:
 2645               	.L90:
 987:mdb.c         **** 
 2646               		.loc 1 987 9 is_stmt 1 view .LVU772
 2647               	.LBB42:
 987:mdb.c         **** 
 2648               		.loc 1 987 34 view .LVU773
 987:mdb.c         **** 
 2649               		.loc 1 987 34 view .LVU774
 2650               	.LBE42:
 987:mdb.c         **** 
 2651               		.loc 1 987 9 is_stmt 0 view .LVU775
 2652 0dc2 60E0      		ldi r22,lo8(__c.6)
 2653 0dc4 70E0      		ldi r23,hi8(__c.6)
 2654 0dc6 80E0      		ldi r24,0
 2655 0dc8 0E94 0000 		call send_str_p
 2656               	.LVL184:
 989:mdb.c         ****         //saveVendState(vendStateT);
 2657               		.loc 1 989 9 is_stmt 1 view .LVU776
 989:mdb.c         ****         //saveVendState(vendStateT);
 2658               		.loc 1 989 20 is_stmt 0 view .LVU777
 2659 0dcc 12E0      		ldi r17,lo8(2)
 2660 0dce 1093 0000 		sts vendStateT,r17
 993:mdb.c         ****         state = 0;
 2661               		.loc 1 993 9 is_stmt 1 view .LVU778
 2662 0dd2 4091 0000 		lds r20,MDB_USART_TX_READY
 2663 0dd6 60E0      		ldi r22,0
 2664 0dd8 71E0      		ldi r23,lo8(1)
 2665 0dda 81E0      		ldi r24,lo8(1)
 2666 0ddc 0E94 0000 		call send_mdb
 2667               	.LVL185:
 994:mdb.c         ****         mdb_state = MDB_ENABLED;
 2668               		.loc 1 994 9 view .LVU779
 994:mdb.c         ****         mdb_state = MDB_ENABLED;
 2669               		.loc 1 994 15 is_stmt 0 view .LVU780
 2670 0de0 1092 0000 		sts state.13,__zero_reg__
 995:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 2671               		.loc 1 995 9 is_stmt 1 view .LVU781
 995:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 2672               		.loc 1 995 19 is_stmt 0 view .LVU782
 2673 0de4 1093 0000 		sts mdb_state,r17
 996:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 2674               		.loc 1 996 9 is_stmt 1 view .LVU783
 996:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 2675               		.loc 1 996 24 is_stmt 0 view .LVU784
 2676 0de8 1092 0000 		sts mdb_active_cmd,__zero_reg__
 997:mdb.c         ****         RESET(); //NOT IN ORG
 2677               		.loc 1 997 9 is_stmt 1 view .LVU785
 997:mdb.c         ****         RESET(); //NOT IN ORG
 2678               		.loc 1 997 24 is_stmt 0 view .LVU786
 2679 0dec 1092 0000 		sts mdb_poll_reply,__zero_reg__
 2680 0df0 00C0      		rjmp .L94
 2681               	.LVL186:
 2682               	.L83:
1000:mdb.c         **** 
 2683               		.loc 1 1000 9 is_stmt 1 view .LVU787
1005:mdb.c         ****             return;
 2684               		.loc 1 1005 9 view .LVU788
1005:mdb.c         ****             return;
 2685               		.loc 1 1005 13 is_stmt 0 view .LVU789
 2686 0df2 60E0      		ldi r22,0
 2687 0df4 81E0      		ldi r24,lo8(1)
 2688 0df6 0E94 0000 		call buffer_level
 2689               	.LVL187:
1005:mdb.c         ****             return;
 2690               		.loc 1 1005 12 view .LVU790
 2691 0dfa 8230      		cpi r24,lo8(2)
 2692 0dfc 00F4      		brsh .+2
 2693 0dfe 00C0      		rjmp .L75
1012:mdb.c         ****         //saveVendState(vendStateT);
 2694               		.loc 1 1012 9 is_stmt 1 view .LVU791
1012:mdb.c         ****         //saveVendState(vendStateT);
 2695               		.loc 1 1012 20 is_stmt 0 view .LVU792
 2696 0e00 11E0      		ldi r17,lo8(1)
 2697 0e02 1093 0000 		sts vendStateT,r17
1016:mdb.c         **** 
 2698               		.loc 1 1016 9 is_stmt 1 view .LVU793
1016:mdb.c         **** 
 2699               		.loc 1 1016 28 is_stmt 0 view .LVU794
 2700 0e06 81E0      		ldi r24,lo8(1)
 2701 0e08 0E94 0000 		call recv_mdb
 2702               	.LVL188:
1016:mdb.c         **** 
 2703               		.loc 1 1016 17 view .LVU795
 2704 0e0c 8093 0000 		sts data.12+1,r24
1019:mdb.c         ****         checksum &= 0xFF;
 2705               		.loc 1 1019 9 is_stmt 1 view .LVU796
 2706               	.LVL189:
1020:mdb.c         **** 
 2707               		.loc 1 1020 9 view .LVU797
1023:mdb.c         ****         {
 2708               		.loc 1 1023 9 view .LVU798
1019:mdb.c         ****         checksum &= 0xFF;
 2709               		.loc 1 1019 18 is_stmt 0 view .LVU799
 2710 0e10 9091 0000 		lds r25,data.12
 2711 0e14 9D5E      		subi r25,lo8(-(19))
 2712               	.LVL190:
1023:mdb.c         ****         {
 2713               		.loc 1 1023 12 view .LVU800
 2714 0e16 8917      		cp r24,r25
 2715 0e18 01F0      		breq .L91
1025:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 2716               		.loc 1 1025 13 is_stmt 1 view .LVU801
1025:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 2717               		.loc 1 1025 19 is_stmt 0 view .LVU802
 2718 0e1a 1092 0000 		sts state.13,__zero_reg__
1026:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 2719               		.loc 1 1026 13 is_stmt 1 view .LVU803
1026:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
 2720               		.loc 1 1026 28 is_stmt 0 view .LVU804
 2721 0e1e 1092 0000 		sts mdb_active_cmd,__zero_reg__
1027:mdb.c         ****             checksum = MDB_VEND;
 2722               		.loc 1 1027 13 is_stmt 1 view .LVU805
1027:mdb.c         ****             checksum = MDB_VEND;
 2723               		.loc 1 1027 28 is_stmt 0 view .LVU806
 2724 0e22 1092 0000 		sts mdb_poll_reply,__zero_reg__
1028:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("Error: invalid checksum [VEND]\r\n"));
 2725               		.loc 1 1028 13 is_stmt 1 view .LVU807
 2726               	.LVL191:
1029:mdb.c         ****             return;
 2727               		.loc 1 1029 13 view .LVU808
 2728               	.LBB43:
1029:mdb.c         ****             return;
 2729               		.loc 1 1029 38 view .LVU809
1029:mdb.c         ****             return;
 2730               		.loc 1 1029 38 view .LVU810
 2731               	.LBE43:
1029:mdb.c         ****             return;
 2732               		.loc 1 1029 13 is_stmt 0 view .LVU811
 2733 0e26 60E0      		ldi r22,lo8(__c.5)
 2734 0e28 70E0      		ldi r23,hi8(__c.5)
 2735 0e2a 00C0      		rjmp .L95
 2736               	.LVL192:
 2737               	.L91:
1033:mdb.c         ****         vendStateT = 1;
 2738               		.loc 1 1033 9 is_stmt 1 view .LVU812
 2739               	.LBB44:
1033:mdb.c         ****         vendStateT = 1;
 2740               		.loc 1 1033 34 view .LVU813
1033:mdb.c         ****         vendStateT = 1;
 2741               		.loc 1 1033 34 view .LVU814
 2742               	.LBE44:
1033:mdb.c         ****         vendStateT = 1;
 2743               		.loc 1 1033 9 is_stmt 0 view .LVU815
 2744 0e2c 60E0      		ldi r22,lo8(__c.4)
 2745 0e2e 70E0      		ldi r23,hi8(__c.4)
 2746 0e30 80E0      		ldi r24,0
 2747 0e32 0E94 0000 		call send_str_p
 2748               	.LVL193:
1034:mdb.c         ****         //saveVendState(vendStateT);
 2749               		.loc 1 1034 9 is_stmt 1 view .LVU816
1034:mdb.c         ****         //saveVendState(vendStateT);
 2750               		.loc 1 1034 20 is_stmt 0 view .LVU817
 2751 0e36 1093 0000 		sts vendStateT,r17
1037:mdb.c         ****         state = 0;
 2752               		.loc 1 1037 9 is_stmt 1 view .LVU818
 2753 0e3a 4091 0000 		lds r20,MDB_USART_TX_READY
 2754 0e3e 60E0      		ldi r22,0
 2755 0e40 71E0      		ldi r23,lo8(1)
 2756 0e42 81E0      		ldi r24,lo8(1)
 2757 0e44 0E94 0000 		call send_mdb
 2758               	.LVL194:
1038:mdb.c         ****         mdb_state = MDB_ENABLED;
 2759               		.loc 1 1038 9 view .LVU819
1038:mdb.c         ****         mdb_state = MDB_ENABLED;
 2760               		.loc 1 1038 15 is_stmt 0 view .LVU820
 2761 0e48 1092 0000 		sts state.13,__zero_reg__
1039:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 2762               		.loc 1 1039 9 is_stmt 1 view .LVU821
1039:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 2763               		.loc 1 1039 19 is_stmt 0 view .LVU822
 2764 0e4c 82E0      		ldi r24,lo8(2)
 2765 0e4e 8093 0000 		sts mdb_state,r24
1040:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK; ///orignal
 2766               		.loc 1 1040 9 is_stmt 1 view .LVU823
1040:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK; ///orignal
 2767               		.loc 1 1040 24 is_stmt 0 view .LVU824
 2768 0e52 1092 0000 		sts mdb_active_cmd,__zero_reg__
1041:mdb.c         ****                                         ////mdb_poll_reply = MDB_REPLY_END_SESSION;
 2769               		.loc 1 1041 9 is_stmt 1 view .LVU825
1041:mdb.c         ****                                         ////mdb_poll_reply = MDB_REPLY_END_SESSION;
 2770               		.loc 1 1041 24 is_stmt 0 view .LVU826
 2771 0e56 1092 0000 		sts mdb_poll_reply,__zero_reg__
1045:mdb.c         ****         return;
 2772               		.loc 1 1045 9 is_stmt 1 view .LVU827
1045:mdb.c         ****         return;
 2773               		.loc 1 1045 20 is_stmt 0 view .LVU828
 2774 0e5a 1093 0000 		sts vendStateT,r17
1046:mdb.c         ****         break;
 2775               		.loc 1 1046 9 is_stmt 1 view .LVU829
 2776 0e5e 00C0      		rjmp .L75
 2777               		.cfi_endproc
 2778               	.LFE12:
 2780               	.global	mdb_reader
 2782               	mdb_reader:
 2783               	.LFB13:
1050:mdb.c         **** 
1051:mdb.c         **** void mdb_reader(void)
1052:mdb.c         **** {
 2784               		.loc 1 1052 1 view -0
 2785               		.cfi_startproc
 2786 0e60 CF93      		push r28
 2787               	.LCFI36:
 2788               		.cfi_def_cfa_offset 4
 2789               		.cfi_offset 28, -3
 2790               	/* prologue: function */
 2791               	/* frame size = 0 */
 2792               	/* stack size = 1 */
 2793               	.L__stack_usage = 1
1053:mdb.c         **** 
1054:mdb.c         ****     uint8_t data[2] = {0, 0};
 2794               		.loc 1 1054 5 view .LVU831
1055:mdb.c         ****     uint8_t index = 0;
 2795               		.loc 1 1055 5 view .LVU832
 2796               	.LVL195:
1056:mdb.c         **** 
1057:mdb.c         ****     // wait for enough data in buffer
1058:mdb.c         ****     if (buffer_level(MDB_USART, RX) < 4)
 2797               		.loc 1 1058 5 view .LVU833
 2798               		.loc 1 1058 9 is_stmt 0 view .LVU834
 2799 0e62 60E0      		ldi r22,0
 2800 0e64 81E0      		ldi r24,lo8(1)
 2801 0e66 0E94 0000 		call buffer_level
 2802               	.LVL196:
 2803               		.loc 1 1058 8 view .LVU835
 2804 0e6a 8430      		cpi r24,lo8(4)
 2805 0e6c 00F0      		brlo .L96
1059:mdb.c         ****         return;
1060:mdb.c         **** 
1061:mdb.c         ****     // fetch the data from buffer
1062:mdb.c         ****     for (index = 0; index < 2; index++)
 2806               		.loc 1 1062 27 is_stmt 1 view .LVU836
1063:mdb.c         ****     {
1064:mdb.c         ****         data[index] = recv_mdb(MDB_USART);
 2807               		.loc 1 1064 9 view .LVU837
 2808               		.loc 1 1064 23 is_stmt 0 view .LVU838
 2809 0e6e 81E0      		ldi r24,lo8(1)
 2810 0e70 0E94 0000 		call recv_mdb
 2811               	.LVL197:
 2812 0e74 C82F      		mov r28,r24
1062:mdb.c         ****     {
 2813               		.loc 1 1062 37 is_stmt 1 view .LVU839
 2814               	.LVL198:
1062:mdb.c         ****     {
 2815               		.loc 1 1062 27 view .LVU840
 2816               		.loc 1 1064 9 view .LVU841
 2817               		.loc 1 1064 23 is_stmt 0 view .LVU842
 2818 0e76 81E0      		ldi r24,lo8(1)
 2819 0e78 0E94 0000 		call recv_mdb
 2820               	.LVL199:
1062:mdb.c         ****     {
 2821               		.loc 1 1062 37 is_stmt 1 view .LVU843
1062:mdb.c         ****     {
 2822               		.loc 1 1062 27 view .LVU844
1065:mdb.c         ****     }
1066:mdb.c         **** 
1067:mdb.c         ****     // switch through subcommands
1068:mdb.c         ****     switch (data[0])
 2823               		.loc 1 1068 5 view .LVU845
 2824 0e7c C130      		cpi r28,lo8(1)
 2825 0e7e 01F0      		breq .L98
 2826 0e80 C230      		cpi r28,lo8(2)
 2827 0e82 01F0      		breq .L99
1069:mdb.c         ****     {
1070:mdb.c         ****     // reader disable
1071:mdb.c         ****     case 0:
1072:mdb.c         ****         if (data[1] != 0x14)
1073:mdb.c         ****         {
1074:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("Error: checksum error [READER]\r\n"));
1075:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
1076:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
1077:mdb.c         ****             return;
1078:mdb.c         ****         }
1079:mdb.c         **** 
1080:mdb.c         **** #if DEBUG == 1
1081:mdb.c         ****         send_str_p(UPLINK_USART, PSTR("READER DISABLE\r\n"));
1082:mdb.c         **** #endif
1083:mdb.c         **** 
1084:mdb.c         ****         // send ACK
1085:mdb.c         ****         send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY);
1086:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
1087:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
1088:mdb.c         ****         mdb_state = MDB_DISABLED;
1089:mdb.c         ****         break;
1090:mdb.c         **** 
1091:mdb.c         ****     // reader enable
1092:mdb.c         ****     case 1:
1093:mdb.c         ****         if (data[1] != 0x15)
1094:mdb.c         ****         {
1095:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("Error: checksum error [READER]\r\n"));
1096:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
1097:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
1098:mdb.c         ****             return;
1099:mdb.c         ****         }
1100:mdb.c         **** 
1101:mdb.c         **** #if DEBUG == 1
1102:mdb.c         ****         send_str_p(UPLINK_USART, PSTR("READER ENABLE\r\n"));
1103:mdb.c         **** #endif
1104:mdb.c         ****         txSwitchState(PIN12, 1);
1105:mdb.c         ****         // send ACK
1106:mdb.c         ****         send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY);
1107:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
1108:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
1109:mdb.c         ****         mdb_state = MDB_ENABLED;
1110:mdb.c         ****         break;
1111:mdb.c         **** 
1112:mdb.c         ****     // reader cancel
1113:mdb.c         ****     case 2:
1114:mdb.c         ****         if (data[1] != 0x16)
1115:mdb.c         ****         {
1116:mdb.c         ****             send_str_p(UPLINK_USART, PSTR("Error: checksum error [READER]\r\n"));
1117:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
1118:mdb.c         ****             mdb_poll_reply = MDB_REPLY_ACK;
1119:mdb.c         ****             return;
1120:mdb.c         ****         }
1121:mdb.c         **** 
1122:mdb.c         **** #if DEBUG == 1
1123:mdb.c         ****         send_str_p(UPLINK_USART, PSTR("READER CANCEL\r\n"));
1124:mdb.c         **** #endif
1125:mdb.c         **** 
1126:mdb.c         ****         // send ACK
1127:mdb.c         ****         send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY);
1128:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
1129:mdb.c         ****         mdb_poll_reply = MDB_REPLY_CANCELED;
1130:mdb.c         ****         mdb_state = MDB_ENABLED;
1131:mdb.c         ****         break;
1132:mdb.c         **** 
1133:mdb.c         ****     // unknown subcommand
1134:mdb.c         ****     default:
1135:mdb.c         ****         send_str_p(UPLINK_USART, PSTR("Error: unknown subcommand [READER]\r\n"));
 2828               		.loc 1 1135 9 is_stmt 0 view .LVU846
 2829 0e84 60E0      		ldi r22,lo8(__c.0)
 2830 0e86 70E0      		ldi r23,hi8(__c.0)
1068:mdb.c         ****     {
 2831               		.loc 1 1068 5 view .LVU847
 2832 0e88 C111      		cpse r28,__zero_reg__
 2833 0e8a 00C0      		rjmp .L104
1072:mdb.c         ****         {
 2834               		.loc 1 1072 9 is_stmt 1 view .LVU848
1074:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 2835               		.loc 1 1074 13 is_stmt 0 view .LVU849
 2836 0e8c 60E0      		ldi r22,lo8(__c.3)
 2837 0e8e 70E0      		ldi r23,hi8(__c.3)
1072:mdb.c         ****         {
 2838               		.loc 1 1072 12 view .LVU850
 2839 0e90 8431      		cpi r24,lo8(20)
 2840 0e92 01F4      		brne .L104
1085:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 2841               		.loc 1 1085 9 is_stmt 1 view .LVU851
 2842 0e94 4091 0000 		lds r20,MDB_USART_TX_READY
 2843 0e98 60E0      		ldi r22,0
 2844 0e9a 71E0      		ldi r23,lo8(1)
 2845 0e9c 81E0      		ldi r24,lo8(1)
 2846 0e9e 0E94 0000 		call send_mdb
 2847               	.LVL200:
1086:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 2848               		.loc 1 1086 9 view .LVU852
1086:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 2849               		.loc 1 1086 24 is_stmt 0 view .LVU853
 2850 0ea2 1092 0000 		sts mdb_active_cmd,__zero_reg__
1087:mdb.c         ****         mdb_state = MDB_DISABLED;
 2851               		.loc 1 1087 9 is_stmt 1 view .LVU854
1087:mdb.c         ****         mdb_state = MDB_DISABLED;
 2852               		.loc 1 1087 24 is_stmt 0 view .LVU855
 2853 0ea6 1092 0000 		sts mdb_poll_reply,__zero_reg__
1088:mdb.c         ****         break;
 2854               		.loc 1 1088 9 is_stmt 1 view .LVU856
1088:mdb.c         ****         break;
 2855               		.loc 1 1088 19 is_stmt 0 view .LVU857
 2856 0eaa 81E0      		ldi r24,lo8(1)
 2857               	.L105:
1109:mdb.c         ****         break;
 2858               		.loc 1 1109 19 view .LVU858
 2859 0eac 8093 0000 		sts mdb_state,r24
1110:mdb.c         **** 
 2860               		.loc 1 1110 9 is_stmt 1 view .LVU859
 2861               	.LVL201:
 2862               	.L96:
 2863               	/* epilogue start */
1136:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
1137:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
1138:mdb.c         ****         return;
1139:mdb.c         ****         break;
1140:mdb.c         ****     }
1141:mdb.c         **** }
 2864               		.loc 1 1141 1 is_stmt 0 view .LVU860
 2865 0eb0 CF91      		pop r28
 2866 0eb2 0895      		ret
 2867               	.LVL202:
 2868               	.L98:
1093:mdb.c         ****         {
 2869               		.loc 1 1093 9 is_stmt 1 view .LVU861
1095:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 2870               		.loc 1 1095 13 is_stmt 0 view .LVU862
 2871 0eb4 60E0      		ldi r22,lo8(__c.2)
 2872 0eb6 70E0      		ldi r23,hi8(__c.2)
1093:mdb.c         ****         {
 2873               		.loc 1 1093 12 view .LVU863
 2874 0eb8 8531      		cpi r24,lo8(21)
 2875 0eba 01F4      		brne .L104
1104:mdb.c         ****         // send ACK
 2876               		.loc 1 1104 9 is_stmt 1 view .LVU864
 2877 0ebc 61E0      		ldi r22,lo8(1)
 2878 0ebe 8CE0      		ldi r24,lo8(12)
 2879 0ec0 0E94 0000 		call txSwitchState
 2880               	.LVL203:
1106:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 2881               		.loc 1 1106 9 view .LVU865
 2882 0ec4 4091 0000 		lds r20,MDB_USART_TX_READY
 2883 0ec8 60E0      		ldi r22,0
 2884 0eca 71E0      		ldi r23,lo8(1)
 2885 0ecc 81E0      		ldi r24,lo8(1)
 2886 0ece 0E94 0000 		call send_mdb
 2887               	.LVL204:
1107:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 2888               		.loc 1 1107 9 view .LVU866
1107:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 2889               		.loc 1 1107 24 is_stmt 0 view .LVU867
 2890 0ed2 1092 0000 		sts mdb_active_cmd,__zero_reg__
1108:mdb.c         ****         mdb_state = MDB_ENABLED;
 2891               		.loc 1 1108 9 is_stmt 1 view .LVU868
1108:mdb.c         ****         mdb_state = MDB_ENABLED;
 2892               		.loc 1 1108 24 is_stmt 0 view .LVU869
 2893 0ed6 1092 0000 		sts mdb_poll_reply,__zero_reg__
1109:mdb.c         ****         break;
 2894               		.loc 1 1109 9 is_stmt 1 view .LVU870
1109:mdb.c         ****         break;
 2895               		.loc 1 1109 19 is_stmt 0 view .LVU871
 2896 0eda 82E0      		ldi r24,lo8(2)
 2897 0edc 00C0      		rjmp .L105
 2898               	.L99:
1114:mdb.c         ****         {
 2899               		.loc 1 1114 9 is_stmt 1 view .LVU872
1116:mdb.c         ****             mdb_active_cmd = MDB_IDLE;
 2900               		.loc 1 1116 13 is_stmt 0 view .LVU873
 2901 0ede 60E0      		ldi r22,lo8(__c.1)
 2902 0ee0 70E0      		ldi r23,hi8(__c.1)
1114:mdb.c         ****         {
 2903               		.loc 1 1114 12 view .LVU874
 2904 0ee2 8631      		cpi r24,lo8(22)
 2905 0ee4 01F4      		brne .L104
1127:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 2906               		.loc 1 1127 9 is_stmt 1 view .LVU875
 2907 0ee6 4091 0000 		lds r20,MDB_USART_TX_READY
 2908 0eea 60E0      		ldi r22,0
 2909 0eec 71E0      		ldi r23,lo8(1)
 2910 0eee 81E0      		ldi r24,lo8(1)
 2911 0ef0 0E94 0000 		call send_mdb
 2912               	.LVL205:
1128:mdb.c         ****         mdb_poll_reply = MDB_REPLY_CANCELED;
 2913               		.loc 1 1128 9 view .LVU876
1128:mdb.c         ****         mdb_poll_reply = MDB_REPLY_CANCELED;
 2914               		.loc 1 1128 24 is_stmt 0 view .LVU877
 2915 0ef4 1092 0000 		sts mdb_active_cmd,__zero_reg__
1129:mdb.c         ****         mdb_state = MDB_ENABLED;
 2916               		.loc 1 1129 9 is_stmt 1 view .LVU878
1129:mdb.c         ****         mdb_state = MDB_ENABLED;
 2917               		.loc 1 1129 24 is_stmt 0 view .LVU879
 2918 0ef8 89E0      		ldi r24,lo8(9)
 2919 0efa 8093 0000 		sts mdb_poll_reply,r24
1130:mdb.c         ****         break;
 2920               		.loc 1 1130 9 is_stmt 1 view .LVU880
1130:mdb.c         ****         break;
 2921               		.loc 1 1130 19 is_stmt 0 view .LVU881
 2922 0efe C093 0000 		sts mdb_state,r28
1131:mdb.c         **** 
 2923               		.loc 1 1131 9 is_stmt 1 view .LVU882
 2924 0f02 00C0      		rjmp .L96
 2925               	.L104:
1135:mdb.c         ****         mdb_active_cmd = MDB_IDLE;
 2926               		.loc 1 1135 9 is_stmt 0 view .LVU883
 2927 0f04 80E0      		ldi r24,0
 2928 0f06 0E94 0000 		call send_str_p
 2929               	.LVL206:
1136:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 2930               		.loc 1 1136 9 is_stmt 1 view .LVU884
1136:mdb.c         ****         mdb_poll_reply = MDB_REPLY_ACK;
 2931               		.loc 1 1136 24 is_stmt 0 view .LVU885
 2932 0f0a 1092 0000 		sts mdb_active_cmd,__zero_reg__
1137:mdb.c         ****         return;
 2933               		.loc 1 1137 9 is_stmt 1 view .LVU886
1137:mdb.c         ****         return;
 2934               		.loc 1 1137 24 is_stmt 0 view .LVU887
 2935 0f0e 1092 0000 		sts mdb_poll_reply,__zero_reg__
1138:mdb.c         ****         break;
 2936               		.loc 1 1138 9 is_stmt 1 view .LVU888
1139:mdb.c         ****     }
 2937               		.loc 1 1139 9 view .LVU889
1138:mdb.c         ****         break;
 2938               		.loc 1 1138 9 is_stmt 0 view .LVU890
 2939 0f12 00C0      		rjmp .L96
 2940               		.cfi_endproc
 2941               	.LFE13:
 2943               	.global	mdb_cmd_handler
 2945               	mdb_cmd_handler:
 2946               	.LFB7:
 103:mdb.c         **** 
 2947               		.loc 1 103 1 is_stmt 1 view -0
 2948               		.cfi_startproc
 2949               	/* prologue: function */
 2950               	/* frame size = 0 */
 2951               	/* stack size = 0 */
 2952               	.L__stack_usage = 0
 105:mdb.c         ****     {
 2953               		.loc 1 105 5 view .LVU892
 2954 0f14 8091 0000 		lds r24,mdb_active_cmd
 2955 0f18 8231      		cpi r24,lo8(18)
 2956 0f1a 01F0      		breq .L107
 2957 0f1c 00F4      		brsh .L108
 2958 0f1e 8031      		cpi r24,lo8(16)
 2959 0f20 01F0      		breq .L109
 2960 0f22 8131      		cpi r24,lo8(17)
 2961 0f24 01F0      		breq .L110
 2962 0f26 8823      		tst r24
 2963 0f28 01F0      		breq .L111
 2964 0f2a 0895      		ret
 2965               	.L108:
 2966 0f2c 8331      		cpi r24,lo8(19)
 2967 0f2e 01F0      		breq .L113
 2968 0f30 8431      		cpi r24,lo8(20)
 2969 0f32 01F0      		breq .L114
 2970 0f34 0895      		ret
 2971               	.L111:
 2972               	.LBB45:
 110:mdb.c         ****             return;
 2973               		.loc 1 110 9 view .LVU893
 110:mdb.c         ****             return;
 2974               		.loc 1 110 13 is_stmt 0 view .LVU894
 2975 0f36 60E0      		ldi r22,0
 2976 0f38 81E0      		ldi r24,lo8(1)
 2977 0f3a 0E94 0000 		call buffer_level
 2978               	.LVL207:
 110:mdb.c         ****             return;
 2979               		.loc 1 110 12 view .LVU895
 2980 0f3e 8230      		cpi r24,lo8(2)
 2981 0f40 00F0      		brlo .L106
 113:mdb.c         **** 
 2982               		.loc 1 113 9 is_stmt 1 view .LVU896
 113:mdb.c         **** 
 2983               		.loc 1 113 25 is_stmt 0 view .LVU897
 2984 0f42 81E0      		ldi r24,lo8(1)
 2985 0f44 0E94 0000 		call recv_mdb
 2986               	.LVL208:
 2987 0f48 9C01      		movw r18,r24
 2988               	.LVL209:
 116:mdb.c         ****         {
 2989               		.loc 1 116 9 is_stmt 1 view .LVU898
 116:mdb.c         ****         {
 2990               		.loc 1 116 12 is_stmt 0 view .LVU899
 2991 0f4a 90FF      		sbrs r25,0
 2992 0f4c 00C0      		rjmp .L106
 116:mdb.c         ****         {
 2993               		.loc 1 116 59 discriminator 1 view .LVU900
 2994 0f4e 41E0      		ldi r20,1
 2995 0f50 9427      		eor r25,r20
 116:mdb.c         ****         {
 2996               		.loc 1 116 37 discriminator 1 view .LVU901
 2997 0f52 4097      		sbiw r24,16
 2998 0f54 0597      		sbiw r24,5
 2999 0f56 00F4      		brsh .L106
 119:mdb.c         **** 
 3000               		.loc 1 119 13 is_stmt 1 view .LVU902
 119:mdb.c         **** 
 3001               		.loc 1 119 28 is_stmt 0 view .LVU903
 3002 0f58 2093 0000 		sts mdb_active_cmd,r18
 121:mdb.c         ****             {
 3003               		.loc 1 121 13 is_stmt 1 view .LVU904
 121:mdb.c         ****             {
 3004               		.loc 1 121 16 is_stmt 0 view .LVU905
 3005 0f5c 9091 0000 		lds r25,reset_done
 3006 0f60 9111      		cpse r25,__zero_reg__
 3007 0f62 00C0      		rjmp .L106
 121:mdb.c         ****             {
 3008               		.loc 1 121 29 discriminator 1 view .LVU906
 3009 0f64 2031      		cpi r18,lo8(16)
 3010 0f66 01F0      		breq .L106
 123:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("resetting\n"));
 3011               		.loc 1 123 17 is_stmt 1 view .LVU907
 123:mdb.c         ****                 send_str_p(UPLINK_USART, PSTR("resetting\n"));
 3012               		.loc 1 123 32 is_stmt 0 view .LVU908
 3013 0f68 1092 0000 		sts mdb_active_cmd,__zero_reg__
 124:mdb.c         ****                 //flag=0,1
 3014               		.loc 1 124 17 is_stmt 1 view .LVU909
 3015               	.LBB46:
 124:mdb.c         ****                 //flag=0,1
 3016               		.loc 1 124 42 view .LVU910
 124:mdb.c         ****                 //flag=0,1
 3017               		.loc 1 124 42 view .LVU911
 3018               	.LBE46:
 124:mdb.c         ****                 //flag=0,1
 3019               		.loc 1 124 17 is_stmt 0 view .LVU912
 3020 0f6c 60E0      		ldi r22,lo8(__c.38)
 3021 0f6e 70E0      		ldi r23,hi8(__c.38)
 3022 0f70 80E0      		ldi r24,0
 3023 0f72 0C94 0000 		jmp send_str_p
 3024               	.LVL210:
 3025               	.L109:
 131:mdb.c         ****         break;
 3026               		.loc 1 131 9 is_stmt 1 view .LVU913
 3027 0f76 0C94 0000 		jmp mdb_reset
 3028               	.LVL211:
 3029               	.L110:
 135:mdb.c         ****         break;
 3030               		.loc 1 135 9 view .LVU914
 3031 0f7a 0C94 0000 		jmp mdb_setup
 3032               	.LVL212:
 3033               	.L107:
 143:mdb.c         ****         break;
 3034               		.loc 1 143 9 view .LVU915
 3035 0f7e 0C94 0000 		jmp mdb_poll
 3036               	.LVL213:
 3037               	.L113:
 147:mdb.c         ****         break;
 3038               		.loc 1 147 9 view .LVU916
 3039 0f82 0C94 0000 		jmp mdb_vend
 3040               	.LVL214:
 3041               	.L114:
 151:mdb.c         ****         break;
 3042               		.loc 1 151 9 view .LVU917
 3043 0f86 0C94 0000 		jmp mdb_reader
 3044               	.LVL215:
 3045               	.L106:
 3046               	/* epilogue start */
 3047               	.LBE45:
 154:mdb.c         **** 
 3048               		.loc 1 154 1 is_stmt 0 view .LVU918
 3049 0f8a 0895      		ret
 3050               		.cfi_endproc
 3051               	.LFE7:
 3053               		.section	.progmem.data,"a",@progbits
 3056               	__c.0:
 3057 0000 4572 726F 		.string	"Error: unknown subcommand [READER]\r\n"
 3057      723A 2075 
 3057      6E6B 6E6F 
 3057      776E 2073 
 3057      7562 636F 
 3060               	__c.1:
 3061 0025 4572 726F 		.string	"Error: checksum error [READER]\r\n"
 3061      723A 2063 
 3061      6865 636B 
 3061      7375 6D20 
 3061      6572 726F 
 3064               	__c.2:
 3065 0046 4572 726F 		.string	"Error: checksum error [READER]\r\n"
 3065      723A 2063 
 3065      6865 636B 
 3065      7375 6D20 
 3065      6572 726F 
 3068               	__c.3:
 3069 0067 4572 726F 		.string	"Error: checksum error [READER]\r\n"
 3069      723A 2063 
 3069      6865 636B 
 3069      7375 6D20 
 3069      6572 726F 
 3072               	__c.4:
 3073 0088 7365 7373 		.string	"session-complete\r\n"
 3073      696F 6E2D 
 3073      636F 6D70 
 3073      6C65 7465 
 3073      0D0A 00
 3076               	__c.5:
 3077 009b 4572 726F 		.string	"Error: invalid checksum [VEND]\r\n"
 3077      723A 2069 
 3077      6E76 616C 
 3077      6964 2063 
 3077      6865 636B 
 3080               	__c.6:
 3081 00bc 7665 6E64 		.string	"vend-failure\r\n"
 3081      2D66 6169 
 3081      6C75 7265 
 3081      0D0A 00
 3084               	__c.7:
 3085 00cb 4572 726F 		.string	"Error: invalid checksum [VEND]\r\n"
 3085      723A 2069 
 3085      6E76 616C 
 3085      6964 2063 
 3085      6865 636B 
 3088               	__c.8:
 3089 00ec 4572 726F 		.string	"Error: invalid checksum [VEND]\r\n"
 3089      723A 2069 
 3089      6E76 616C 
 3089      6964 2063 
 3089      6865 636B 
 3092               	__c.9:
 3093 010d 7665 6E64 		.string	"vend-cancel\r\n"
 3093      2D63 616E 
 3093      6365 6C0D 
 3093      0A00 
 3096               	__c.10:
 3097 011b 4572 726F 		.string	"Error: invalid checksum [VEND]\r\n"
 3097      723A 2069 
 3097      6E76 616C 
 3097      6964 2063 
 3097      6865 636B 
 3100               	__c.11:
 3101 013c 4572 726F 		.string	"Error: invalid checksum [VEND]\r\n"
 3101      723A 2069 
 3101      6E76 616C 
 3101      6964 2063 
 3101      6865 636B 
 3102               		.local	data.12
 3103               		.comm	data.12,6,1
 3104               		.local	state.13
 3105               		.comm	state.13,1,1
 3108               	__c.14:
 3109 015d 4D44 422D 		.string	"MDB-VEND00\r\n"
 3109      5645 4E44 
 3109      3030 0D0A 
 3109      00
 3112               	__c.15:
 3113 016a 4572 726F 		.string	"Error: no ACK received on [REPLY CANCELED]\r\n"
 3113      723A 206E 
 3113      6F20 4143 
 3113      4B20 7265 
 3113      6365 6976 
 3116               	__c.16:
 3117 0197 4572 726F 		.string	"Error: no ACK received on [END SESSION]\r\n"
 3117      723A 206E 
 3117      6F20 4143 
 3117      4B20 7265 
 3117      6365 6976 
 3120               	__c.17:
 3121 01c1 456E 6453 		.string	"EndSession00\r\n"
 3121      6573 7369 
 3121      6F6E 3030 
 3121      0D0A 00
 3124               	__c.18:
 3125 01d0 4572 726F 		.string	"Error: no ACK received on [VEND DENY]\r\n"
 3125      723A 206E 
 3125      6F20 4143 
 3125      4B20 7265 
 3125      6365 6976 
 3128               	__c.19:
 3129 01f8 4572 726F 		.string	"Error: no ACK received on [VEND APPROVE]\r\n"
 3129      723A 206E 
 3129      6F20 4143 
 3129      4B20 7265 
 3129      6365 6976 
 3132               	__c.20:
 3133 0223 4572 726F 		.string	"Error: no ACK received on [SESSION CANCEL REQ]\r\n"
 3133      723A 206E 
 3133      6F20 4143 
 3133      4B20 7265 
 3133      6365 6976 
 3136               	__c.21:
 3137 0254 5365 7373 		.string	"SessionCancelled00\r\n"
 3137      696F 6E43 
 3137      616E 6365 
 3137      6C6C 6564 
 3137      3030 0D0A 
 3140               	__c.22:
 3141 0269 4572 726F 		.string	"Error: no ACK received on [START SESSION]\r\n"
 3141      723A 206E 
 3141      6F20 4143 
 3141      4B20 7265 
 3141      6365 6976 
 3144               	__c.23:
 3145 0295 4265 6769 		.string	"BeginSession00\r\n"
 3145      6E53 6573 
 3145      7369 6F6E 
 3145      3030 0D0A 
 3145      00
 3148               	__c.24:
 3149 02a6 4572 726F 		.string	"Error: no ACK received on [JUST RESET]\r\n"
 3149      723A 206E 
 3149      6F20 4143 
 3149      4B20 7265 
 3149      6365 6976 
 3152               	__c.25:
 3153 02cf 4A75 7374 		.string	"JustREset00\r\n"
 3153      5245 7365 
 3153      7430 300D 
 3153      0A00 
 3156               	__c.26:
 3157 02dd 4143 4B30 		.string	"ACK00\r\n"
 3157      300D 0A00 
 3160               	__c.27:
 3161 02e5 4572 726F 		.string	"Error: Invalid checksum [Poll]\r\n"
 3161      723A 2049 
 3161      6E76 616C 
 3161      6964 2063 
 3161      6865 636B 
 3162               		.local	state.28
 3163               		.comm	state.28,1,1
 3166               	__c.29:
 3167 0306 5365 6E64 		.string	"Sending up stage 3 data\r\n"
 3167      696E 6720 
 3167      7570 2073 
 3167      7461 6765 
 3167      2033 2064 
 3170               	__c.30:
 3171 0320 3032 2049 		.string	"02 IN STAGE3\r\n"
 3171      4E20 5354 
 3171      4147 4533 
 3171      0D0A 00
 3174               	__c.31:
 3175 032f 494E 2053 		.string	"IN STAGE3\r\n"
 3175      5441 4745 
 3175      330D 0A00 
 3178               	__c.32:
 3179 033b 4572 726F 		.string	"Error: unknown subcommand [SETUP]\r\n"
 3179      723A 2075 
 3179      6E6B 6E6F 
 3179      776E 2073 
 3179      7562 636F 
 3182               	__c.33:
 3183 035f 4572 726F 		.string	"Error: no ACK received on [SETUP]"
 3183      723A 206E 
 3183      6F20 4143 
 3183      4B20 7265 
 3183      6365 6976 
 3186               	__c.34:
 3187 0381 4572 726F 		.string	"Error: invalid checksum [SETUP]\r\n"
 3187      723A 2069 
 3187      6E76 616C 
 3187      6964 2063 
 3187      6865 636B 
 3188               		.data
 3191               	checksum.35:
 3192 0000 1100      		.word	17
 3193               		.local	state.36
 3194               		.comm	state.36,1,1
 3195               		.section	.progmem.data,"a",@progbits
 3198               	__c.37:
 3199 03a3 4572 726F 		.string	"Error: invalid checksum for [RESET]\r\n"
 3199      723A 2069 
 3199      6E76 616C 
 3199      6964 2063 
 3199      6865 636B 
 3202               	__c.38:
 3203 03c9 7265 7365 		.string	"resetting\n"
 3203      7474 696E 
 3203      670A 00
 3204               	.global	session
 3205               		.section .bss
 3208               	session:
 3209 0000 0000 0000 		.zero	7
 3209      0000 00
 3210               	.global	s3d
 3211               		.data
 3214               	s3d:
 3215 0002 09        		.byte	9
 3216 0003 4E        		.byte	78
 3217 0004 59        		.byte	89
 3218 0005 58        		.byte	88
 3219 0006 30        		.byte	48
 3220 0007 30        		.byte	48
 3221 0008 30        		.byte	48
 3222 0009 30        		.byte	48
 3223 000a 30        		.byte	48
 3224 000b 30        		.byte	48
 3225 000c 32        		.byte	50
 3226 000d 36        		.byte	54
 3227 000e 33        		.byte	51
 3228 000f 33        		.byte	51
 3229 0010 32        		.byte	50
 3230 0011 30        		.byte	48
 3231 0012 44        		.byte	68
 3232 0013 4D        		.byte	77
 3233 0014 58        		.byte	88
 3234 0015 20        		.byte	32
 3235 0016 2D        		.byte	45
 3236 0017 20        		.byte	32
 3237 0018 32        		.byte	50
 3238 0019 30        		.byte	48
 3239 001a 31        		.byte	49
 3240 001b 31        		.byte	49
 3241 001c 20        		.byte	32
 3242 001d 20        		.byte	32
 3243 001e 01        		.byte	1
 3244 001f 00        		.byte	0
 3245 0020 B301      		.word	435
 3246               	.global	s3dT
 3247               		.section .bss
 3250               	s3dT:
 3251 0007 00        		.zero	1
 3252               	.global	cd
 3253               		.data
 3256               	cd:
 3257 0022 01        		.byte	1
 3258 0023 02        		.byte	2
 3259 0024 CA01      		.word	458
 3260 0026 01        		.byte	1
 3261 0027 00        		.byte	0
 3262 0028 07        		.byte	7
 3263 0029 0D        		.byte	13
 3264               	.global	m
 3265               		.section .bss
 3268               	m:
 3269 0008 0000      		.zero	2
 3270               	.global	price
 3273               	price:
 3274 000a 0000 0000 		.zero	4
 3275               	.global	vmc
 3278               	vmc:
 3279 000e 0000 0000 		.zero	4
 3280               	.global	reset_done
 3283               	reset_done:
 3284 0012 00        		.zero	1
 3285               	.global	mdb_active_cmd
 3288               	mdb_active_cmd:
 3289 0013 00        		.zero	1
 3290               	.global	mdb_poll_reply
 3293               	mdb_poll_reply:
 3294 0014 00        		.zero	1
 3295               	.global	mdb_state
 3298               	mdb_state:
 3299 0015 00        		.zero	1
 3300               	.global	MDB_USART_TX_READY
 3301               		.data
 3304               	MDB_USART_TX_READY:
 3305 002a 01        		.byte	1
 3306               		.text
 3307               	.Letext0:
 3308               		.file 2 "/usr/avr/include/stdint.h"
 3309               		.file 3 "mdb.h"
 3310               		.file 4 "vendSessionStates.h"
 3311               		.file 5 "usart.h"
 3312               		.file 6 "/usr/avr/include/stdio.h"
 3313               		.file 7 "txSwitch.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 mdb.c
     /tmp/ccUUC7Sm.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccUUC7Sm.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccUUC7Sm.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccUUC7Sm.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccUUC7Sm.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccUUC7Sm.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccUUC7Sm.s:13     .text:0000000000000000 statePos
     /tmp/ccUUC7Sm.s:3268   .bss:0000000000000008 m
     /tmp/ccUUC7Sm.s:33     .text:000000000000000a mdb_reset
     /tmp/ccUUC7Sm.s:3288   .bss:0000000000000013 mdb_active_cmd
     /tmp/ccUUC7Sm.s:3293   .bss:0000000000000014 mdb_poll_reply
     /tmp/ccUUC7Sm.s:3198   .progmem.data:00000000000003a3 __c.37
     /tmp/ccUUC7Sm.s:3278   .bss:000000000000000e vmc
     /tmp/ccUUC7Sm.s:3273   .bss:000000000000000a price
     /tmp/ccUUC7Sm.s:3304   .data:000000000000002a MDB_USART_TX_READY
     /tmp/ccUUC7Sm.s:3283   .bss:0000000000000012 reset_done
     /tmp/ccUUC7Sm.s:3298   .bss:0000000000000015 mdb_state
     /tmp/ccUUC7Sm.s:135    .text:0000000000000074 mdb_stage3
     /tmp/ccUUC7Sm.s:3174   .progmem.data:000000000000032f __c.31
     /tmp/ccUUC7Sm.s:3170   .progmem.data:0000000000000320 __c.30
     /tmp/ccUUC7Sm.s:3166   .progmem.data:0000000000000306 __c.29
     /tmp/ccUUC7Sm.s:3214   .data:0000000000000002 s3d
     /tmp/ccUUC7Sm.s:593    .text:0000000000000358 mdb_setup
     /tmp/ccUUC7Sm.s:3163   .bss:000000000000001e state.36
     /tmp/ccUUC7Sm.s:3191   .data:0000000000000000 checksum.35
     /tmp/ccUUC7Sm.s:3186   .progmem.data:0000000000000381 __c.34
     /tmp/ccUUC7Sm.s:3256   .data:0000000000000022 cd
     /tmp/ccUUC7Sm.s:3182   .progmem.data:000000000000035f __c.33
     /tmp/ccUUC7Sm.s:3178   .progmem.data:000000000000033b __c.32
     /tmp/ccUUC7Sm.s:1170   .text:00000000000006a2 mdb_poll
     /tmp/ccUUC7Sm.s:3105   .bss:000000000000001d state.28
     /tmp/ccUUC7Sm.s:3160   .progmem.data:00000000000002e5 __c.27
     /tmp/ccUUC7Sm.s:3156   .progmem.data:00000000000002dd __c.26
     /tmp/ccUUC7Sm.s:3152   .progmem.data:00000000000002cf __c.25
     /tmp/ccUUC7Sm.s:3148   .progmem.data:00000000000002a6 __c.24
     /tmp/ccUUC7Sm.s:3208   .bss:0000000000000000 session
     /tmp/ccUUC7Sm.s:3144   .progmem.data:0000000000000295 __c.23
     /tmp/ccUUC7Sm.s:3140   .progmem.data:0000000000000269 __c.22
     /tmp/ccUUC7Sm.s:3136   .progmem.data:0000000000000254 __c.21
     /tmp/ccUUC7Sm.s:3132   .progmem.data:0000000000000223 __c.20
     /tmp/ccUUC7Sm.s:3128   .progmem.data:00000000000001f8 __c.19
     /tmp/ccUUC7Sm.s:3124   .progmem.data:00000000000001d0 __c.18
     /tmp/ccUUC7Sm.s:3120   .progmem.data:00000000000001c1 __c.17
     /tmp/ccUUC7Sm.s:3116   .progmem.data:0000000000000197 __c.16
     /tmp/ccUUC7Sm.s:3112   .progmem.data:000000000000016a __c.15
     /tmp/ccUUC7Sm.s:2040   .text:0000000000000afc mdb_vend
     /tmp/ccUUC7Sm.s:3108   .progmem.data:000000000000015d __c.14
     /tmp/ccUUC7Sm.s:3103   .bss:000000000000001c state.13
                             .bss:0000000000000016 data.12
     /tmp/ccUUC7Sm.s:3100   .progmem.data:000000000000013c __c.11
     /tmp/ccUUC7Sm.s:3096   .progmem.data:000000000000011b __c.10
     /tmp/ccUUC7Sm.s:3092   .progmem.data:000000000000010d __c.9
     /tmp/ccUUC7Sm.s:3088   .progmem.data:00000000000000ec __c.8
     /tmp/ccUUC7Sm.s:3084   .progmem.data:00000000000000cb __c.7
     /tmp/ccUUC7Sm.s:3080   .progmem.data:00000000000000bc __c.6
     /tmp/ccUUC7Sm.s:3076   .progmem.data:000000000000009b __c.5
     /tmp/ccUUC7Sm.s:3072   .progmem.data:0000000000000088 __c.4
     /tmp/ccUUC7Sm.s:2782   .text:0000000000000e60 mdb_reader
     /tmp/ccUUC7Sm.s:3056   .progmem.data:0000000000000000 __c.0
     /tmp/ccUUC7Sm.s:3068   .progmem.data:0000000000000067 __c.3
     /tmp/ccUUC7Sm.s:3064   .progmem.data:0000000000000046 __c.2
     /tmp/ccUUC7Sm.s:3060   .progmem.data:0000000000000025 __c.1
     /tmp/ccUUC7Sm.s:2945   .text:0000000000000f14 mdb_cmd_handler
     /tmp/ccUUC7Sm.s:3202   .progmem.data:00000000000003c9 __c.38
     /tmp/ccUUC7Sm.s:3250   .bss:0000000000000007 s3dT

UNDEFINED SYMBOLS
buffer_level
recv_mdb
send_str_p
send_mdb
sprintf
send_str
__tablejump2__
txSwitchState
vendStateT
__do_copy_data
__do_clear_bss
