
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000058c  00800200  000033e6  0000347a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000033e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005e  0080078c  0080078c  00003a06  2**0
                  ALLOC
  3 .comment      00000024  00000000  00000000  00003a06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a2c  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000120  00000000  00000000  00003a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000056b0  00000000  00000000  00003b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00001ba5  00000000  00000000  0000923c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   000045fa  00000000  00000000  0000ade1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  0000092c  00000000  00000000  0000f3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00000dfc  00000000  00000000  0000fd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00002409  00000000  00000000  00010b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000090  00000000  00000000  00012f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 42 05 	jmp	0xa84	; 0xa84 <__ctors_end>
       4:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
       8:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
       c:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      10:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      14:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      18:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      1c:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      20:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      24:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      28:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      2c:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      30:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      34:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__vector_13>
      38:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      3c:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      40:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      44:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      48:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      4c:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      50:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      54:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      58:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      5c:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      60:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      64:	0c 94 74 07 	jmp	0xee8	; 0xee8 <__vector_25>
      68:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__vector_26>
      6c:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      70:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      74:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      78:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      7c:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      80:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      84:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      88:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      8c:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      90:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__vector_36>
      94:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__vector_37>
      98:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      9c:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      a0:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      a4:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      a8:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      ac:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      b0:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      b4:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      b8:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      bc:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      c0:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      c4:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      c8:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      cc:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__vector_51>
      d0:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__vector_52>
      d4:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      d8:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      dc:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>
      e0:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__bad_interrupt>

000000e4 <__trampolines_start>:
      e4:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <mdb_poll+0x96>
      e8:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <cmd_help>
      ec:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <cmd_get_mdb_state+0x2c>
      f0:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <vendInvoker>
      f4:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <mdb_poll+0x336>
      f8:	0c 94 20 13 	jmp	0x2640	; 0x2640 <cmd_approve_vend>
      fc:	0c 94 3d 11 	jmp	0x227a	; 0x227a <cmd_get_mdb_state+0x32>
     100:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <cmd_reset>
     104:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <mdb_poll+0xf6>
     108:	0c 94 49 12 	jmp	0x2492	; 0x2492 <cmd_start_session>
     10c:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <cmd_cancel_session>
     110:	0c 94 34 11 	jmp	0x2268	; 0x2268 <cmd_get_mdb_state+0x20>
     114:	0c 94 86 0d 	jmp	0x1b0c	; 0x1b0c <mdb_poll+0x210>
     118:	0c 94 2f 11 	jmp	0x225e	; 0x225e <cmd_get_mdb_state+0x16>
     11c:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <mdb_poll+0x154>
     120:	0c 94 24 11 	jmp	0x2248	; 0x2248 <cmd_get_mdb_state>
     124:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <mdb_poll+0x40a>
     128:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <mdb_poll+0x282>
     12c:	0c 94 56 0e 	jmp	0x1cac	; 0x1cac <mdb_poll+0x3b0>
     130:	0c 94 37 11 	jmp	0x226e	; 0x226e <cmd_get_mdb_state+0x26>
     134:	0c 94 40 11 	jmp	0x2280	; 0x2280 <cmd_get_mdb_state+0x38>
     138:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <mdb_poll+0x60>
     13c:	0c 94 43 11 	jmp	0x2286	; 0x2286 <cmd_get_mdb_state+0x3e>
     140:	0c 94 c4 0c 	jmp	0x1988	; 0x1988 <mdb_poll+0x8c>
     144:	0c 94 75 12 	jmp	0x24ea	; 0x24ea <cmd_info>
     148:	0c 94 47 11 	jmp	0x228e	; 0x228e <cmd_io>
     14c:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <cmd_deny_vend>

00000150 <__c.0>:
     150:	35 73 20 50 61 73 73 65 64 0d 0a 00                 5s Passed...

0000015c <__c.2>:
     15c:	4d 44 42 20 41 72 64 75 69 6e 6f 20 4d 65 67 61     MDB Arduino Mega
     16c:	20 69 73 20 53 65 74 74 69 6e 67 20 55 70 0d 0a      is Setting Up..
	...

0000017d <__c.0>:
     17d:	45 72 72 6f 72 3a 20 75 6e 6b 6e 6f 77 6e 20 73     Error: unknown s
     18d:	75 62 63 6f 6d 6d 61 6e 64 20 5b 52 45 41 44 45     ubcommand [READE
     19d:	52 5d 0d 0a 00                                      R]...

000001a2 <__c.1>:
     1a2:	45 72 72 6f 72 3a 20 63 68 65 63 6b 73 75 6d 20     Error: checksum 
     1b2:	65 72 72 6f 72 20 5b 52 45 41 44 45 52 5d 0d 0a     error [READER]..
	...

000001c3 <__c.2>:
     1c3:	45 72 72 6f 72 3a 20 63 68 65 63 6b 73 75 6d 20     Error: checksum 
     1d3:	65 72 72 6f 72 20 5b 52 45 41 44 45 52 5d 0d 0a     error [READER]..
	...

000001e4 <__c.3>:
     1e4:	45 72 72 6f 72 3a 20 63 68 65 63 6b 73 75 6d 20     Error: checksum 
     1f4:	65 72 72 6f 72 20 5b 52 45 41 44 45 52 5d 0d 0a     error [READER]..
	...

00000205 <__c.4>:
     205:	73 65 73 73 69 6f 6e 2d 63 6f 6d 70 6c 65 74 65     session-complete
     215:	0d 0a 00                                            ...

00000218 <__c.5>:
     218:	45 72 72 6f 72 3a 20 69 6e 76 61 6c 69 64 20 63     Error: invalid c
     228:	68 65 63 6b 73 75 6d 20 5b 56 45 4e 44 5d 0d 0a     hecksum [VEND]..
	...

00000239 <__c.6>:
     239:	76 65 6e 64 2d 66 61 69 6c 75 72 65 0d 0a 00        vend-failure...

00000248 <__c.7>:
     248:	45 72 72 6f 72 3a 20 69 6e 76 61 6c 69 64 20 63     Error: invalid c
     258:	68 65 63 6b 73 75 6d 20 5b 56 45 4e 44 5d 0d 0a     hecksum [VEND]..
	...

00000269 <__c.8>:
     269:	45 72 72 6f 72 3a 20 69 6e 76 61 6c 69 64 20 63     Error: invalid c
     279:	68 65 63 6b 73 75 6d 20 5b 56 45 4e 44 5d 0d 0a     hecksum [VEND]..
	...

0000028a <__c.9>:
     28a:	76 65 6e 64 2d 63 61 6e 63 65 6c 0d 0a 00           vend-cancel...

00000298 <__c.10>:
     298:	45 72 72 6f 72 3a 20 69 6e 76 61 6c 69 64 20 63     Error: invalid c
     2a8:	68 65 63 6b 73 75 6d 20 5b 56 45 4e 44 5d 0d 0a     hecksum [VEND]..
	...

000002b9 <__c.11>:
     2b9:	45 72 72 6f 72 3a 20 69 6e 76 61 6c 69 64 20 63     Error: invalid c
     2c9:	68 65 63 6b 73 75 6d 20 5b 56 45 4e 44 5d 0d 0a     hecksum [VEND]..
	...

000002da <__c.14>:
     2da:	4d 44 42 2d 56 45 4e 44 30 30 0d 0a 00              MDB-VEND00...

000002e7 <__c.15>:
     2e7:	45 72 72 6f 72 3a 20 6e 6f 20 41 43 4b 20 72 65     Error: no ACK re
     2f7:	63 65 69 76 65 64 20 6f 6e 20 5b 52 45 50 4c 59     ceived on [REPLY
     307:	20 43 41 4e 43 45 4c 45 44 5d 0d 0a 00               CANCELED]...

00000314 <__c.16>:
     314:	45 72 72 6f 72 3a 20 6e 6f 20 41 43 4b 20 72 65     Error: no ACK re
     324:	63 65 69 76 65 64 20 6f 6e 20 5b 45 4e 44 20 53     ceived on [END S
     334:	45 53 53 49 4f 4e 5d 0d 0a 00                       ESSION]...

0000033e <__c.17>:
     33e:	45 6e 64 53 65 73 73 69 6f 6e 30 30 0d 0a 00        EndSession00...

0000034d <__c.18>:
     34d:	45 72 72 6f 72 3a 20 6e 6f 20 41 43 4b 20 72 65     Error: no ACK re
     35d:	63 65 69 76 65 64 20 6f 6e 20 5b 56 45 4e 44 20     ceived on [VEND 
     36d:	44 45 4e 59 5d 0d 0a 00                             DENY]...

00000375 <__c.19>:
     375:	45 72 72 6f 72 3a 20 6e 6f 20 41 43 4b 20 72 65     Error: no ACK re
     385:	63 65 69 76 65 64 20 6f 6e 20 5b 56 45 4e 44 20     ceived on [VEND 
     395:	41 50 50 52 4f 56 45 5d 0d 0a 00                    APPROVE]...

000003a0 <__c.20>:
     3a0:	45 72 72 6f 72 3a 20 6e 6f 20 41 43 4b 20 72 65     Error: no ACK re
     3b0:	63 65 69 76 65 64 20 6f 6e 20 5b 53 45 53 53 49     ceived on [SESSI
     3c0:	4f 4e 20 43 41 4e 43 45 4c 20 52 45 51 5d 0d 0a     ON CANCEL REQ]..
	...

000003d1 <__c.21>:
     3d1:	53 65 73 73 69 6f 6e 43 61 6e 63 65 6c 6c 65 64     SessionCancelled
     3e1:	30 30 0d 0a 00                                      00...

000003e6 <__c.22>:
     3e6:	45 72 72 6f 72 3a 20 6e 6f 20 41 43 4b 20 72 65     Error: no ACK re
     3f6:	63 65 69 76 65 64 20 6f 6e 20 5b 53 54 41 52 54     ceived on [START
     406:	20 53 45 53 53 49 4f 4e 5d 0d 0a 00                  SESSION]...

00000412 <__c.23>:
     412:	42 65 67 69 6e 53 65 73 73 69 6f 6e 30 30 0d 0a     BeginSession00..
	...

00000423 <__c.24>:
     423:	45 72 72 6f 72 3a 20 6e 6f 20 41 43 4b 20 72 65     Error: no ACK re
     433:	63 65 69 76 65 64 20 6f 6e 20 5b 4a 55 53 54 20     ceived on [JUST 
     443:	52 45 53 45 54 5d 0d 0a 00                          RESET]...

0000044c <__c.25>:
     44c:	4a 75 73 74 52 45 73 65 74 30 30 0d 0a 00           JustREset00...

0000045a <__c.26>:
     45a:	41 43 4b 30 30 0d 0a 00                             ACK00...

00000462 <__c.27>:
     462:	45 72 72 6f 72 3a 20 49 6e 76 61 6c 69 64 20 63     Error: Invalid c
     472:	68 65 63 6b 73 75 6d 20 5b 50 6f 6c 6c 5d 0d 0a     hecksum [Poll]..
	...

00000483 <__c.29>:
     483:	53 65 6e 64 69 6e 67 20 75 70 20 73 74 61 67 65     Sending up stage
     493:	20 33 20 64 61 74 61 0d 0a 00                        3 data...

0000049d <__c.30>:
     49d:	30 32 20 49 4e 20 53 54 41 47 45 33 0d 0a 00        02 IN STAGE3...

000004ac <__c.31>:
     4ac:	49 4e 20 53 54 41 47 45 33 0d 0a 00                 IN STAGE3...

000004b8 <__c.32>:
     4b8:	45 72 72 6f 72 3a 20 75 6e 6b 6e 6f 77 6e 20 73     Error: unknown s
     4c8:	75 62 63 6f 6d 6d 61 6e 64 20 5b 53 45 54 55 50     ubcommand [SETUP
     4d8:	5d 0d 0a 00                                         ]...

000004dc <__c.33>:
     4dc:	45 72 72 6f 72 3a 20 6e 6f 20 41 43 4b 20 72 65     Error: no ACK re
     4ec:	63 65 69 76 65 64 20 6f 6e 20 5b 53 45 54 55 50     ceived on [SETUP
     4fc:	5d 00                                               ].

000004fe <__c.34>:
     4fe:	45 72 72 6f 72 3a 20 69 6e 76 61 6c 69 64 20 63     Error: invalid c
     50e:	68 65 63 6b 73 75 6d 20 5b 53 45 54 55 50 5d 0d     hecksum [SETUP].
     51e:	0a 00                                               ..

00000520 <__c.37>:
     520:	45 72 72 6f 72 3a 20 69 6e 76 61 6c 69 64 20 63     Error: invalid c
     530:	68 65 63 6b 73 75 6d 20 66 6f 72 20 5b 52 45 53     hecksum for [RES
     540:	45 54 5d 0d 0a 00                                   ET]...

00000546 <__c.38>:
     546:	72 65 73 65 74 74 69 6e 67 0a 00                    resetting..

00000551 <__c.0>:
     551:	45 72 72 6f 72 3a 20 4d 61 74 65 44 65 61 6c 65     Error: MateDeale
     561:	72 20 69 73 20 6e 6f 74 20 69 6e 20 61 20 73 75     r is not in a su
     571:	69 74 61 62 6c 65 20 73 74 61 74 65 20 74 6f 20     itable state to 
     581:	63 61 6e 63 65 6c 20 61 20 73 65 73 73 69 6f 6e     cancel a session
     591:	0d 0a 00                                            ...

00000594 <__c.1>:
     594:	45 72 72 6f 72 3a 20 4d 61 74 65 44 65 61 6c 65     Error: MateDeale
     5a4:	72 20 69 73 20 6e 6f 74 20 69 6e 20 61 20 73 75     r is not in a su
     5b4:	69 74 61 62 6c 65 20 73 74 61 74 65 20 74 6f 20     itable state to 
     5c4:	64 65 6e 79 20 61 20 76 65 6e 64 0d 0a 00           deny a vend...

000005d2 <__c.2>:
     5d2:	45 72 72 6f 72 3a 20 4d 61 74 65 44 65 61 6c 65     Error: MateDeale
     5e2:	72 20 69 73 20 6e 6f 74 20 69 6e 20 61 20 73 75     r is not in a su
     5f2:	69 74 61 62 6c 65 20 73 74 61 74 65 20 74 6f 20     itable state to 
     602:	61 70 70 72 6f 76 65 20 61 20 76 65 6e 64 0d 0a     approve a vend..
	...

00000613 <__c.3>:
     613:	45 72 72 6f 72 3a 20 4d 61 74 65 44 65 61 6c 65     Error: MateDeale
     623:	72 20 6e 6f 74 20 72 65 61 64 79 20 66 6f 72 20     r not ready for 
     633:	61 20 73 65 73 73 69 6f 6e 0d 0a 00                 a session...

0000063f <__c.4>:
     63f:	45 72 72 6f 72 3a 20 53 65 73 73 69 6f 6e 20 69     Error: Session i
     64f:	73 20 61 6c 72 65 61 64 79 20 72 75 6e 6e 69 6e     s already runnin
     65f:	67 0d 0a 00                                         g...

00000663 <__c.5>:
     663:	63 6d 64 20 73 74 61 72 74 20 73 65 73 73 69 6f     cmd start sessio
     673:	6e 30 30 00                                         n00.

00000677 <__c.6>:
     677:	40 53 74 61 74 65 3a 20 4e 45 47 41 54 49 56 45     @State: NEGATIVE
     687:	20 56 45 4e 44 2a 0d 0a 00                           VEND*...

00000690 <__c.7>:
     690:	40 53 74 61 74 65 3a 20 52 45 56 41 4c 55 45 2a     @State: REVALUE*
     6a0:	0d 0a 00                                            ...

000006a3 <__c.8>:
     6a3:	40 53 74 61 74 65 3a 20 56 45 4e 44 2a 0d 0a 00     @State: VEND*...

000006b3 <__c.9>:
     6b3:	40 53 74 61 74 65 3a 20 53 45 53 53 49 4f 4e 20     @State: SESSION 
     6c3:	49 44 4c 45 2a 0d 0a 00                             IDLE*...

000006cb <__c.10>:
     6cb:	40 53 74 61 74 65 3a 20 45 4e 41 42 4c 45 44 2a     @State: ENABLED*
     6db:	0d 0a 00                                            ...

000006de <__c.11>:
     6de:	40 53 74 61 74 65 3a 20 44 49 53 41 42 4c 45 44     @State: DISABLED
     6ee:	2a 0d 0a 00                                         *...

000006f2 <__c.12>:
     6f2:	40 53 74 61 74 65 3a 20 49 4e 41 43 54 49 56 45     @State: INACTIVE
     702:	2a 0d 0a 00                                         *...

00000706 <__c.13>:
     706:	45 72 72 6f 72 3a 20 53 65 74 75 70 20 6e 6f 74     Error: Setup not
     716:	20 79 65 74 20 63 6f 6d 70 6c 65 74 65 64 21 0d      yet completed!.
     726:	0a 00                                               ..

00000728 <__c.14>:
     728:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     738:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     748:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2a     ---------------*
     758:	0d 0a 00                                            ...

0000075b <__c.15>:
     75b:	23 23 20 20 20 20 56 4d 43 20 70 72 69 63 65 20     ##    VMC price 
     76b:	72 61 6e 67 65 20 20 20 20 20 23 23 0d 0a 00        range     ##...

0000077a <__c.16>:
     77a:	23 23 20 56 4d 43 20 63 6f 6e 66 69 67 75 72 61     ## VMC configura
     78a:	74 69 6f 6e 20 64 61 74 61 20 23 23 0d 0a 00        tion data ##...

00000799 <__c.17>:
     799:	40 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     @---------------
     7a9:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     7b9:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     7c9:	0d 0a 00                                            ...

000007cc <__c.18>:
     7cc:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     7dc:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     7ec:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 0d     ---------------.
     7fc:	0a 00                                               ..

000007fe <__c.19>:
     7fe:	64 65 6e 79 2d 76 65 6e 64 3a 0d 0a 20 20 20 64     deny-vend:..   d
     80e:	65 6e 69 65 73 20 61 20 76 65 6e 64 20 72 65 71     enies a vend req
     81e:	75 65 73 74 2e 0d 0a 00                             uest....

00000826 <__c.20>:
     826:	61 70 70 72 6f 76 65 2d 76 65 6e 64 20 3c 76 65     approve-vend <ve
     836:	6e 64 2d 61 6d 6f 75 6e 74 3e 3a 0d 0a 20 20 20     nd-amount>:..   
     846:	61 70 70 72 6f 76 65 73 20 61 20 76 65 6e 64 20     approves a vend 
     856:	72 65 71 75 65 73 74 20 77 69 74 68 20 3c 76 65     request with <ve
     866:	6e 64 2d 61 6d 6f 75 6e 74 3e 20 45 75 72 6f 20     nd-amount> Euro 
     876:	43 65 6e 74 73 2e 0d 0a 00                          Cents....

0000087f <__c.21>:
     87f:	73 74 61 72 74 2d 73 65 73 73 69 6f 6e 20 3c 66     start-session <f
     88f:	75 6e 64 73 3e 3a 0d 0a 20 20 20 73 74 61 72 74     unds>:..   start
     89f:	73 20 61 20 73 65 73 73 69 6f 6e 20 77 69 74 68     s a session with
     8af:	20 3c 66 75 6e 64 73 3e 20 45 75 72 6f 20 43 65      <funds> Euro Ce
     8bf:	6e 74 73 2e 0d 0a 00                                nts....

000008c6 <__c.22>:
     8c6:	6d 64 62 2d 73 74 61 74 65 3a 0d 0a 20 20 20 64     mdb-state:..   d
     8d6:	69 73 70 6c 61 79 73 20 74 68 65 20 63 75 72 72     isplays the curr
     8e6:	65 6e 74 20 4d 44 42 20 73 74 61 74 65 2e 0d 0a     ent MDB state...
	...

000008f7 <__c.23>:
     8f7:	69 6e 66 6f 3a 0d 0a 20 20 20 73 68 6f 77 73 20     info:..   shows 
     907:	74 68 65 20 56 4d 43 20 69 6e 66 6f 73 20 74 72     the VMC infos tr
     917:	61 6e 73 66 65 72 65 64 20 64 75 72 69 6e 67 20     ansfered during 
     927:	74 68 65 20 73 65 74 75 70 20 70 72 6f 63 65 73     the setup proces
     937:	73 0d 0a 00                                         s...

0000093b <__c.24>:
     93b:	72 65 73 65 74 3a 0d 0a 20 20 20 72 65 73 65 74     reset:..   reset
     94b:	20 74 68 65 20 41 72 64 75 69 6e 6f 0d 0a 00         the Arduino...

0000095a <__c.25>:
     95a:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     96a:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     97a:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 0d     ---------------.
     98a:	0a 00                                               ..

0000098c <__c.26>:
     98c:	40 76 65 6e 64 2d 66 61 69 6c 65 64 2a 0d 0a 00     @vend-failed*...

0000099c <__c.27>:
     99c:	40 76 65 6e 64 2d 73 75 63 63 65 73 73 2a 0d 0a     @vend-success*..
	...

000009ad <__c.28>:
     9ad:	40 76 65 6e 64 2d 73 75 63 63 65 73 73 2a 0d 0a     @vend-success*..
	...

000009be <__c.29>:
     9be:	40 49 4f 3a 20 50 4c 41 59 34 2a 0d 0a 00           @IO: PLAY4*...

000009cc <__c.30>:
     9cc:	40 49 4f 3a 20 50 4c 41 59 33 2a 0d 0a 00           @IO: PLAY3*...

000009da <__c.31>:
     9da:	40 50 4f 3a 20 50 49 4e 31 32 20 4f 4e 2a 0d 0a     @PO: PIN12 ON*..
	...

000009eb <__c.32>:
     9eb:	40 49 4f 3a 20 50 49 4e 31 32 20 4f 46 46 2a 0d     @IO: PIN12 OFF*.
     9fb:	0a 00                                               ..

000009fd <__c.33>:
     9fd:	40 52 45 53 45 54 54 49 4e 47 20 44 45 56 49 43     @RESETTING DEVIC
     a0d:	45 2a 0d 0a 00                                      E*...

00000a12 <__c.34>:
     a12:	45 72 72 6f 72 3a 20 55 6e 6b 6e 6f 77 6e 20 63     Error: Unknown c
     a22:	6f 6d 6d 61 6e 64 0d 0a 00                          ommand...

00000a2b <__c.0>:
     a2b:	53 65 74 74 69 6e 67 55 70 20 54 78 20 53 77 69     SettingUp Tx Swi
     a3b:	74 63 68 0d 0a 00                                   tch...

00000a41 <__c.0>:
     a41:	4c 41 53 54 20 73 74 61 74 65 20 77 61 73 20 46     LAST state was F
     a51:	61 69 6c 65 64 0d 0a 00                             ailed...

00000a59 <__c.1>:
     a59:	56 45 4e 44 20 53 45 53 53 49 4f 4e 20 43 4f 4d     VEND SESSION COM
     a69:	50 4c 45 54 45 0d 0a 00                             PLETE...

00000a71 <__c.2>:
     a71:	4c 41 53 54 20 73 74 61 74 65 20 77 61 73 20 30     LAST state was 0
     a81:	0d 0a 00                                            ...

00000a84 <__ctors_end>:
     a84:	11 24       	eor	r1, r1
     a86:	1f be       	out	0x3f, r1	; 63
     a88:	cf ef       	ldi	r28, 0xFF	; 255
     a8a:	d1 e2       	ldi	r29, 0x21	; 33
     a8c:	de bf       	out	0x3e, r29	; 62
     a8e:	cd bf       	out	0x3d, r28	; 61
     a90:	00 e0       	ldi	r16, 0x00	; 0
     a92:	0c bf       	out	0x3c, r16	; 60

00000a94 <__do_copy_data>:
     a94:	17 e0       	ldi	r17, 0x07	; 7
     a96:	a0 e0       	ldi	r26, 0x00	; 0
     a98:	b2 e0       	ldi	r27, 0x02	; 2
     a9a:	e6 ee       	ldi	r30, 0xE6	; 230
     a9c:	f3 e3       	ldi	r31, 0x33	; 51
     a9e:	00 e0       	ldi	r16, 0x00	; 0
     aa0:	0b bf       	out	0x3b, r16	; 59
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <__do_copy_data+0x14>
     aa4:	07 90       	elpm	r0, Z+
     aa6:	0d 92       	st	X+, r0
     aa8:	ac 38       	cpi	r26, 0x8C	; 140
     aaa:	b1 07       	cpc	r27, r17
     aac:	d9 f7       	brne	.-10     	; 0xaa4 <__do_copy_data+0x10>

00000aae <__do_clear_bss>:
     aae:	27 e0       	ldi	r18, 0x07	; 7
     ab0:	ac e8       	ldi	r26, 0x8C	; 140
     ab2:	b7 e0       	ldi	r27, 0x07	; 7
     ab4:	01 c0       	rjmp	.+2      	; 0xab8 <.do_clear_bss_start>

00000ab6 <.do_clear_bss_loop>:
     ab6:	1d 92       	st	X+, r1

00000ab8 <.do_clear_bss_start>:
     ab8:	aa 3e       	cpi	r26, 0xEA	; 234
     aba:	b2 07       	cpc	r27, r18
     abc:	e1 f7       	brne	.-8      	; 0xab6 <.do_clear_bss_loop>
     abe:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <main>
     ac2:	0c 94 e0 19 	jmp	0x33c0	; 0x33c0 <_exit>

00000ac6 <__bad_interrupt>:
     ac6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000aca <setup_usart>:
    {{{{}, 0, 0}, {{}, 0, 0}}, &UBRR3H, &UBRR3L, &UCSR3B, &UCSR3C}
#endif
};

void setup_usart(uint8_t usart_number, uint32_t baudrate, uint8_t framelength, uint8_t parity, uint8_t stopbits)
{
     aca:	7f 92       	push	r7
     acc:	8f 92       	push	r8
     ace:	9f 92       	push	r9
     ad0:	af 92       	push	r10
     ad2:	bf 92       	push	r11
     ad4:	cf 92       	push	r12
     ad6:	df 92       	push	r13
     ad8:	ef 92       	push	r14
     ada:	ff 92       	push	r15
     adc:	0f 93       	push	r16
     ade:	1f 93       	push	r17
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	18 2f       	mov	r17, r24
     ae6:	4a 01       	movw	r8, r20
     ae8:	5b 01       	movw	r10, r22
     aea:	c2 2f       	mov	r28, r18
     aec:	7e 2c       	mov	r7, r14

    /* calculate and set the baudrate */
    uint16_t baud = (F_CPU / 8 / baudrate - 1) / 2;
     aee:	60 e8       	ldi	r22, 0x80	; 128
     af0:	74 e8       	ldi	r23, 0x84	; 132
     af2:	8e e1       	ldi	r24, 0x1E	; 30
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	a5 01       	movw	r20, r10
     af8:	94 01       	movw	r18, r8
     afa:	0e 94 22 16 	call	0x2c44	; 0x2c44 <__udivmodsi4>
     afe:	69 01       	movw	r12, r18
     b00:	7a 01       	movw	r14, r20
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	c8 1a       	sub	r12, r24
     b06:	d1 08       	sbc	r13, r1
     b08:	e1 08       	sbc	r14, r1
     b0a:	f1 08       	sbc	r15, r1
     b0c:	f6 94       	lsr	r15
     b0e:	e7 94       	ror	r14
     b10:	d7 94       	ror	r13
     b12:	c7 94       	ror	r12
    *usart[usart_number].ubrrh = (uint8_t)(baud >> 8);
     b14:	41 2f       	mov	r20, r17
     b16:	50 e0       	ldi	r21, 0x00	; 0
     b18:	8c e0       	ldi	r24, 0x0C	; 12
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	18 9f       	mul	r17, r24
     b1e:	d0 01       	movw	r26, r0
     b20:	19 9f       	mul	r17, r25
     b22:	b0 0d       	add	r27, r0
     b24:	11 24       	eor	r1, r1
     b26:	cd 01       	movw	r24, r26
     b28:	80 50       	subi	r24, 0x00	; 0
     b2a:	9e 4f       	sbci	r25, 0xFE	; 254
     b2c:	fd 01       	movw	r30, r26
     b2e:	ec 5f       	subi	r30, 0xFC	; 252
     b30:	fc 4f       	sbci	r31, 0xFC	; 252
     b32:	01 90       	ld	r0, Z+
     b34:	f0 81       	ld	r31, Z
     b36:	e0 2d       	mov	r30, r0
     b38:	2d 2d       	mov	r18, r13
     b3a:	33 27       	eor	r19, r19
     b3c:	20 83       	st	Z, r18
    *usart[usart_number].ubrrl = (uint8_t)(baud & 0x0ff);
     b3e:	fd 01       	movw	r30, r26
     b40:	ea 5f       	subi	r30, 0xFA	; 250
     b42:	fc 4f       	sbci	r31, 0xFC	; 252
     b44:	01 90       	ld	r0, Z+
     b46:	f0 81       	ld	r31, Z
     b48:	e0 2d       	mov	r30, r0
     b4a:	c0 82       	st	Z, r12

    /* activate transmitter, receiver and receiver interrupt */
    *usart[usart_number].ucsrb |= (1 << 3); /* TXEN */
     b4c:	a8 5f       	subi	r26, 0xF8	; 248
     b4e:	bc 4f       	sbci	r27, 0xFC	; 252
     b50:	ed 91       	ld	r30, X+
     b52:	fc 91       	ld	r31, X
     b54:	11 97       	sbiw	r26, 0x01	; 1
     b56:	20 81       	ld	r18, Z
     b58:	28 60       	ori	r18, 0x08	; 8
     b5a:	20 83       	st	Z, r18
    *usart[usart_number].ucsrb |= (1 << 4); /* RXEN */
     b5c:	ed 91       	ld	r30, X+
     b5e:	fc 91       	ld	r31, X
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	20 81       	ld	r18, Z
     b64:	20 61       	ori	r18, 0x10	; 16
     b66:	20 83       	st	Z, r18
    *usart[usart_number].ucsrb |= (1 << 7); /* RXCIE */
     b68:	ed 91       	ld	r30, X+
     b6a:	fc 91       	ld	r31, X
     b6c:	11 97       	sbiw	r26, 0x01	; 1
     b6e:	20 81       	ld	r18, Z
     b70:	20 68       	ori	r18, 0x80	; 128
     b72:	20 83       	st	Z, r18

    /* set framelength bits */
    switch (framelength)
     b74:	c7 30       	cpi	r28, 0x07	; 7
     b76:	09 f4       	brne	.+2      	; 0xb7a <setup_usart+0xb0>
     b78:	5c c0       	rjmp	.+184    	; 0xc32 <setup_usart+0x168>
     b7a:	20 f5       	brcc	.+72     	; 0xbc4 <setup_usart+0xfa>
     b7c:	c5 30       	cpi	r28, 0x05	; 5
     b7e:	d9 f1       	breq	.+118    	; 0xbf6 <setup_usart+0x12c>
     b80:	c6 30       	cpi	r28, 0x06	; 6
     b82:	09 f4       	brne	.+2      	; 0xb86 <setup_usart+0xbc>
     b84:	4d c0       	rjmp	.+154    	; 0xc20 <setup_usart+0x156>

    /* set bits for parity */
    switch (parity)
    {
    case 'N':                                    /* None */
        *usart[usart_number].ucsrc &= ~(1 << 4); /* UPM0 = 0 */
     b86:	8c e0       	ldi	r24, 0x0C	; 12
     b88:	91 e0       	ldi	r25, 0x01	; 1
     b8a:	48 9f       	mul	r20, r24
     b8c:	f0 01       	movw	r30, r0
     b8e:	49 9f       	mul	r20, r25
     b90:	f0 0d       	add	r31, r0
     b92:	58 9f       	mul	r21, r24
     b94:	f0 0d       	add	r31, r0
     b96:	11 24       	eor	r1, r1
     b98:	e6 5f       	subi	r30, 0xF6	; 246
     b9a:	fc 4f       	sbci	r31, 0xFC	; 252
     b9c:	a0 81       	ld	r26, Z
     b9e:	b1 81       	ldd	r27, Z+1	; 0x01
    switch (parity)
     ba0:	0e 34       	cpi	r16, 0x4E	; 78
     ba2:	09 f4       	brne	.+2      	; 0xba6 <setup_usart+0xdc>
     ba4:	5e c0       	rjmp	.+188    	; 0xc62 <setup_usart+0x198>
     ba6:	0f 34       	cpi	r16, 0x4F	; 79
     ba8:	09 f4       	brne	.+2      	; 0xbac <setup_usart+0xe2>
     baa:	86 c0       	rjmp	.+268    	; 0xcb8 <setup_usart+0x1ee>
     bac:	05 34       	cpi	r16, 0x45	; 69
     bae:	09 f0       	breq	.+2      	; 0xbb2 <setup_usart+0xe8>
     bb0:	61 c0       	rjmp	.+194    	; 0xc74 <setup_usart+0x1aa>
        *usart[usart_number].ucsrc &= ~(1 << 5); /* UPM1 = 0 */
        break;
    case 'E':                                    /* Even */
        *usart[usart_number].ucsrc &= ~(1 << 4); /* UPM0 = 0 */
     bb2:	8c 91       	ld	r24, X
     bb4:	8f 7e       	andi	r24, 0xEF	; 239
        *usart[usart_number].ucsrc |= (1 << 5);  /* UPM1 = 1 */
        break;
    case 'O':                                   /* Odd */
        *usart[usart_number].ucsrc |= (1 << 4); /* UPM0 = 1 */
     bb6:	8c 93       	st	X, r24
        *usart[usart_number].ucsrc |= (1 << 5); /* UPM1 = 1 */
     bb8:	01 90       	ld	r0, Z+
     bba:	f0 81       	ld	r31, Z
     bbc:	e0 2d       	mov	r30, r0
     bbe:	80 81       	ld	r24, Z
     bc0:	80 62       	ori	r24, 0x20	; 32
     bc2:	57 c0       	rjmp	.+174    	; 0xc72 <setup_usart+0x1a8>
    switch (framelength)
     bc4:	c8 30       	cpi	r28, 0x08	; 8
     bc6:	09 f4       	brne	.+2      	; 0xbca <setup_usart+0x100>
     bc8:	43 c0       	rjmp	.+134    	; 0xc50 <setup_usart+0x186>
     bca:	c9 30       	cpi	r28, 0x09	; 9
     bcc:	e1 f6       	brne	.-72     	; 0xb86 <setup_usart+0xbc>
        *usart[usart_number].ucsrc |= (1 << 1); /* UCSZ0 = 1 */
     bce:	fc 01       	movw	r30, r24
     bd0:	e6 5f       	subi	r30, 0xF6	; 246
     bd2:	fe 4f       	sbci	r31, 0xFE	; 254
     bd4:	20 81       	ld	r18, Z
     bd6:	31 81       	ldd	r19, Z+1	; 0x01
     bd8:	e9 01       	movw	r28, r18
     bda:	88 81       	ld	r24, Y
     bdc:	82 60       	ori	r24, 0x02	; 2
     bde:	88 83       	st	Y, r24
        *usart[usart_number].ucsrc |= (1 << 2); /* UCSZ1 = 1 */
     be0:	01 90       	ld	r0, Z+
     be2:	f0 81       	ld	r31, Z
     be4:	e0 2d       	mov	r30, r0
     be6:	80 81       	ld	r24, Z
     be8:	84 60       	ori	r24, 0x04	; 4
     bea:	80 83       	st	Z, r24
        *usart[usart_number].ucsrb |= (1 << 2); /* UCSZ2 = 1 */
     bec:	ed 91       	ld	r30, X+
     bee:	fc 91       	ld	r31, X
     bf0:	80 81       	ld	r24, Z
     bf2:	84 60       	ori	r24, 0x04	; 4
     bf4:	13 c0       	rjmp	.+38     	; 0xc1c <setup_usart+0x152>
        *usart[usart_number].ucsrc &= ~(1 << 1); /* UCSZ0 = 0 */
     bf6:	fc 01       	movw	r30, r24
     bf8:	e6 5f       	subi	r30, 0xF6	; 246
     bfa:	fe 4f       	sbci	r31, 0xFE	; 254
     bfc:	20 81       	ld	r18, Z
     bfe:	31 81       	ldd	r19, Z+1	; 0x01
     c00:	e9 01       	movw	r28, r18
     c02:	98 81       	ld	r25, Y
     c04:	9d 7f       	andi	r25, 0xFD	; 253
        *usart[usart_number].ucsrc |= (1 << 1);  /* UCSZ0 = 1 */
     c06:	98 83       	st	Y, r25
        *usart[usart_number].ucsrc &= ~(1 << 2); /* UCSZ1 = 0 */
     c08:	01 90       	ld	r0, Z+
     c0a:	f0 81       	ld	r31, Z
     c0c:	e0 2d       	mov	r30, r0
     c0e:	80 81       	ld	r24, Z
     c10:	8b 7f       	andi	r24, 0xFB	; 251
        *usart[usart_number].ucsrc |= (1 << 2);  /* UCSZ1 = 1 */
     c12:	80 83       	st	Z, r24
        *usart[usart_number].ucsrb &= ~(1 << 2); /* UCSZ2 = 0 */
     c14:	ed 91       	ld	r30, X+
     c16:	fc 91       	ld	r31, X
     c18:	80 81       	ld	r24, Z
     c1a:	8b 7f       	andi	r24, 0xFB	; 251
        *usart[usart_number].ucsrb |= (1 << 2); /* UCSZ2 = 1 */
     c1c:	80 83       	st	Z, r24
        break;
     c1e:	b3 cf       	rjmp	.-154    	; 0xb86 <setup_usart+0xbc>
        *usart[usart_number].ucsrc |= (1 << 1);  /* UCSZ0 = 1 */
     c20:	fc 01       	movw	r30, r24
     c22:	e6 5f       	subi	r30, 0xF6	; 246
     c24:	fe 4f       	sbci	r31, 0xFE	; 254
     c26:	20 81       	ld	r18, Z
     c28:	31 81       	ldd	r19, Z+1	; 0x01
     c2a:	e9 01       	movw	r28, r18
     c2c:	98 81       	ld	r25, Y
     c2e:	92 60       	ori	r25, 0x02	; 2
     c30:	ea cf       	rjmp	.-44     	; 0xc06 <setup_usart+0x13c>
        *usart[usart_number].ucsrc &= ~(1 << 1); /* UCSZ0 = 0 */
     c32:	fc 01       	movw	r30, r24
     c34:	e6 5f       	subi	r30, 0xF6	; 246
     c36:	fe 4f       	sbci	r31, 0xFE	; 254
     c38:	20 81       	ld	r18, Z
     c3a:	31 81       	ldd	r19, Z+1	; 0x01
     c3c:	e9 01       	movw	r28, r18
     c3e:	98 81       	ld	r25, Y
     c40:	9d 7f       	andi	r25, 0xFD	; 253
        *usart[usart_number].ucsrc |= (1 << 1);  /* UCSZ0 = 1 */
     c42:	98 83       	st	Y, r25
        *usart[usart_number].ucsrc |= (1 << 2);  /* UCSZ1 = 1 */
     c44:	01 90       	ld	r0, Z+
     c46:	f0 81       	ld	r31, Z
     c48:	e0 2d       	mov	r30, r0
     c4a:	80 81       	ld	r24, Z
     c4c:	84 60       	ori	r24, 0x04	; 4
     c4e:	e1 cf       	rjmp	.-62     	; 0xc12 <setup_usart+0x148>
        *usart[usart_number].ucsrc |= (1 << 1);  /* UCSZ0 = 1 */
     c50:	fc 01       	movw	r30, r24
     c52:	e6 5f       	subi	r30, 0xF6	; 246
     c54:	fe 4f       	sbci	r31, 0xFE	; 254
     c56:	20 81       	ld	r18, Z
     c58:	31 81       	ldd	r19, Z+1	; 0x01
     c5a:	e9 01       	movw	r28, r18
     c5c:	98 81       	ld	r25, Y
     c5e:	92 60       	ori	r25, 0x02	; 2
     c60:	f0 cf       	rjmp	.-32     	; 0xc42 <setup_usart+0x178>
        *usart[usart_number].ucsrc &= ~(1 << 4); /* UPM0 = 0 */
     c62:	8c 91       	ld	r24, X
     c64:	8f 7e       	andi	r24, 0xEF	; 239
     c66:	8c 93       	st	X, r24
        *usart[usart_number].ucsrc &= ~(1 << 5); /* UPM1 = 0 */
     c68:	01 90       	ld	r0, Z+
     c6a:	f0 81       	ld	r31, Z
     c6c:	e0 2d       	mov	r30, r0
     c6e:	80 81       	ld	r24, Z
     c70:	8f 7d       	andi	r24, 0xDF	; 223
        *usart[usart_number].ucsrc |= (1 << 5); /* UPM1 = 1 */
     c72:	80 83       	st	Z, r24
        break;
    }

    /* set number of stopbits */
    if (stopbits > 1)
        *usart[usart_number].ucsrc |= (1 << 3); /* USBS = 1 */
     c74:	8c e0       	ldi	r24, 0x0C	; 12
     c76:	91 e0       	ldi	r25, 0x01	; 1
     c78:	48 9f       	mul	r20, r24
     c7a:	f0 01       	movw	r30, r0
     c7c:	49 9f       	mul	r20, r25
     c7e:	f0 0d       	add	r31, r0
     c80:	58 9f       	mul	r21, r24
     c82:	f0 0d       	add	r31, r0
     c84:	11 24       	eor	r1, r1
     c86:	e6 5f       	subi	r30, 0xF6	; 246
     c88:	fc 4f       	sbci	r31, 0xFC	; 252
     c8a:	01 90       	ld	r0, Z+
     c8c:	f0 81       	ld	r31, Z
     c8e:	e0 2d       	mov	r30, r0
    if (stopbits > 1)
     c90:	d1 e0       	ldi	r29, 0x01	; 1
        *usart[usart_number].ucsrc |= (1 << 3); /* USBS = 1 */
     c92:	80 81       	ld	r24, Z
    if (stopbits > 1)
     c94:	d7 15       	cp	r29, r7
     c96:	98 f4       	brcc	.+38     	; 0xcbe <setup_usart+0x1f4>
        *usart[usart_number].ucsrc |= (1 << 3); /* USBS = 1 */
     c98:	88 60       	ori	r24, 0x08	; 8
    else
        *usart[usart_number].ucsrc &= ~(1 << 3); /* USBS = 0 */
     c9a:	80 83       	st	Z, r24
}
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	1f 91       	pop	r17
     ca2:	0f 91       	pop	r16
     ca4:	ff 90       	pop	r15
     ca6:	ef 90       	pop	r14
     ca8:	df 90       	pop	r13
     caa:	cf 90       	pop	r12
     cac:	bf 90       	pop	r11
     cae:	af 90       	pop	r10
     cb0:	9f 90       	pop	r9
     cb2:	8f 90       	pop	r8
     cb4:	7f 90       	pop	r7
     cb6:	08 95       	ret
        *usart[usart_number].ucsrc |= (1 << 4); /* UPM0 = 1 */
     cb8:	8c 91       	ld	r24, X
     cba:	80 61       	ori	r24, 0x10	; 16
     cbc:	7c cf       	rjmp	.-264    	; 0xbb6 <setup_usart+0xec>
        *usart[usart_number].ucsrc &= ~(1 << 3); /* USBS = 0 */
     cbe:	87 7f       	andi	r24, 0xF7	; 247
     cc0:	ec cf       	rjmp	.-40     	; 0xc9a <setup_usart+0x1d0>

00000cc2 <buffer_level>:

uint8_t buffer_level(uint8_t usart_number, uint8_t direction)
{
    return usart[usart_number].buffer[direction].write - usart[usart_number].buffer[direction].read;
     cc2:	4c e0       	ldi	r20, 0x0C	; 12
     cc4:	51 e0       	ldi	r21, 0x01	; 1
     cc6:	84 9f       	mul	r24, r20
     cc8:	90 01       	movw	r18, r0
     cca:	85 9f       	mul	r24, r21
     ccc:	30 0d       	add	r19, r0
     cce:	11 24       	eor	r1, r1
     cd0:	82 e8       	ldi	r24, 0x82	; 130
     cd2:	68 9f       	mul	r22, r24
     cd4:	20 0d       	add	r18, r0
     cd6:	31 1d       	adc	r19, r1
     cd8:	11 24       	eor	r1, r1
     cda:	f9 01       	movw	r30, r18
     cdc:	ef 57       	subi	r30, 0x7F	; 127
     cde:	fd 4f       	sbci	r31, 0xFD	; 253
     ce0:	80 81       	ld	r24, Z
     ce2:	20 58       	subi	r18, 0x80	; 128
     ce4:	3d 4f       	sbci	r19, 0xFD	; 253
     ce6:	f9 01       	movw	r30, r18
     ce8:	90 81       	ld	r25, Z
}
     cea:	89 1b       	sub	r24, r25
     cec:	08 95       	ret

00000cee <read_buffer>:

uint8_t read_buffer(uint8_t usart_number, uint8_t direction, uint8_t *data)
{
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	8a 01       	movw	r16, r20
    // buffer empty?
    if (usart[usart_number].buffer[direction].read == usart[usart_number].buffer[direction].write)
     cf8:	4c e0       	ldi	r20, 0x0C	; 12
     cfa:	51 e0       	ldi	r21, 0x01	; 1
     cfc:	84 9f       	mul	r24, r20
     cfe:	90 01       	movw	r18, r0
     d00:	85 9f       	mul	r24, r21
     d02:	30 0d       	add	r19, r0
     d04:	11 24       	eor	r1, r1
     d06:	c9 01       	movw	r24, r18
     d08:	42 e8       	ldi	r20, 0x82	; 130
     d0a:	64 9f       	mul	r22, r20
     d0c:	80 0d       	add	r24, r0
     d0e:	91 1d       	adc	r25, r1
     d10:	11 24       	eor	r1, r1
     d12:	ec 01       	movw	r28, r24
     d14:	c0 50       	subi	r28, 0x00	; 0
     d16:	de 4f       	sbci	r29, 0xFE	; 254
     d18:	fc 01       	movw	r30, r24
     d1a:	e0 58       	subi	r30, 0x80	; 128
     d1c:	fd 4f       	sbci	r31, 0xFD	; 253
     d1e:	20 81       	ld	r18, Z
     d20:	8f 57       	subi	r24, 0x7F	; 127
     d22:	9d 4f       	sbci	r25, 0xFD	; 253
     d24:	dc 01       	movw	r26, r24
     d26:	8c 91       	ld	r24, X
     d28:	28 17       	cp	r18, r24
     d2a:	81 f0       	breq	.+32     	; 0xd4c <read_buffer+0x5e>
        return 1;
    // read a byte from the buffer
    *data = usart[usart_number].buffer[direction].data[usart[usart_number].buffer[direction].read];
     d2c:	80 81       	ld	r24, Z
     d2e:	c8 0f       	add	r28, r24
     d30:	d1 1d       	adc	r29, r1
     d32:	88 81       	ld	r24, Y
     d34:	d8 01       	movw	r26, r16
     d36:	8c 93       	st	X, r24
    // update read index
    usart[usart_number].buffer[direction].read = (usart[usart_number].buffer[direction].read + 1) & BUFFERMASK;
     d38:	80 81       	ld	r24, Z
     d3a:	8f 5f       	subi	r24, 0xFF	; 255
     d3c:	8f 77       	andi	r24, 0x7F	; 127
     d3e:	80 83       	st	Z, r24
    return 0;
     d40:	80 e0       	ldi	r24, 0x00	; 0
}
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	08 95       	ret
        return 1;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	f9 cf       	rjmp	.-14     	; 0xd42 <read_buffer+0x54>

00000d50 <write_buffer>:

uint8_t write_buffer(uint8_t usart_number, uint8_t direction, uint8_t data)
{
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
    // calc index for the next byte
    uint8_t next = (usart[usart_number].buffer[direction].write + 1) & BUFFERMASK;
     d54:	ec e0       	ldi	r30, 0x0C	; 12
     d56:	f1 e0       	ldi	r31, 0x01	; 1
     d58:	8e 9f       	mul	r24, r30
     d5a:	90 01       	movw	r18, r0
     d5c:	8f 9f       	mul	r24, r31
     d5e:	30 0d       	add	r19, r0
     d60:	11 24       	eor	r1, r1
     d62:	f9 01       	movw	r30, r18
     d64:	82 e8       	ldi	r24, 0x82	; 130
     d66:	68 9f       	mul	r22, r24
     d68:	e0 0d       	add	r30, r0
     d6a:	f1 1d       	adc	r31, r1
     d6c:	11 24       	eor	r1, r1
     d6e:	df 01       	movw	r26, r30
     d70:	a0 50       	subi	r26, 0x00	; 0
     d72:	be 4f       	sbci	r27, 0xFE	; 254
     d74:	ef 01       	movw	r28, r30
     d76:	cf 57       	subi	r28, 0x7F	; 127
     d78:	dd 4f       	sbci	r29, 0xFD	; 253
     d7a:	88 81       	ld	r24, Y
     d7c:	8f 5f       	subi	r24, 0xFF	; 255
     d7e:	8f 77       	andi	r24, 0x7F	; 127
    // wait if the buffer is full
    while (usart[usart_number].buffer[direction].read == next)
     d80:	e0 58       	subi	r30, 0x80	; 128
     d82:	fd 4f       	sbci	r31, 0xFD	; 253
     d84:	90 81       	ld	r25, Z
     d86:	98 17       	cp	r25, r24
     d88:	e9 f3       	breq	.-6      	; 0xd84 <write_buffer+0x34>
    {
        ;
    };
    // write the byte to the buffer
    usart[usart_number].buffer[direction].data[usart[usart_number].buffer[direction].write] = data;
     d8a:	fd 01       	movw	r30, r26
     d8c:	ef 57       	subi	r30, 0x7F	; 127
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	90 81       	ld	r25, Z
     d92:	a9 0f       	add	r26, r25
     d94:	b1 1d       	adc	r27, r1
     d96:	4c 93       	st	X, r20
    // update write index
    usart[usart_number].buffer[direction].write = next;
     d98:	80 83       	st	Z, r24

    if (direction == TX)
     d9a:	61 30       	cpi	r22, 0x01	; 1
     d9c:	c9 f4       	brne	.+50     	; 0xdd0 <write_buffer+0x80>
    {
        // Check if the USART is in 9-Bit mode
        if (*usart[usart_number].ucsrb & 4)
     d9e:	c9 01       	movw	r24, r18
     da0:	80 50       	subi	r24, 0x00	; 0
     da2:	9e 4f       	sbci	r25, 0xFE	; 254
     da4:	28 5f       	subi	r18, 0xF8	; 248
     da6:	3c 4f       	sbci	r19, 0xFC	; 252
     da8:	d9 01       	movw	r26, r18
     daa:	ed 91       	ld	r30, X+
     dac:	fc 91       	ld	r31, X
     dae:	20 81       	ld	r18, Z
     db0:	22 ff       	sbrs	r18, 2
     db2:	0b c0       	rjmp	.+22     	; 0xdca <write_buffer+0x7a>
        {
            // Activate transmit interrupt if the buffer level is even
            if (!((usart[usart_number].buffer[direction].write - usart[usart_number].buffer[direction].read) & 1))
     db4:	dc 01       	movw	r26, r24
     db6:	ad 5f       	subi	r26, 0xFD	; 253
     db8:	be 4f       	sbci	r27, 0xFE	; 254
     dba:	2c 91       	ld	r18, X
     dbc:	8e 5f       	subi	r24, 0xFE	; 254
     dbe:	9e 4f       	sbci	r25, 0xFE	; 254
     dc0:	dc 01       	movw	r26, r24
     dc2:	8c 91       	ld	r24, X
     dc4:	28 1b       	sub	r18, r24
     dc6:	20 fd       	sbrc	r18, 0
     dc8:	03 c0       	rjmp	.+6      	; 0xdd0 <write_buffer+0x80>
                *usart[usart_number].ucsrb |= (1 << 5);
        }
        else
        {
            // Activate transmit interrupt
            *usart[usart_number].ucsrb |= (1 << 5);
     dca:	80 81       	ld	r24, Z
     dcc:	80 62       	ori	r24, 0x20	; 32
     dce:	80 83       	st	Z, r24
        }
    }
    return 0;
}
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	08 95       	ret

00000dd8 <send_char>:

uint8_t send_char(uint8_t usart_number, char c)
{
     dd8:	46 2f       	mov	r20, r22
    return write_buffer(usart_number, TX, (uint8_t)c);
     dda:	61 e0       	ldi	r22, 0x01	; 1
     ddc:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <write_buffer>

00000de0 <recv_char>:
}

uint8_t recv_char(uint8_t usart_number, char *c)
{
     de0:	ab 01       	movw	r20, r22
    return read_buffer(usart_number, RX, (uint8_t *)c);
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	0c 94 77 06 	jmp	0xcee	; 0xcee <read_buffer>

00000de8 <send_str>:
}

uint8_t send_str(uint8_t usart_number, char *str)
{
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	18 2f       	mov	r17, r24
     df0:	eb 01       	movw	r28, r22
    while (*str)
     df2:	69 91       	ld	r22, Y+
     df4:	61 11       	cpse	r22, r1
     df6:	05 c0       	rjmp	.+10     	; 0xe02 <send_str+0x1a>
        if (send_char(usart_number, *str))
            return 1;
        str++;
    }
    return 0;
}
     df8:	86 2f       	mov	r24, r22
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	08 95       	ret
        if (send_char(usart_number, *str))
     e02:	81 2f       	mov	r24, r17
     e04:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <send_char>
     e08:	88 23       	and	r24, r24
     e0a:	99 f3       	breq	.-26     	; 0xdf2 <send_str+0xa>
            return 1;
     e0c:	61 e0       	ldi	r22, 0x01	; 1
     e0e:	f4 cf       	rjmp	.-24     	; 0xdf8 <send_str+0x10>

00000e10 <recv_str>:

uint8_t recv_str(uint8_t usart_number, char *str)
{
     e10:	ff 92       	push	r15
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	0f 92       	push	r0
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	f8 2e       	mov	r15, r24
     e22:	8b 01       	movw	r16, r22
    char c;
    while (1)
    {
        if (recv_char(usart_number, &c))
     e24:	be 01       	movw	r22, r28
     e26:	6f 5f       	subi	r22, 0xFF	; 255
     e28:	7f 4f       	sbci	r23, 0xFF	; 255
     e2a:	8f 2d       	mov	r24, r15
     e2c:	0e 94 f0 06 	call	0xde0	; 0xde0 <recv_char>
     e30:	81 11       	cpse	r24, r1
     e32:	0d c0       	rjmp	.+26     	; 0xe4e <recv_str+0x3e>
            return 1;
        *str = c;
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	f8 01       	movw	r30, r16
     e38:	81 93       	st	Z+, r24
     e3a:	8f 01       	movw	r16, r30
        str++;
        if (c == '\0')
     e3c:	81 11       	cpse	r24, r1
     e3e:	f2 cf       	rjmp	.-28     	; 0xe24 <recv_str+0x14>
            return 0;
    }
}
     e40:	0f 90       	pop	r0
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	ff 90       	pop	r15
     e4c:	08 95       	ret
            return 1;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	f7 cf       	rjmp	.-18     	; 0xe40 <recv_str+0x30>

00000e52 <send_str_p>:

uint8_t send_str_p(uint8_t usart_number, const char *str)
{
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	18 2f       	mov	r17, r24
     e5a:	eb 01       	movw	r28, r22
    char c;
    while ((c = pgm_read_byte(str)))
     e5c:	fe 01       	movw	r30, r28
     e5e:	64 91       	lpm	r22, Z
     e60:	61 11       	cpse	r22, r1
     e62:	05 c0       	rjmp	.+10     	; 0xe6e <send_str_p+0x1c>
        if (send_char(usart_number, c))
            return 1;
        str++;
    }
    return 0;
}
     e64:	86 2f       	mov	r24, r22
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	1f 91       	pop	r17
     e6c:	08 95       	ret
        if (send_char(usart_number, c))
     e6e:	81 2f       	mov	r24, r17
     e70:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <send_char>
     e74:	81 11       	cpse	r24, r1
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <send_str_p+0x2a>
        str++;
     e78:	21 96       	adiw	r28, 0x01	; 1
     e7a:	f0 cf       	rjmp	.-32     	; 0xe5c <send_str_p+0xa>
            return 1;
     e7c:	61 e0       	ldi	r22, 0x01	; 1
     e7e:	f2 cf       	rjmp	.-28     	; 0xe64 <send_str_p+0x12>

00000e80 <send_mdb>:

uint8_t send_mdb(uint8_t usart_number, uint16_t mdb, uint8_t MDB_USART_TX_READY)
{
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	d8 2f       	mov	r29, r24
     e88:	16 2f       	mov	r17, r22
    if (MDB_USART_TX_READY == 1)
     e8a:	41 30       	cpi	r20, 0x01	; 1
     e8c:	79 f4       	brne	.+30     	; 0xeac <send_mdb+0x2c>
    {

        return write_buffer(usart_number, TX, (uint8_t)(mdb >> 8)) | write_buffer(usart_number, TX, (uint8_t)(mdb & 0xFF));
     e8e:	47 2f       	mov	r20, r23
     e90:	61 e0       	ldi	r22, 0x01	; 1
     e92:	0e 94 a8 06 	call	0xd50	; 0xd50 <write_buffer>
     e96:	c8 2f       	mov	r28, r24
     e98:	41 2f       	mov	r20, r17
     e9a:	61 e0       	ldi	r22, 0x01	; 1
     e9c:	8d 2f       	mov	r24, r29
     e9e:	0e 94 a8 06 	call	0xd50	; 0xd50 <write_buffer>
     ea2:	8c 2b       	or	r24, r28
    }
    else
    {
        uint8_t m = 0;
    }
}
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	1f 91       	pop	r17
     eaa:	08 95       	ret
     eac:	fb cf       	rjmp	.-10     	; 0xea4 <send_mdb+0x24>

00000eae <recv_mdb>:

uint16_t recv_mdb(uint8_t usart_number)
{
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	0f 92       	push	r0
     eb6:	0f 92       	push	r0
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	18 2f       	mov	r17, r24
    uint8_t hb, lb;
    read_buffer(usart_number, RX, &hb);
     ebe:	ae 01       	movw	r20, r28
     ec0:	4e 5f       	subi	r20, 0xFE	; 254
     ec2:	5f 4f       	sbci	r21, 0xFF	; 255
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	0e 94 77 06 	call	0xcee	; 0xcee <read_buffer>
    read_buffer(usart_number, RX, &lb);
     eca:	ae 01       	movw	r20, r28
     ecc:	4f 5f       	subi	r20, 0xFF	; 255
     ece:	5f 4f       	sbci	r21, 0xFF	; 255
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	81 2f       	mov	r24, r17
     ed4:	0e 94 77 06 	call	0xcee	; 0xcee <read_buffer>
    return ((hb << 8) | lb);
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	89 81       	ldd	r24, Y+1	; 0x01
}
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	08 95       	ret

00000ee8 <__vector_25>:


#if (USART0 == 1)
ISR(USART0_RX_vect)
{
     ee8:	1f 92       	push	r1
     eea:	0f 92       	push	r0
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	0f 92       	push	r0
     ef0:	11 24       	eor	r1, r1
     ef2:	0b b6       	in	r0, 0x3b	; 59
     ef4:	0f 92       	push	r0
     ef6:	2f 93       	push	r18
     ef8:	3f 93       	push	r19
     efa:	4f 93       	push	r20
     efc:	5f 93       	push	r21
     efe:	6f 93       	push	r22
     f00:	7f 93       	push	r23
     f02:	8f 93       	push	r24
     f04:	9f 93       	push	r25
     f06:	af 93       	push	r26
     f08:	bf 93       	push	r27
     f0a:	ef 93       	push	r30
     f0c:	ff 93       	push	r31
    uint8_t data;
    if (UCSR0B & (1 << 2))
     f0e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     f12:	82 ff       	sbrs	r24, 2
     f14:	08 c0       	rjmp	.+16     	; 0xf26 <__vector_25+0x3e>
    {
        data = ((UCSR0B >> 1) & 0x01);
     f16:	40 91 c1 00 	lds	r20, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     f1a:	46 95       	lsr	r20
     f1c:	41 70       	andi	r20, 0x01	; 1
        write_buffer(0, RX, data);
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	0e 94 a8 06 	call	0xd50	; 0xd50 <write_buffer>
    }
    data = UDR0;
     f26:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    write_buffer(0, RX, data);
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	0e 94 a8 06 	call	0xd50	; 0xd50 <write_buffer>
}
     f32:	ff 91       	pop	r31
     f34:	ef 91       	pop	r30
     f36:	bf 91       	pop	r27
     f38:	af 91       	pop	r26
     f3a:	9f 91       	pop	r25
     f3c:	8f 91       	pop	r24
     f3e:	7f 91       	pop	r23
     f40:	6f 91       	pop	r22
     f42:	5f 91       	pop	r21
     f44:	4f 91       	pop	r20
     f46:	3f 91       	pop	r19
     f48:	2f 91       	pop	r18
     f4a:	0f 90       	pop	r0
     f4c:	0b be       	out	0x3b, r0	; 59
     f4e:	0f 90       	pop	r0
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	0f 90       	pop	r0
     f54:	1f 90       	pop	r1
     f56:	18 95       	reti

00000f58 <__vector_36>:
#endif

#if (USART1 == 1)
ISR(USART1_RX_vect)
{
     f58:	1f 92       	push	r1
     f5a:	0f 92       	push	r0
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	0f 92       	push	r0
     f60:	11 24       	eor	r1, r1
     f62:	0b b6       	in	r0, 0x3b	; 59
     f64:	0f 92       	push	r0
     f66:	2f 93       	push	r18
     f68:	3f 93       	push	r19
     f6a:	4f 93       	push	r20
     f6c:	5f 93       	push	r21
     f6e:	6f 93       	push	r22
     f70:	7f 93       	push	r23
     f72:	8f 93       	push	r24
     f74:	9f 93       	push	r25
     f76:	af 93       	push	r26
     f78:	bf 93       	push	r27
     f7a:	ef 93       	push	r30
     f7c:	ff 93       	push	r31
    uint8_t data;
    if (UCSR1B & (1 << 2))
     f7e:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     f82:	82 ff       	sbrs	r24, 2
     f84:	08 c0       	rjmp	.+16     	; 0xf96 <__vector_36+0x3e>
    {
        data = ((UCSR1B >> 1) & 0x01);
     f86:	40 91 c9 00 	lds	r20, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     f8a:	46 95       	lsr	r20
     f8c:	41 70       	andi	r20, 0x01	; 1
        write_buffer(1, RX, data);
     f8e:	60 e0       	ldi	r22, 0x00	; 0
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	0e 94 a8 06 	call	0xd50	; 0xd50 <write_buffer>
    }
    data = UDR1;
     f96:	40 91 ce 00 	lds	r20, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    write_buffer(1, RX, data);
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	0e 94 a8 06 	call	0xd50	; 0xd50 <write_buffer>
}
     fa2:	ff 91       	pop	r31
     fa4:	ef 91       	pop	r30
     fa6:	bf 91       	pop	r27
     fa8:	af 91       	pop	r26
     faa:	9f 91       	pop	r25
     fac:	8f 91       	pop	r24
     fae:	7f 91       	pop	r23
     fb0:	6f 91       	pop	r22
     fb2:	5f 91       	pop	r21
     fb4:	4f 91       	pop	r20
     fb6:	3f 91       	pop	r19
     fb8:	2f 91       	pop	r18
     fba:	0f 90       	pop	r0
     fbc:	0b be       	out	0x3b, r0	; 59
     fbe:	0f 90       	pop	r0
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	0f 90       	pop	r0
     fc4:	1f 90       	pop	r1
     fc6:	18 95       	reti

00000fc8 <__vector_51>:
#endif

#if (USART2 == 1)
ISR(USART2_RX_vect)
{
     fc8:	1f 92       	push	r1
     fca:	0f 92       	push	r0
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	0f 92       	push	r0
     fd0:	11 24       	eor	r1, r1
     fd2:	0b b6       	in	r0, 0x3b	; 59
     fd4:	0f 92       	push	r0
     fd6:	2f 93       	push	r18
     fd8:	3f 93       	push	r19
     fda:	4f 93       	push	r20
     fdc:	5f 93       	push	r21
     fde:	6f 93       	push	r22
     fe0:	7f 93       	push	r23
     fe2:	8f 93       	push	r24
     fe4:	9f 93       	push	r25
     fe6:	af 93       	push	r26
     fe8:	bf 93       	push	r27
     fea:	ef 93       	push	r30
     fec:	ff 93       	push	r31
    uint8_t data;
    if (UCSR2B & (1 << 2))
     fee:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
     ff2:	82 ff       	sbrs	r24, 2
     ff4:	08 c0       	rjmp	.+16     	; 0x1006 <__vector_51+0x3e>
    {
        data = ((UCSR2B >> 1) & 0x01);
     ff6:	40 91 d1 00 	lds	r20, 0x00D1	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
     ffa:	46 95       	lsr	r20
     ffc:	41 70       	andi	r20, 0x01	; 1
        write_buffer(2, RX, data);
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	82 e0       	ldi	r24, 0x02	; 2
    1002:	0e 94 a8 06 	call	0xd50	; 0xd50 <write_buffer>
    }
    data = UDR2;
    1006:	40 91 d6 00 	lds	r20, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    write_buffer(2, RX, data);
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	82 e0       	ldi	r24, 0x02	; 2
    100e:	0e 94 a8 06 	call	0xd50	; 0xd50 <write_buffer>
}
    1012:	ff 91       	pop	r31
    1014:	ef 91       	pop	r30
    1016:	bf 91       	pop	r27
    1018:	af 91       	pop	r26
    101a:	9f 91       	pop	r25
    101c:	8f 91       	pop	r24
    101e:	7f 91       	pop	r23
    1020:	6f 91       	pop	r22
    1022:	5f 91       	pop	r21
    1024:	4f 91       	pop	r20
    1026:	3f 91       	pop	r19
    1028:	2f 91       	pop	r18
    102a:	0f 90       	pop	r0
    102c:	0b be       	out	0x3b, r0	; 59
    102e:	0f 90       	pop	r0
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	0f 90       	pop	r0
    1034:	1f 90       	pop	r1
    1036:	18 95       	reti

00001038 <__vector_26>:
}
#endif

#if (USART0 == 1)
ISR(USART0_UDRE_vect)
{
    1038:	1f 92       	push	r1
    103a:	0f 92       	push	r0
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	0f 92       	push	r0
    1040:	11 24       	eor	r1, r1
    1042:	0b b6       	in	r0, 0x3b	; 59
    1044:	0f 92       	push	r0
    1046:	2f 93       	push	r18
    1048:	3f 93       	push	r19
    104a:	4f 93       	push	r20
    104c:	5f 93       	push	r21
    104e:	6f 93       	push	r22
    1050:	7f 93       	push	r23
    1052:	8f 93       	push	r24
    1054:	9f 93       	push	r25
    1056:	af 93       	push	r26
    1058:	bf 93       	push	r27
    105a:	ef 93       	push	r30
    105c:	ff 93       	push	r31
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	0f 92       	push	r0
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    return usart[usart_number].buffer[direction].write - usart[usart_number].buffer[direction].read;
    1068:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <usart+0x103>
    106c:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <usart+0x102>
    uint8_t data;
    if (buffer_level(0, TX) > 0)
    1070:	98 17       	cp	r25, r24
    1072:	b9 f1       	breq	.+110    	; 0x10e2 <__vector_26+0xaa>
    {
        /* check if usart is in 9-bit mode */
        if (UCSR0B & (1 << 2))
    1074:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1078:	82 ff       	sbrs	r24, 2
    107a:	0f c0       	rjmp	.+30     	; 0x109a <__vector_26+0x62>
        {
            read_buffer(0, TX, &data);
    107c:	ae 01       	movw	r20, r28
    107e:	4f 5f       	subi	r20, 0xFF	; 255
    1080:	5f 4f       	sbci	r21, 0xFF	; 255
    1082:	61 e0       	ldi	r22, 0x01	; 1
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	0e 94 77 06 	call	0xcee	; 0xcee <read_buffer>
            if (data & 0x01)
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	80 ff       	sbrs	r24, 0
    108e:	25 c0       	rjmp	.+74     	; 0x10da <__vector_26+0xa2>
                UCSR0B |= (1 << TXB80);
    1090:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1094:	81 60       	ori	r24, 0x01	; 1
            else
                UCSR0B &= ~(1 << TXB80);
    1096:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
        }
        read_buffer(0, TX, &data);
    109a:	ae 01       	movw	r20, r28
    109c:	4f 5f       	subi	r20, 0xFF	; 255
    109e:	5f 4f       	sbci	r21, 0xFF	; 255
    10a0:	61 e0       	ldi	r22, 0x01	; 1
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	0e 94 77 06 	call	0xcee	; 0xcee <read_buffer>
        UDR0 = data;
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
        return;
    }
    UCSR0B &= ~(1 << UDRIE0);
}
    10ae:	0f 90       	pop	r0
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	ff 91       	pop	r31
    10b6:	ef 91       	pop	r30
    10b8:	bf 91       	pop	r27
    10ba:	af 91       	pop	r26
    10bc:	9f 91       	pop	r25
    10be:	8f 91       	pop	r24
    10c0:	7f 91       	pop	r23
    10c2:	6f 91       	pop	r22
    10c4:	5f 91       	pop	r21
    10c6:	4f 91       	pop	r20
    10c8:	3f 91       	pop	r19
    10ca:	2f 91       	pop	r18
    10cc:	0f 90       	pop	r0
    10ce:	0b be       	out	0x3b, r0	; 59
    10d0:	0f 90       	pop	r0
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	0f 90       	pop	r0
    10d6:	1f 90       	pop	r1
    10d8:	18 95       	reti
                UCSR0B &= ~(1 << TXB80);
    10da:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    10de:	8e 7f       	andi	r24, 0xFE	; 254
    10e0:	da cf       	rjmp	.-76     	; 0x1096 <__vector_26+0x5e>
    UCSR0B &= ~(1 << UDRIE0);
    10e2:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    10e6:	8f 7d       	andi	r24, 0xDF	; 223
    10e8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    10ec:	e0 cf       	rjmp	.-64     	; 0x10ae <__vector_26+0x76>

000010ee <__vector_37>:
#endif

#if (USART1 == 1)
ISR(USART1_UDRE_vect)
{
    10ee:	1f 92       	push	r1
    10f0:	0f 92       	push	r0
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	0f 92       	push	r0
    10f6:	11 24       	eor	r1, r1
    10f8:	0b b6       	in	r0, 0x3b	; 59
    10fa:	0f 92       	push	r0
    10fc:	2f 93       	push	r18
    10fe:	3f 93       	push	r19
    1100:	4f 93       	push	r20
    1102:	5f 93       	push	r21
    1104:	6f 93       	push	r22
    1106:	7f 93       	push	r23
    1108:	8f 93       	push	r24
    110a:	9f 93       	push	r25
    110c:	af 93       	push	r26
    110e:	bf 93       	push	r27
    1110:	ef 93       	push	r30
    1112:	ff 93       	push	r31
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	0f 92       	push	r0
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    return usart[usart_number].buffer[direction].write - usart[usart_number].buffer[direction].read;
    111e:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <usart+0x20f>
    1122:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <usart+0x20e>
    uint8_t data;
    if (buffer_level(1, TX) > 0)
    1126:	98 17       	cp	r25, r24
    1128:	b9 f1       	breq	.+110    	; 0x1198 <__vector_37+0xaa>
    {
        /* check if usart is in 9-bit mode */
        if (UCSR1B & (1 << 2))
    112a:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    112e:	82 ff       	sbrs	r24, 2
    1130:	0f c0       	rjmp	.+30     	; 0x1150 <__vector_37+0x62>
        {

            read_buffer(1, TX, &data);
    1132:	ae 01       	movw	r20, r28
    1134:	4f 5f       	subi	r20, 0xFF	; 255
    1136:	5f 4f       	sbci	r21, 0xFF	; 255
    1138:	61 e0       	ldi	r22, 0x01	; 1
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	0e 94 77 06 	call	0xcee	; 0xcee <read_buffer>
            if (data & 0x01)
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	80 ff       	sbrs	r24, 0
    1144:	25 c0       	rjmp	.+74     	; 0x1190 <__vector_37+0xa2>
                UCSR1B |= (1 << TXB81);
    1146:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    114a:	81 60       	ori	r24, 0x01	; 1
            else
                UCSR1B &= ~(1 << TXB81);
    114c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
        }
        read_buffer(1, TX, &data);
    1150:	ae 01       	movw	r20, r28
    1152:	4f 5f       	subi	r20, 0xFF	; 255
    1154:	5f 4f       	sbci	r21, 0xFF	; 255
    1156:	61 e0       	ldi	r22, 0x01	; 1
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	0e 94 77 06 	call	0xcee	; 0xcee <read_buffer>
        UDR1 = data;
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
        return;
    }
    UCSR1B &= ~(1 << UDRIE1);
}
    1164:	0f 90       	pop	r0
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	ff 91       	pop	r31
    116c:	ef 91       	pop	r30
    116e:	bf 91       	pop	r27
    1170:	af 91       	pop	r26
    1172:	9f 91       	pop	r25
    1174:	8f 91       	pop	r24
    1176:	7f 91       	pop	r23
    1178:	6f 91       	pop	r22
    117a:	5f 91       	pop	r21
    117c:	4f 91       	pop	r20
    117e:	3f 91       	pop	r19
    1180:	2f 91       	pop	r18
    1182:	0f 90       	pop	r0
    1184:	0b be       	out	0x3b, r0	; 59
    1186:	0f 90       	pop	r0
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	0f 90       	pop	r0
    118c:	1f 90       	pop	r1
    118e:	18 95       	reti
                UCSR1B &= ~(1 << TXB81);
    1190:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    1194:	8e 7f       	andi	r24, 0xFE	; 254
    1196:	da cf       	rjmp	.-76     	; 0x114c <__vector_37+0x5e>
    UCSR1B &= ~(1 << UDRIE1);
    1198:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    119c:	8f 7d       	andi	r24, 0xDF	; 223
    119e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    11a2:	e0 cf       	rjmp	.-64     	; 0x1164 <__vector_37+0x76>

000011a4 <__vector_52>:
#endif

#if (USART2 == 1)
ISR(USART2_UDRE_vect)
{
    11a4:	1f 92       	push	r1
    11a6:	0f 92       	push	r0
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	0f 92       	push	r0
    11ac:	11 24       	eor	r1, r1
    11ae:	0b b6       	in	r0, 0x3b	; 59
    11b0:	0f 92       	push	r0
    11b2:	2f 93       	push	r18
    11b4:	3f 93       	push	r19
    11b6:	4f 93       	push	r20
    11b8:	5f 93       	push	r21
    11ba:	6f 93       	push	r22
    11bc:	7f 93       	push	r23
    11be:	8f 93       	push	r24
    11c0:	9f 93       	push	r25
    11c2:	af 93       	push	r26
    11c4:	bf 93       	push	r27
    11c6:	ef 93       	push	r30
    11c8:	ff 93       	push	r31
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	0f 92       	push	r0
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    return usart[usart_number].buffer[direction].write - usart[usart_number].buffer[direction].read;
    11d4:	90 91 1b 05 	lds	r25, 0x051B	; 0x80051b <usart+0x31b>
    11d8:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <usart+0x31a>
    uint8_t data;
    if (buffer_level(2, TX) > 0)
    11dc:	98 17       	cp	r25, r24
    11de:	b9 f1       	breq	.+110    	; 0x124e <__vector_52+0xaa>
    {
        /* check if usart is in 9-bit mode */
        if (UCSR2B & (1 << 2))
    11e0:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    11e4:	82 ff       	sbrs	r24, 2
    11e6:	0f c0       	rjmp	.+30     	; 0x1206 <__vector_52+0x62>
        {
            read_buffer(2, TX, &data);
    11e8:	ae 01       	movw	r20, r28
    11ea:	4f 5f       	subi	r20, 0xFF	; 255
    11ec:	5f 4f       	sbci	r21, 0xFF	; 255
    11ee:	61 e0       	ldi	r22, 0x01	; 1
    11f0:	82 e0       	ldi	r24, 0x02	; 2
    11f2:	0e 94 77 06 	call	0xcee	; 0xcee <read_buffer>
            if (data & 0x01)
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	80 ff       	sbrs	r24, 0
    11fa:	25 c0       	rjmp	.+74     	; 0x1246 <__vector_52+0xa2>
                UCSR2B |= (1 << TXB82);
    11fc:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1200:	81 60       	ori	r24, 0x01	; 1
            else
                UCSR2B &= ~(1 << TXB82);
    1202:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
        }
        read_buffer(2, TX, &data);
    1206:	ae 01       	movw	r20, r28
    1208:	4f 5f       	subi	r20, 0xFF	; 255
    120a:	5f 4f       	sbci	r21, 0xFF	; 255
    120c:	61 e0       	ldi	r22, 0x01	; 1
    120e:	82 e0       	ldi	r24, 0x02	; 2
    1210:	0e 94 77 06 	call	0xcee	; 0xcee <read_buffer>
        UDR2 = data;
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
        return;
    }
    UCSR2B &= ~(1 << UDRIE2);
}
    121a:	0f 90       	pop	r0
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	ff 91       	pop	r31
    1222:	ef 91       	pop	r30
    1224:	bf 91       	pop	r27
    1226:	af 91       	pop	r26
    1228:	9f 91       	pop	r25
    122a:	8f 91       	pop	r24
    122c:	7f 91       	pop	r23
    122e:	6f 91       	pop	r22
    1230:	5f 91       	pop	r21
    1232:	4f 91       	pop	r20
    1234:	3f 91       	pop	r19
    1236:	2f 91       	pop	r18
    1238:	0f 90       	pop	r0
    123a:	0b be       	out	0x3b, r0	; 59
    123c:	0f 90       	pop	r0
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	0f 90       	pop	r0
    1242:	1f 90       	pop	r1
    1244:	18 95       	reti
                UCSR2B &= ~(1 << TXB82);
    1246:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    124a:	8e 7f       	andi	r24, 0xFE	; 254
    124c:	da cf       	rjmp	.-76     	; 0x1202 <__vector_52+0x5e>
    UCSR2B &= ~(1 << UDRIE2);
    124e:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1252:	8f 7d       	andi	r24, 0xDF	; 223
    1254:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1258:	e0 cf       	rjmp	.-64     	; 0x121a <__vector_52+0x76>

0000125a <statePos>:

int statePos()
{

    return m;
}
    125a:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <m>
    125e:	90 91 9e 07 	lds	r25, 0x079E	; 0x80079e <m+0x1>
    1262:	08 95       	ret

00001264 <mdb_reset>:
{
#if TXSWITCH == 1
    txSwitchState(PIN12, 0);
#endif
    // Wait for enough data in buffer to proceed reset
    if (buffer_level(MDB_USART, RX) < 2)
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	0e 94 61 06 	call	0xcc2	; 0xcc2 <buffer_level>
    126c:	82 30       	cpi	r24, 0x02	; 2
    126e:	70 f1       	brcs	.+92     	; 0x12cc <mdb_reset+0x68>
#if DEBUG == 1
    send_str_p(UPLINK_USART, PSTR("RESET\r\n"));
#endif

    // validate checksum
    if (recv_mdb(MDB_USART) != MDB_RESET)
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
    1276:	40 97       	sbiw	r24, 0x10	; 16
    1278:	49 f0       	breq	.+18     	; 0x128c <mdb_reset+0x28>
    {
        mdb_active_cmd = MDB_IDLE;
    127a:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
        mdb_poll_reply = MDB_REPLY_ACK;
    127e:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
        send_str_p(UPLINK_USART, PSTR("Error: invalid checksum for [RESET]\r\n"));
    1282:	60 e2       	ldi	r22, 0x20	; 32
    1284:	75 e0       	ldi	r23, 0x05	; 5
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	0c 94 29 07 	jmp	0xe52	; 0xe52 <send_str_p>
#endif
        return;
    }

    // Reset everything
    vmc.feature_level = 0;
    128c:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <vmc>
    vmc.dispaly_cols = 0;
    1290:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <vmc+0x1>
    vmc.dispaly_rows = 0;
    1294:	10 92 a5 07 	sts	0x07A5, r1	; 0x8007a5 <vmc+0x2>
    vmc.dispaly_info = 0;
    1298:	10 92 a6 07 	sts	0x07A6, r1	; 0x8007a6 <vmc+0x3>
    price.max = 0;
    129c:	10 92 a0 07 	sts	0x07A0, r1	; 0x8007a0 <price+0x1>
    12a0:	10 92 9f 07 	sts	0x079F, r1	; 0x80079f <price>
    price.min = 0;
    12a4:	10 92 a2 07 	sts	0x07A2, r1	; 0x8007a2 <price+0x3>
    12a8:	10 92 a1 07 	sts	0x07A1, r1	; 0x8007a1 <price+0x2>

    // Send ACK
    send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY);
    12ac:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	71 e0       	ldi	r23, 0x01	; 1
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    reset_done = TRUE;
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <reset_done>
    mdb_state = MDB_INACTIVE; //orignal
    12c0:	10 92 aa 07 	sts	0x07AA, r1	; 0x8007aa <mdb_state>
    //mdb_state= MDB_ENABLED;///not orignal
    mdb_active_cmd = MDB_IDLE;
    12c4:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>

    mdb_poll_reply = MDB_REPLY_JUST_RESET;
    12c8:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <mdb_poll_reply>
}
    12cc:	08 95       	ret

000012ce <mdb_stage3>:
        break;
    }
}

void mdb_stage3(void)
{
    12ce:	af 92       	push	r10
    12d0:	bf 92       	push	r11
    12d2:	cf 92       	push	r12
    12d4:	df 92       	push	r13
    12d6:	ef 92       	push	r14
    12d8:	ff 92       	push	r15
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	c0 5d       	subi	r28, 0xD0	; 208
    12e8:	d1 09       	sbc	r29, r1
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    uint8_t data2[128] = {0};
    12f4:	1a 82       	std	Y+2, r1	; 0x02
    12f6:	19 82       	std	Y+1, r1	; 0x01
    12f8:	fe 01       	movw	r30, r28
    12fa:	33 96       	adiw	r30, 0x03	; 3
    12fc:	8e e7       	ldi	r24, 0x7E	; 126
    12fe:	df 01       	movw	r26, r30
    1300:	1d 92       	st	X+, r1
    1302:	8a 95       	dec	r24
    1304:	e9 f7       	brne	.-6      	; 0x1300 <mdb_stage3+0x32>
    uint8_t index = 0;

    send_str_p(UPLINK_USART, PSTR("IN STAGE3\r\n"));
    1306:	6c ea       	ldi	r22, 0xAC	; 172
    1308:	74 e0       	ldi	r23, 0x04	; 4
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>

    //if(buffer_level(MDB_USART,RX) < 12) return;
    while (buffer_level(MDB_USART, RX) <= 62)
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	0e 94 61 06 	call	0xcc2	; 0xcc2 <buffer_level>
    1318:	8f 33       	cpi	r24, 0x3F	; 63
    131a:	d0 f3       	brcs	.-12     	; 0x1310 <mdb_stage3+0x42>
    {
        continue;
    }
    send_str_p(UPLINK_USART, PSTR("02 IN STAGE3\r\n"));
    131c:	6d e9       	ldi	r22, 0x9D	; 157
    131e:	74 e0       	ldi	r23, 0x04	; 4
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
    // fetch the data from buffer
    for (index = 0; index < 31; index++)
    1326:	fe 01       	movw	r30, r28
    1328:	31 96       	adiw	r30, 0x01	; 1
    132a:	6f 01       	movw	r12, r30
    132c:	7e 01       	movw	r14, r28
    132e:	f0 e2       	ldi	r31, 0x20	; 32
    1330:	ef 0e       	add	r14, r31
    1332:	f1 1c       	adc	r15, r1
    send_str_p(UPLINK_USART, PSTR("02 IN STAGE3\r\n"));
    1334:	86 01       	movw	r16, r12
    {
        data2[index] = (uint8_t)recv_mdb(MDB_USART);
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
    133c:	d8 01       	movw	r26, r16
    133e:	8d 93       	st	X+, r24
    1340:	8d 01       	movw	r16, r26
    for (index = 0; index < 31; index++)
    1342:	ae 15       	cp	r26, r14
    1344:	bf 05       	cpc	r27, r15
    1346:	b9 f7       	brne	.-18     	; 0x1336 <mdb_stage3+0x68>
    }

    //sprintf(abc, "STAGE 3 data[0]=%#08x   ,, data[1]=%#08x ,, data[2]=%#08x\r\n",data2[0],data2[1],data2[2]);
    send_str_p(0, PSTR("Sending up stage 3 data\r\n"));
    1348:	63 e8       	ldi	r22, 0x83	; 131
    134a:	74 e0       	ldi	r23, 0x04	; 4
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>

    send_mdb(MDB_USART, s3d.d0, MDB_USART_TX_READY);
    1352:	60 91 26 05 	lds	r22, 0x0526	; 0x800526 <s3d>
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d1, MDB_USART_TX_READY);
    1362:	60 91 27 05 	lds	r22, 0x0527	; 0x800527 <s3d+0x1>
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d2, MDB_USART_TX_READY);
    1372:	60 91 28 05 	lds	r22, 0x0528	; 0x800528 <s3d+0x2>
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d3, MDB_USART_TX_READY);
    1382:	60 91 29 05 	lds	r22, 0x0529	; 0x800529 <s3d+0x3>
    1386:	70 e0       	ldi	r23, 0x00	; 0
    1388:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d4, MDB_USART_TX_READY);
    1392:	60 91 2a 05 	lds	r22, 0x052A	; 0x80052a <s3d+0x4>
    1396:	70 e0       	ldi	r23, 0x00	; 0
    1398:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d5, MDB_USART_TX_READY);
    13a2:	60 91 2b 05 	lds	r22, 0x052B	; 0x80052b <s3d+0x5>
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d6, MDB_USART_TX_READY);
    13b2:	60 91 2c 05 	lds	r22, 0x052C	; 0x80052c <s3d+0x6>
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d7, MDB_USART_TX_READY);
    13c2:	60 91 2d 05 	lds	r22, 0x052D	; 0x80052d <s3d+0x7>
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d8, MDB_USART_TX_READY);
    13d2:	60 91 2e 05 	lds	r22, 0x052E	; 0x80052e <s3d+0x8>
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d9, MDB_USART_TX_READY);
    13e2:	60 91 2f 05 	lds	r22, 0x052F	; 0x80052f <s3d+0x9>
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d10, MDB_USART_TX_READY);
    13f2:	60 91 30 05 	lds	r22, 0x0530	; 0x800530 <s3d+0xa>
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d11, MDB_USART_TX_READY);
    1402:	60 91 31 05 	lds	r22, 0x0531	; 0x800531 <s3d+0xb>
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d12, MDB_USART_TX_READY);
    1412:	60 91 32 05 	lds	r22, 0x0532	; 0x800532 <s3d+0xc>
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d13, MDB_USART_TX_READY);
    1422:	60 91 33 05 	lds	r22, 0x0533	; 0x800533 <s3d+0xd>
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d14, MDB_USART_TX_READY);
    1432:	60 91 34 05 	lds	r22, 0x0534	; 0x800534 <s3d+0xe>
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d15, MDB_USART_TX_READY);
    1442:	60 91 35 05 	lds	r22, 0x0535	; 0x800535 <s3d+0xf>
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d16, MDB_USART_TX_READY);
    1452:	60 91 36 05 	lds	r22, 0x0536	; 0x800536 <s3d+0x10>
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d17, MDB_USART_TX_READY);
    1462:	60 91 37 05 	lds	r22, 0x0537	; 0x800537 <s3d+0x11>
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d18, MDB_USART_TX_READY);
    1472:	60 91 38 05 	lds	r22, 0x0538	; 0x800538 <s3d+0x12>
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d19, MDB_USART_TX_READY);
    1482:	60 91 39 05 	lds	r22, 0x0539	; 0x800539 <s3d+0x13>
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d20, MDB_USART_TX_READY);
    1492:	60 91 3a 05 	lds	r22, 0x053A	; 0x80053a <s3d+0x14>
    1496:	70 e0       	ldi	r23, 0x00	; 0
    1498:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d21, MDB_USART_TX_READY);
    14a2:	60 91 3b 05 	lds	r22, 0x053B	; 0x80053b <s3d+0x15>
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d22, MDB_USART_TX_READY);
    14b2:	60 91 3c 05 	lds	r22, 0x053C	; 0x80053c <s3d+0x16>
    14b6:	70 e0       	ldi	r23, 0x00	; 0
    14b8:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d23, MDB_USART_TX_READY);
    14c2:	60 91 3d 05 	lds	r22, 0x053D	; 0x80053d <s3d+0x17>
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d24, MDB_USART_TX_READY);
    14d2:	60 91 3e 05 	lds	r22, 0x053E	; 0x80053e <s3d+0x18>
    14d6:	70 e0       	ldi	r23, 0x00	; 0
    14d8:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d25, MDB_USART_TX_READY);
    14e2:	60 91 3f 05 	lds	r22, 0x053F	; 0x80053f <s3d+0x19>
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d26, MDB_USART_TX_READY);
    14f2:	60 91 40 05 	lds	r22, 0x0540	; 0x800540 <s3d+0x1a>
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d27, MDB_USART_TX_READY);
    1502:	60 91 41 05 	lds	r22, 0x0541	; 0x800541 <s3d+0x1b>
    1506:	70 e0       	ldi	r23, 0x00	; 0
    1508:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d28, MDB_USART_TX_READY);
    1512:	60 91 42 05 	lds	r22, 0x0542	; 0x800542 <s3d+0x1c>
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d29, MDB_USART_TX_READY);
    1522:	60 91 43 05 	lds	r22, 0x0543	; 0x800543 <s3d+0x1d>
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    send_mdb(MDB_USART, s3d.d30, MDB_USART_TX_READY);
    1532:	60 91 44 05 	lds	r22, 0x0544	; 0x800544 <s3d+0x1e>
    1536:	70 91 45 05 	lds	r23, 0x0545	; 0x800545 <s3d+0x1f>
    153a:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>

    char abc[80];
    for (int i = 0; i < 32; i++)
    1544:	10 e0       	ldi	r17, 0x00	; 0
    1546:	00 e0       	ldi	r16, 0x00	; 0
    {
        sprintf(abc, "STAGE 3 DATA[%d] = %#08x", i, data2[i]);
    1548:	81 e8       	ldi	r24, 0x81	; 129
    154a:	a8 2e       	mov	r10, r24
    154c:	85 e0       	ldi	r24, 0x05	; 5
    154e:	b8 2e       	mov	r11, r24
    1550:	7e 01       	movw	r14, r28
    1552:	b1 e8       	ldi	r27, 0x81	; 129
    1554:	eb 0e       	add	r14, r27
    1556:	f1 1c       	adc	r15, r1
    1558:	f6 01       	movw	r30, r12
    155a:	81 91       	ld	r24, Z+
    155c:	6f 01       	movw	r12, r30
    155e:	1f 92       	push	r1
    1560:	8f 93       	push	r24
    1562:	1f 93       	push	r17
    1564:	0f 93       	push	r16
    1566:	bf 92       	push	r11
    1568:	af 92       	push	r10
    156a:	ff 92       	push	r15
    156c:	ef 92       	push	r14
    156e:	0e 94 f6 16 	call	0x2dec	; 0x2dec <sprintf>
        send_str(UPLINK_USART, abc);
    1572:	b7 01       	movw	r22, r14
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	0e 94 f4 06 	call	0xde8	; 0xde8 <send_str>
    for (int i = 0; i < 32; i++)
    157a:	0f 5f       	subi	r16, 0xFF	; 255
    157c:	1f 4f       	sbci	r17, 0xFF	; 255
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
    1588:	00 32       	cpi	r16, 0x20	; 32
    158a:	11 05       	cpc	r17, r1
    158c:	29 f7       	brne	.-54     	; 0x1558 <mdb_stage3+0x28a>

    //   mdb_active_cmd = MDB_IDLE;
    // mdb_poll_reply = MDB_REPLY_ACK;

    return;
}
    158e:	c0 53       	subi	r28, 0x30	; 48
    1590:	df 4f       	sbci	r29, 0xFF	; 255
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	1f 91       	pop	r17
    15a2:	0f 91       	pop	r16
    15a4:	ff 90       	pop	r15
    15a6:	ef 90       	pop	r14
    15a8:	df 90       	pop	r13
    15aa:	cf 90       	pop	r12
    15ac:	bf 90       	pop	r11
    15ae:	af 90       	pop	r10
    15b0:	08 95       	ret

000015b2 <mdb_setup>:
{
    15b2:	af 92       	push	r10
    15b4:	bf 92       	push	r11
    15b6:	cf 92       	push	r12
    15b8:	df 92       	push	r13
    15ba:	ef 92       	push	r14
    15bc:	ff 92       	push	r15
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	ae 97       	sbiw	r28, 0x2e	; 46
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    uint8_t data[6] = {0, 0, 0, 0, 0, 0};
    15d6:	86 e0       	ldi	r24, 0x06	; 6
    15d8:	eb e7       	ldi	r30, 0x7B	; 123
    15da:	f5 e0       	ldi	r31, 0x05	; 5
    15dc:	de 01       	movw	r26, r28
    15de:	99 96       	adiw	r26, 0x29	; 41
    15e0:	01 90       	ld	r0, Z+
    15e2:	0d 92       	st	X+, r0
    15e4:	8a 95       	dec	r24
    15e6:	e1 f7       	brne	.-8      	; 0x15e0 <mdb_setup+0x2e>
    if (state < 2)
    15e8:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <state.36>
    15ec:	82 30       	cpi	r24, 0x02	; 2
    15ee:	08 f0       	brcs	.+2      	; 0x15f2 <mdb_setup+0x40>
    15f0:	77 c0       	rjmp	.+238    	; 0x16e0 <mdb_setup+0x12e>
        if (buffer_level(MDB_USART, RX) < 12)
    15f2:	60 e0       	ldi	r22, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	0e 94 61 06 	call	0xcc2	; 0xcc2 <buffer_level>
    15fa:	8c 30       	cpi	r24, 0x0C	; 12
    15fc:	08 f4       	brcc	.+2      	; 0x1600 <mdb_setup+0x4e>
    15fe:	5d c0       	rjmp	.+186    	; 0x16ba <mdb_setup+0x108>
    1600:	7e 01       	movw	r14, r28
    1602:	89 e2       	ldi	r24, 0x29	; 41
    1604:	e8 0e       	add	r14, r24
    1606:	f1 1c       	adc	r15, r1
    1608:	6e 01       	movw	r12, r28
    160a:	9f e2       	ldi	r25, 0x2F	; 47
    160c:	c9 0e       	add	r12, r25
    160e:	d1 1c       	adc	r13, r1
            data[index] = (uint8_t)recv_mdb(MDB_USART);
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
    1616:	f7 01       	movw	r30, r14
    1618:	81 93       	st	Z+, r24
    161a:	7f 01       	movw	r14, r30
        for (index = 0; index < 6; index++)
    161c:	ec 15       	cp	r30, r12
    161e:	fd 05       	cpc	r31, r13
    1620:	b9 f7       	brne	.-18     	; 0x1610 <mdb_setup+0x5e>
        checksum += data[0] + data[1] + data[2] + data[3] + data[4];
    1622:	f9 a4       	ldd	r15, Y+41	; 0x29
    1624:	8a a5       	ldd	r24, Y+42	; 0x2a
    1626:	8f 0d       	add	r24, r15
    1628:	99 27       	eor	r25, r25
    162a:	99 1f       	adc	r25, r25
    162c:	2b a5       	ldd	r18, Y+43	; 0x2b
    162e:	82 0f       	add	r24, r18
    1630:	91 1d       	adc	r25, r1
    1632:	2c a5       	ldd	r18, Y+44	; 0x2c
    1634:	82 0f       	add	r24, r18
    1636:	91 1d       	adc	r25, r1
    1638:	2d a5       	ldd	r18, Y+45	; 0x2d
    163a:	82 0f       	add	r24, r18
    163c:	91 1d       	adc	r25, r1
    163e:	20 91 24 05 	lds	r18, 0x0524	; 0x800524 <checksum.35>
    1642:	30 91 25 05 	lds	r19, 0x0525	; 0x800525 <checksum.35+0x1>
    1646:	82 0f       	add	r24, r18
    1648:	93 1f       	adc	r25, r19
        checksum = checksum & 0xFF;
    164a:	99 27       	eor	r25, r25
    164c:	90 93 25 05 	sts	0x0525, r25	; 0x800525 <checksum.35+0x1>
    1650:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <checksum.35>
        sprintf(abc, "data[5]: %#08x ;;checksum-calc: %#08x\r\n", data[5], checksum);
    1654:	2e a5       	ldd	r18, Y+46	; 0x2e
    1656:	9f 93       	push	r25
    1658:	8f 93       	push	r24
    165a:	a2 2e       	mov	r10, r18
    165c:	b1 2c       	mov	r11, r1
    165e:	1f 92       	push	r1
    1660:	2f 93       	push	r18
    1662:	8a e9       	ldi	r24, 0x9A	; 154
    1664:	95 e0       	ldi	r25, 0x05	; 5
    1666:	9f 93       	push	r25
    1668:	8f 93       	push	r24
    166a:	ce 01       	movw	r24, r28
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	6c 01       	movw	r12, r24
    1670:	9f 93       	push	r25
    1672:	8f 93       	push	r24
    1674:	0e 94 f6 16 	call	0x2dec	; 0x2dec <sprintf>
        send_str(UPLINK_USART, abc);
    1678:	b6 01       	movw	r22, r12
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	0e 94 f4 06 	call	0xde8	; 0xde8 <send_str>
        if (checksum != data[5])
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <checksum.35>
    168e:	90 91 25 05 	lds	r25, 0x0525	; 0x800525 <checksum.35+0x1>
    1692:	a8 16       	cp	r10, r24
    1694:	b9 06       	cpc	r11, r25
    1696:	11 f1       	breq	.+68     	; 0x16dc <mdb_setup+0x12a>
            state = 0;
    1698:	10 92 b3 07 	sts	0x07B3, r1	; 0x8007b3 <state.36>
            mdb_active_cmd = MDB_IDLE;
    169c:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
            mdb_poll_reply = MDB_REPLY_ACK;
    16a0:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
            checksum = MDB_SETUP; //MDB_SETUP;
    16a4:	81 e1       	ldi	r24, 0x11	; 17
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	90 93 25 05 	sts	0x0525, r25	; 0x800525 <checksum.35+0x1>
    16ac:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <checksum.35>
            send_str_p(UPLINK_USART, PSTR("Error: invalid checksum [SETUP]\r\n"));
    16b0:	6e ef       	ldi	r22, 0xFE	; 254
    16b2:	74 e0       	ldi	r23, 0x04	; 4
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
}
    16ba:	ae 96       	adiw	r28, 0x2e	; 46
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	ff 90       	pop	r15
    16d0:	ef 90       	pop	r14
    16d2:	df 90       	pop	r13
    16d4:	cf 90       	pop	r12
    16d6:	bf 90       	pop	r11
    16d8:	af 90       	pop	r10
    16da:	08 95       	ret
        state = data[0];
    16dc:	f0 92 b3 07 	sts	0x07B3, r15	; 0x8007b3 <state.36>
    switch (state)
    16e0:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <state.36>
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	09 f4       	brne	.+2      	; 0x16ea <mdb_setup+0x138>
    16e8:	8c c0       	rjmp	.+280    	; 0x1802 <mdb_setup+0x250>
    16ea:	82 30       	cpi	r24, 0x02	; 2
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <mdb_setup+0x13e>
    16ee:	d2 c0       	rjmp	.+420    	; 0x1894 <mdb_setup+0x2e2>
    16f0:	81 11       	cpse	r24, r1
    16f2:	f8 c0       	rjmp	.+496    	; 0x18e4 <mdb_setup+0x332>
        vmc.feature_level = data[1];
    16f4:	8a a5       	ldd	r24, Y+42	; 0x2a
    16f6:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <vmc>
        vmc.dispaly_cols = data[2];
    16fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    16fc:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <vmc+0x1>
        vmc.dispaly_rows = data[3];
    1700:	8c a5       	ldd	r24, Y+44	; 0x2c
    1702:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <vmc+0x2>
        vmc.dispaly_info = data[4];
    1706:	8d a5       	ldd	r24, Y+45	; 0x2d
    1708:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <vmc+0x3>
        checksum = ((cd.reader_cfg +
    170c:	60 91 46 05 	lds	r22, 0x0546	; 0x800546 <cd>
                     (cd.country_code >> 8) +
    1710:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <cd+0x2>
    1714:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <cd+0x3>
    1718:	09 2f       	mov	r16, r25
    171a:	10 e0       	ldi	r17, 0x00	; 0
                     cd.max_resp_time +
    171c:	80 0f       	add	r24, r16
    171e:	91 2f       	mov	r25, r17
    1720:	91 1d       	adc	r25, r1
                     cd.scale_factor +
    1722:	20 91 4a 05 	lds	r18, 0x054A	; 0x80054a <cd+0x4>
                     cd.max_resp_time +
    1726:	82 0f       	add	r24, r18
    1728:	91 1d       	adc	r25, r1
                     cd.decimal_places +
    172a:	20 91 4b 05 	lds	r18, 0x054B	; 0x80054b <cd+0x5>
                     cd.max_resp_time +
    172e:	82 0f       	add	r24, r18
    1730:	91 1d       	adc	r25, r1
    1732:	20 91 4c 05 	lds	r18, 0x054C	; 0x80054c <cd+0x6>
    1736:	82 0f       	add	r24, r18
    1738:	91 1d       	adc	r25, r1
                     cd.misc_options) &
    173a:	20 91 4d 05 	lds	r18, 0x054D	; 0x80054d <cd+0x7>
                     cd.max_resp_time +
    173e:	82 0f       	add	r24, r18
    1740:	91 1d       	adc	r25, r1
                     cd.feature_level +
    1742:	20 91 47 05 	lds	r18, 0x0547	; 0x800547 <cd+0x1>
        checksum = ((cd.reader_cfg +
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	26 0f       	add	r18, r22
    174a:	37 2f       	mov	r19, r23
    174c:	31 1d       	adc	r19, r1
                     cd.max_resp_time +
    174e:	82 0f       	add	r24, r18
    1750:	93 1f       	adc	r25, r19
                     cd.misc_options) &
    1752:	99 27       	eor	r25, r25
                    0xFF) |
    1754:	91 60       	ori	r25, 0x01	; 1
        checksum = ((cd.reader_cfg +
    1756:	90 93 25 05 	sts	0x0525, r25	; 0x800525 <checksum.35+0x1>
    175a:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <checksum.35>
        send_mdb(MDB_USART, cd.reader_cfg, MDB_USART_TX_READY);
    175e:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        send_mdb(MDB_USART, cd.feature_level, MDB_USART_TX_READY);
    1768:	60 91 47 05 	lds	r22, 0x0547	; 0x800547 <cd+0x1>
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        send_mdb(MDB_USART, (cd.country_code >> 8), MDB_USART_TX_READY);
    1778:	60 91 49 05 	lds	r22, 0x0549	; 0x800549 <cd+0x3>
    177c:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        send_mdb(MDB_USART, (cd.country_code & 0xFF), MDB_USART_TX_READY);
    1788:	60 91 48 05 	lds	r22, 0x0548	; 0x800548 <cd+0x2>
    178c:	70 91 49 05 	lds	r23, 0x0549	; 0x800549 <cd+0x3>
    1790:	77 27       	eor	r23, r23
    1792:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        send_mdb(MDB_USART, cd.scale_factor, MDB_USART_TX_READY);
    179c:	60 91 4a 05 	lds	r22, 0x054A	; 0x80054a <cd+0x4>
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        send_mdb(MDB_USART, cd.decimal_places, MDB_USART_TX_READY);
    17ac:	60 91 4b 05 	lds	r22, 0x054B	; 0x80054b <cd+0x5>
    17b0:	70 e0       	ldi	r23, 0x00	; 0
    17b2:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        send_mdb(MDB_USART, cd.max_resp_time, MDB_USART_TX_READY);
    17bc:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <cd+0x6>
    17c0:	70 e0       	ldi	r23, 0x00	; 0
    17c2:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        send_mdb(MDB_USART, cd.misc_options, MDB_USART_TX_READY);
    17cc:	60 91 4d 05 	lds	r22, 0x054D	; 0x80054d <cd+0x7>
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        send_mdb(MDB_USART, checksum, MDB_USART_TX_READY);
    17dc:	60 91 24 05 	lds	r22, 0x0524	; 0x800524 <checksum.35>
    17e0:	70 91 25 05 	lds	r23, 0x0525	; 0x800525 <checksum.35+0x1>
    17e4:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        state = 2;
    17ee:	82 e0       	ldi	r24, 0x02	; 2
    17f0:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <state.36>
        checksum = MDB_SETUP; //MDB_SETUP;
    17f4:	81 e1       	ldi	r24, 0x11	; 17
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	90 93 25 05 	sts	0x0525, r25	; 0x800525 <checksum.35+0x1>
    17fc:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <checksum.35>
        return;
    1800:	5c cf       	rjmp	.-328    	; 0x16ba <mdb_setup+0x108>
        price.max = (data[1] << 8) | data[2];
    1802:	8a a5       	ldd	r24, Y+42	; 0x2a
    1804:	9b a5       	ldd	r25, Y+43	; 0x2b
    1806:	98 27       	eor	r25, r24
    1808:	89 27       	eor	r24, r25
    180a:	98 27       	eor	r25, r24
    180c:	90 93 a0 07 	sts	0x07A0, r25	; 0x8007a0 <price+0x1>
    1810:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <price>
        price.min = (data[3] << 8) | data[4];
    1814:	8c a5       	ldd	r24, Y+44	; 0x2c
    1816:	9d a5       	ldd	r25, Y+45	; 0x2d
    1818:	98 27       	eor	r25, r24
    181a:	89 27       	eor	r24, r25
    181c:	98 27       	eor	r25, r24
    181e:	90 93 a2 07 	sts	0x07A2, r25	; 0x8007a2 <price+0x3>
    1822:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <price+0x2>
        send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY); /////*uncomment it
    1826:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    182a:	60 e0       	ldi	r22, 0x00	; 0
    182c:	71 e0       	ldi	r23, 0x01	; 1
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        mdb_state = MDB_ENABLED; ////////////try changing to ENABLED////orignal disabled
    1834:	82 e0       	ldi	r24, 0x02	; 2
    1836:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <mdb_state>
        state = 0; //orignal 0
    183a:	10 92 b3 07 	sts	0x07B3, r1	; 0x8007b3 <state.36>
        checksum = MDB_SETUP; //MDB_SETUP; //orginal is 17 in decimal
    183e:	81 e1       	ldi	r24, 0x11	; 17
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	90 93 25 05 	sts	0x0525, r25	; 0x800525 <checksum.35+0x1>
    1846:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <checksum.35>
        mdb_active_cmd = MDB_IDLE;
    184a:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
        mdb_poll_reply = MDB_REPLY_ACK;
    184e:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
        sprintf(abc2, "stage2checksum: %#08x mdb_poll_reply : %#08x\r\n", checksum, mdb_poll_reply);
    1852:	1f 92       	push	r1
    1854:	1f 92       	push	r1
    1856:	1f 92       	push	r1
    1858:	8f 93       	push	r24
    185a:	82 ec       	ldi	r24, 0xC2	; 194
    185c:	95 e0       	ldi	r25, 0x05	; 5
    185e:	9f 93       	push	r25
    1860:	8f 93       	push	r24
    1862:	8e 01       	movw	r16, r28
    1864:	0f 5f       	subi	r16, 0xFF	; 255
    1866:	1f 4f       	sbci	r17, 0xFF	; 255
    1868:	1f 93       	push	r17
    186a:	0f 93       	push	r16
    186c:	0e 94 f6 16 	call	0x2dec	; 0x2dec <sprintf>
        send_str(UPLINK_USART, abc2);
    1870:	b8 01       	movw	r22, r16
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	0e 94 f4 06 	call	0xde8	; 0xde8 <send_str>
        m = 1;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	90 93 9e 07 	sts	0x079E, r25	; 0x80079e <m+0x1>
    1880:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <m>
        mdb_stage3();
    1884:	0e 94 67 09 	call	0x12ce	; 0x12ce <mdb_stage3>
        return;
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	13 cf       	rjmp	.-474    	; 0x16ba <mdb_setup+0x108>
        if (buffer_level(MDB_USART, RX) < 2)
    1894:	60 e0       	ldi	r22, 0x00	; 0
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	0e 94 61 06 	call	0xcc2	; 0xcc2 <buffer_level>
    189c:	82 30       	cpi	r24, 0x02	; 2
    189e:	08 f4       	brcc	.+2      	; 0x18a2 <mdb_setup+0x2f0>
    18a0:	0c cf       	rjmp	.-488    	; 0x16ba <mdb_setup+0x108>
        data[0] = recv_mdb(MDB_USART);
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
            state = 0; ////0 in org
    18a8:	10 92 b3 07 	sts	0x07B3, r1	; 0x8007b3 <state.36>
            mdb_active_cmd = MDB_IDLE;
    18ac:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
            mdb_poll_reply = MDB_REPLY_ACK;
    18b0:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
        if (data[0] != 0x000 && data[0] != 0x001)
    18b4:	82 30       	cpi	r24, 0x02	; 2
    18b6:	08 f4       	brcc	.+2      	; 0x18ba <mdb_setup+0x308>
    18b8:	00 cf       	rjmp	.-512    	; 0x16ba <mdb_setup+0x108>
            send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [SETUP]"));
    18ba:	6c ed       	ldi	r22, 0xDC	; 220
    18bc:	74 e0       	ldi	r23, 0x04	; 4
    18be:	80 e0       	ldi	r24, 0x00	; 0
}
    18c0:	ae 96       	adiw	r28, 0x2e	; 46
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	ff 90       	pop	r15
    18d6:	ef 90       	pop	r14
    18d8:	df 90       	pop	r13
    18da:	cf 90       	pop	r12
    18dc:	bf 90       	pop	r11
    18de:	af 90       	pop	r10
            send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [SETUP]"));
    18e0:	0c 94 29 07 	jmp	0xe52	; 0xe52 <send_str_p>
        send_str_p(UPLINK_USART, PSTR("Error: unknown subcommand [SETUP]\r\n"));
    18e4:	68 eb       	ldi	r22, 0xB8	; 184
    18e6:	74 e0       	ldi	r23, 0x04	; 4
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
        state = 0;
    18ee:	10 92 b3 07 	sts	0x07B3, r1	; 0x8007b3 <state.36>
        mdb_active_cmd = MDB_IDLE;
    18f2:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
        mdb_poll_reply = MDB_REPLY_ACK;
    18f6:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
        return;
    18fa:	df ce       	rjmp	.-578    	; 0x16ba <mdb_setup+0x108>

000018fc <mdb_poll>:
void mdb_poll(void)
{
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29

    static uint8_t state = 0;
    uint16_t checksum = 0;

    if (state == 0)
    1904:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <state.28>
    1908:	81 11       	cpse	r24, r1
    190a:	1d c0       	rjmp	.+58     	; 0x1946 <mdb_poll+0x4a>
    {
        // Wait for enough data in buffer
        if (buffer_level(MDB_USART, RX) < 2)
    190c:	60 e0       	ldi	r22, 0x00	; 0
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	0e 94 61 06 	call	0xcc2	; 0xcc2 <buffer_level>
    1914:	82 30       	cpi	r24, 0x02	; 2
    1916:	c0 f1       	brcs	.+112    	; 0x1988 <mdb_poll+0x8c>
#if DEBUG == 1
        send_str_p(UPLINK_USART, PSTR("POLL\r\n"));
#endif

        // validate checksum
        if (recv_mdb(MDB_USART) != MDB_POLL)
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
    191e:	42 97       	sbiw	r24, 0x12	; 18
    1920:	79 f0       	breq	.+30     	; 0x1940 <mdb_poll+0x44>
        {
            //    char ba[30];
            //  sprintf(ba,"recv_mdb  %d\r\n",recv_mdb(MDB_USART));
            //            send_str(UPLINK_USART,ba);
            mdb_active_cmd = MDB_IDLE;
    1922:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
            mdb_poll_reply = MDB_REPLY_ACK;
    1926:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
            state = 0;
    192a:	10 92 b2 07 	sts	0x07B2, r1	; 0x8007b2 <state.28>

            send_str_p(UPLINK_USART, PSTR("Error: Invalid checksum [Poll]\r\n"));
    192e:	62 e6       	ldi	r22, 0x62	; 98
    1930:	74 e0       	ldi	r23, 0x04	; 4
            if (recv_mdb(MDB_USART) != 0x000)
            {
                mdb_active_cmd = MDB_IDLE;
                mdb_poll_reply = MDB_REPLY_ACK;
                state = 0;
                send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [REPLY CANCELED]\r\n"));
    1932:	80 e0       	ldi	r24, 0x00	; 0

    case MDB_REPLY_CMD_OUT_SEQUENCE:

        break;
    }
}
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	1f 91       	pop	r17
    193a:	0f 91       	pop	r16
                send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [REPLY CANCELED]\r\n"));
    193c:	0c 94 29 07 	jmp	0xe52	; 0xe52 <send_str_p>
        state = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	80 93 b2 07 	sts	0x07B2, r24	; 0x8007b2 <state.28>
    switch (mdb_poll_reply)
    1946:	e0 91 a9 07 	lds	r30, 0x07A9	; 0x8007a9 <mdb_poll_reply>
    194a:	ea 30       	cpi	r30, 0x0A	; 10
    194c:	e8 f4       	brcc	.+58     	; 0x1988 <mdb_poll+0x8c>
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	88 27       	eor	r24, r24
    1952:	ee 51       	subi	r30, 0x1E	; 30
    1954:	f6 4e       	sbci	r31, 0xE6	; 230
    1956:	8f 4f       	sbci	r24, 0xFF	; 255
    1958:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <__tablejump2__>
        send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY); ////*uncomment it
    195c:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1960:	60 e0       	ldi	r22, 0x00	; 0
    1962:	71 e0       	ldi	r23, 0x01	; 1
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        mdb_active_cmd = MDB_IDLE;
    196a:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
        mdb_poll_reply = MDB_REPLY_ACK;
    196e:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
        send_str_p(UPLINK_USART, PSTR("ACK00\r\n"));
    1972:	6a e5       	ldi	r22, 0x5A	; 90
    1974:	74 e0       	ldi	r23, 0x04	; 4
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
        txSwitchState(PIN12, 1);
    197c:	61 e0       	ldi	r22, 0x01	; 1
    197e:	8c e0       	ldi	r24, 0x0C	; 12
    1980:	0e 94 9d 14 	call	0x293a	; 0x293a <txSwitchState>
            state = 0;
    1984:	10 92 b2 07 	sts	0x07B2, r1	; 0x8007b2 <state.28>
}
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	1f 91       	pop	r17
    198e:	0f 91       	pop	r16
    1990:	08 95       	ret
        if (state == 1)
    1992:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <state.28>
    1996:	81 30       	cpi	r24, 0x01	; 1
    1998:	b1 f4       	brne	.+44     	; 0x19c6 <mdb_poll+0xca>
            send_mdb(MDB_USART, 0x000, MDB_USART_TX_READY);
    199a:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    199e:	70 e0       	ldi	r23, 0x00	; 0
    19a0:	60 e0       	ldi	r22, 0x00	; 0
    19a2:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
            send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY);
    19a6:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	71 e0       	ldi	r23, 0x01	; 1
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
            send_str_p(UPLINK_USART, PSTR("JustREset00\r\n"));
    19b4:	6c e4       	ldi	r22, 0x4C	; 76
    19b6:	74 e0       	ldi	r23, 0x04	; 4
            send_str_p(UPLINK_USART, PSTR("EndSession00\r\n"));
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
            state = 2;
    19be:	82 e0       	ldi	r24, 0x02	; 2
    19c0:	80 93 b2 07 	sts	0x07B2, r24	; 0x8007b2 <state.28>
    19c4:	e1 cf       	rjmp	.-62     	; 0x1988 <mdb_poll+0x8c>
        else if (state == 2)
    19c6:	82 30       	cpi	r24, 0x02	; 2
    19c8:	f9 f6       	brne	.-66     	; 0x1988 <mdb_poll+0x8c>
            if (buffer_level(MDB_USART, RX) < 2)
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	0e 94 61 06 	call	0xcc2	; 0xcc2 <buffer_level>
    19d2:	82 30       	cpi	r24, 0x02	; 2
    19d4:	c8 f2       	brcs	.-78     	; 0x1988 <mdb_poll+0x8c>
            if (recv_mdb(MDB_USART) != 0x000)
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
    19dc:	89 2b       	or	r24, r25
    19de:	99 f1       	breq	.+102    	; 0x1a46 <mdb_poll+0x14a>
                mdb_active_cmd = MDB_IDLE;
    19e0:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
                mdb_poll_reply = MDB_REPLY_ACK;
    19e4:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
                state = 0;
    19e8:	10 92 b2 07 	sts	0x07B2, r1	; 0x8007b2 <state.28>
                send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [JUST RESET]\r\n"));
    19ec:	63 e2       	ldi	r22, 0x23	; 35
    19ee:	74 e0       	ldi	r23, 0x04	; 4
    19f0:	a0 cf       	rjmp	.-192    	; 0x1932 <mdb_poll+0x36>
        send_mdb(MDB_USART, 0x002, MDB_USART_TX_READY);
    19f2:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    19f6:	62 e0       	ldi	r22, 0x02	; 2
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        send_mdb(MDB_USART, 0x032, MDB_USART_TX_READY);
    1a00:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1a04:	62 e3       	ldi	r22, 0x32	; 50
    1a06:	70 e0       	ldi	r23, 0x00	; 0
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        send_mdb(MDB_USART, 0x049, MDB_USART_TX_READY);
    1a0e:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1a12:	69 e4       	ldi	r22, 0x49	; 73
    1a14:	70 e0       	ldi	r23, 0x00	; 0
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        send_mdb(MDB_USART, 0x04F, MDB_USART_TX_READY);
    1a1c:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1a20:	6f e4       	ldi	r22, 0x4F	; 79
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        send_mdb(MDB_USART, 0x054, MDB_USART_TX_READY);
    1a2a:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1a2e:	64 e5       	ldi	r22, 0x54	; 84
    1a30:	70 e0       	ldi	r23, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        send_mdb(MDB_USART, 0x041, MDB_USART_TX_READY);
    1a38:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1a3c:	61 e4       	ldi	r22, 0x41	; 65
    1a3e:	70 e0       	ldi	r23, 0x00	; 0
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
            mdb_active_cmd = MDB_IDLE;
    1a46:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
            mdb_poll_reply = MDB_REPLY_ACK;
    1a4a:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
    1a4e:	9a cf       	rjmp	.-204    	; 0x1984 <mdb_poll+0x88>
        if (session.start.flag && state == 1)
    1a50:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <session>
    1a54:	88 23       	and	r24, r24
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <mdb_poll+0x15e>
    1a58:	97 cf       	rjmp	.-210    	; 0x1988 <mdb_poll+0x8c>
    1a5a:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <state.28>
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	69 f5       	brne	.+90     	; 0x1abc <mdb_poll+0x1c0>
            send_mdb(MDB_USART, 0x003, MDB_USART_TX_READY);
    1a62:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1a66:	63 e0       	ldi	r22, 0x03	; 3
    1a68:	70 e0       	ldi	r23, 0x00	; 0
    1a6a:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
            send_mdb(MDB_USART, (session.start.funds >> 8), MDB_USART_TX_READY);
    1a6e:	60 91 97 07 	lds	r22, 0x0797	; 0x800797 <session+0x2>
    1a72:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1a76:	70 e0       	ldi	r23, 0x00	; 0
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
            send_mdb(MDB_USART, (session.start.funds & 0xFF), MDB_USART_TX_READY);
    1a7e:	60 91 96 07 	lds	r22, 0x0796	; 0x800796 <session+0x1>
    1a82:	70 91 97 07 	lds	r23, 0x0797	; 0x800797 <session+0x2>
    1a86:	77 27       	eor	r23, r23
    1a88:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
            checksum = 0x003 + (session.start.funds >> 8) + (session.start.funds & 0xFF);
    1a92:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <session+0x1>
    1a96:	90 91 97 07 	lds	r25, 0x0797	; 0x800797 <session+0x2>
    1a9a:	09 2f       	mov	r16, r25
    1a9c:	10 e0       	ldi	r17, 0x00	; 0
    1a9e:	b8 01       	movw	r22, r16
    1aa0:	68 0f       	add	r22, r24
    1aa2:	71 1d       	adc	r23, r1
    1aa4:	6d 5f       	subi	r22, 0xFD	; 253
    1aa6:	7f 4f       	sbci	r23, 0xFF	; 255
            checksum = (checksum & 0xFF) | 0x100;
    1aa8:	77 27       	eor	r23, r23
    1aaa:	71 60       	ori	r23, 0x01	; 1
            send_mdb(MDB_USART, checksum, MDB_USART_TX_READY);
    1aac:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
            send_str_p(UPLINK_USART, PSTR("BeginSession00\r\n"));
    1ab6:	62 e1       	ldi	r22, 0x12	; 18
    1ab8:	74 e0       	ldi	r23, 0x04	; 4
    1aba:	7e cf       	rjmp	.-260    	; 0x19b8 <mdb_poll+0xbc>
        else if (session.start.flag && state == 2)
    1abc:	82 30       	cpi	r24, 0x02	; 2
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <mdb_poll+0x1c6>
    1ac0:	63 cf       	rjmp	.-314    	; 0x1988 <mdb_poll+0x8c>
            if (buffer_level(MDB_USART, RX) < 2)
    1ac2:	60 e0       	ldi	r22, 0x00	; 0
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	0e 94 61 06 	call	0xcc2	; 0xcc2 <buffer_level>
    1aca:	82 30       	cpi	r24, 0x02	; 2
    1acc:	08 f4       	brcc	.+2      	; 0x1ad0 <mdb_poll+0x1d4>
    1ace:	5c cf       	rjmp	.-328    	; 0x1988 <mdb_poll+0x8c>
            if (recv_mdb(MDB_USART) != 0x000)
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
    1ad6:	89 2b       	or	r24, r25
    1ad8:	79 f0       	breq	.+30     	; 0x1af8 <mdb_poll+0x1fc>
                mdb_active_cmd = MDB_IDLE;
    1ada:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
                mdb_poll_reply = MDB_REPLY_ACK;
    1ade:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
                session.start.flag = 0;
    1ae2:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <session>
                session.start.funds = 0;
    1ae6:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <session+0x2>
    1aea:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <session+0x1>
                state = 0;
    1aee:	10 92 b2 07 	sts	0x07B2, r1	; 0x8007b2 <state.28>
                send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [START SESSION]\r\n"));
    1af2:	66 ee       	ldi	r22, 0xE6	; 230
    1af4:	73 e0       	ldi	r23, 0x03	; 3
    1af6:	1d cf       	rjmp	.-454    	; 0x1932 <mdb_poll+0x36>
            session.start.flag = 0;
    1af8:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <session>
            session.start.funds = 0;
    1afc:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <session+0x2>
    1b00:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <session+0x1>
            mdb_state = MDB_SESSION_IDLE;
    1b04:	83 e0       	ldi	r24, 0x03	; 3
    1b06:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <mdb_state>
            mdb_active_cmd = MDB_IDLE;
    1b0a:	9d cf       	rjmp	.-198    	; 0x1a46 <mdb_poll+0x14a>
        if (state == 1)
    1b0c:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <state.28>
    1b10:	81 30       	cpi	r24, 0x01	; 1
    1b12:	81 f4       	brne	.+32     	; 0x1b34 <mdb_poll+0x238>
            send_mdb(MDB_USART, 0x004, MDB_USART_TX_READY);
    1b14:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1b18:	64 e0       	ldi	r22, 0x04	; 4
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
            send_mdb(MDB_USART, 0x104, MDB_USART_TX_READY);
    1b20:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1b24:	64 e0       	ldi	r22, 0x04	; 4
    1b26:	71 e0       	ldi	r23, 0x01	; 1
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
            send_str_p(UPLINK_USART, PSTR("SessionCancelled00\r\n"));
    1b2e:	61 ed       	ldi	r22, 0xD1	; 209
    1b30:	73 e0       	ldi	r23, 0x03	; 3
    1b32:	42 cf       	rjmp	.-380    	; 0x19b8 <mdb_poll+0xbc>
        else if (state == 2)
    1b34:	82 30       	cpi	r24, 0x02	; 2
    1b36:	09 f0       	breq	.+2      	; 0x1b3a <mdb_poll+0x23e>
    1b38:	27 cf       	rjmp	.-434    	; 0x1988 <mdb_poll+0x8c>
            if (buffer_level(MDB_USART, RX) < 2)
    1b3a:	60 e0       	ldi	r22, 0x00	; 0
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	0e 94 61 06 	call	0xcc2	; 0xcc2 <buffer_level>
    1b42:	82 30       	cpi	r24, 0x02	; 2
    1b44:	08 f4       	brcc	.+2      	; 0x1b48 <mdb_poll+0x24c>
    1b46:	20 cf       	rjmp	.-448    	; 0x1988 <mdb_poll+0x8c>
            if (recv_mdb(MDB_USART) != 0x000)
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
    1b4e:	89 2b       	or	r24, r25
    1b50:	79 f0       	breq	.+30     	; 0x1b70 <mdb_poll+0x274>
                mdb_active_cmd = MDB_IDLE;
    1b52:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
                mdb_poll_reply = MDB_REPLY_ACK;
    1b56:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
                session.start.flag = 0;
    1b5a:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <session>
                session.start.funds = 0;
    1b5e:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <session+0x2>
    1b62:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <session+0x1>
                state = 0;
    1b66:	10 92 b2 07 	sts	0x07B2, r1	; 0x8007b2 <state.28>
                send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [SESSION CANCEL REQ]\r\n"));
    1b6a:	60 ea       	ldi	r22, 0xA0	; 160
    1b6c:	73 e0       	ldi	r23, 0x03	; 3
    1b6e:	e1 ce       	rjmp	.-574    	; 0x1932 <mdb_poll+0x36>
            session.start.flag = 0;
    1b70:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <session>
            session.start.funds = 0;
    1b74:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <session+0x2>
    1b78:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <session+0x1>
            mdb_active_cmd = MDB_IDLE;
    1b7c:	64 cf       	rjmp	.-312    	; 0x1a46 <mdb_poll+0x14a>
        if (session.result.vend_approved && state == 1)
    1b7e:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <session+0x3>
    1b82:	88 23       	and	r24, r24
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <mdb_poll+0x28c>
    1b86:	00 cf       	rjmp	.-512    	; 0x1988 <mdb_poll+0x8c>
    1b88:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <state.28>
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	61 f5       	brne	.+88     	; 0x1be8 <mdb_poll+0x2ec>
            send_mdb(MDB_USART, 0x005, MDB_USART_TX_READY);
    1b90:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1b94:	65 e0       	ldi	r22, 0x05	; 5
    1b96:	70 e0       	ldi	r23, 0x00	; 0
    1b98:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
            send_mdb(MDB_USART, (session.result.vend_amount >> 8), MDB_USART_TX_READY);
    1b9c:	60 91 9b 07 	lds	r22, 0x079B	; 0x80079b <session+0x6>
    1ba0:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1ba4:	70 e0       	ldi	r23, 0x00	; 0
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
            send_mdb(MDB_USART, (session.result.vend_amount & 0xFF), MDB_USART_TX_READY);
    1bac:	60 91 9a 07 	lds	r22, 0x079A	; 0x80079a <session+0x5>
    1bb0:	70 91 9b 07 	lds	r23, 0x079B	; 0x80079b <session+0x6>
    1bb4:	77 27       	eor	r23, r23
    1bb6:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
            checksum = 0x005 + (session.result.vend_amount >> 8) + (session.result.vend_amount & 0xFF);
    1bc0:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <session+0x5>
    1bc4:	90 91 9b 07 	lds	r25, 0x079B	; 0x80079b <session+0x6>
    1bc8:	c9 2f       	mov	r28, r25
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	d9 2f       	mov	r29, r25
    1bce:	be 01       	movw	r22, r28
    1bd0:	68 0f       	add	r22, r24
    1bd2:	71 1d       	adc	r23, r1
    1bd4:	6b 5f       	subi	r22, 0xFB	; 251
    1bd6:	7f 4f       	sbci	r23, 0xFF	; 255
            checksum = (checksum & 0xFF) | 0x100;
    1bd8:	77 27       	eor	r23, r23
    1bda:	71 60       	ori	r23, 0x01	; 1
            send_mdb(MDB_USART, checksum, MDB_USART_TX_READY);
    1bdc:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
            send_mdb(MDB_USART, 0x108, MDB_USART_TX_READY);
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
    1be6:	eb ce       	rjmp	.-554    	; 0x19be <mdb_poll+0xc2>
        else if (session.result.vend_approved && state == 2)
    1be8:	82 30       	cpi	r24, 0x02	; 2
    1bea:	09 f0       	breq	.+2      	; 0x1bee <mdb_poll+0x2f2>
    1bec:	cd ce       	rjmp	.-614    	; 0x1988 <mdb_poll+0x8c>
            if (buffer_level(MDB_USART, RX) < 2)
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	0e 94 61 06 	call	0xcc2	; 0xcc2 <buffer_level>
    1bf6:	82 30       	cpi	r24, 0x02	; 2
    1bf8:	08 f4       	brcc	.+2      	; 0x1bfc <mdb_poll+0x300>
    1bfa:	c6 ce       	rjmp	.-628    	; 0x1988 <mdb_poll+0x8c>
            if (recv_mdb(MDB_USART) != 0x000)
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
    1c02:	89 2b       	or	r24, r25
    1c04:	79 f0       	breq	.+30     	; 0x1c24 <mdb_poll+0x328>
                mdb_active_cmd = MDB_IDLE;
    1c06:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
                mdb_poll_reply = MDB_REPLY_ACK;
    1c0a:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
                session.result.vend_approved = 0;
    1c0e:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <session+0x3>
                session.result.vend_amount = 0;
    1c12:	10 92 9b 07 	sts	0x079B, r1	; 0x80079b <session+0x6>
    1c16:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <session+0x5>
                state = 0;
    1c1a:	10 92 b2 07 	sts	0x07B2, r1	; 0x8007b2 <state.28>
                send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [VEND APPROVE]\r\n"));
    1c1e:	65 e7       	ldi	r22, 0x75	; 117
    1c20:	73 e0       	ldi	r23, 0x03	; 3
    1c22:	87 ce       	rjmp	.-754    	; 0x1932 <mdb_poll+0x36>
            session.result.vend_approved = 0;
    1c24:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <session+0x3>
            session.result.vend_amount = 0;
    1c28:	10 92 9b 07 	sts	0x079B, r1	; 0x80079b <session+0x6>
    1c2c:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <session+0x5>
            mdb_active_cmd = MDB_IDLE;
    1c30:	0a cf       	rjmp	.-492    	; 0x1a46 <mdb_poll+0x14a>
        if (session.result.vend_denied && state == 1)
    1c32:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <session+0x4>
    1c36:	88 23       	and	r24, r24
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <mdb_poll+0x340>
    1c3a:	a6 ce       	rjmp	.-692    	; 0x1988 <mdb_poll+0x8c>
    1c3c:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <state.28>
    1c40:	81 30       	cpi	r24, 0x01	; 1
    1c42:	59 f4       	brne	.+22     	; 0x1c5a <mdb_poll+0x35e>
            send_mdb(MDB_USART, 0x006, MDB_USART_TX_READY);
    1c44:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1c48:	66 e0       	ldi	r22, 0x06	; 6
    1c4a:	70 e0       	ldi	r23, 0x00	; 0
    1c4c:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
            send_mdb(MDB_USART, 0x106, MDB_USART_TX_READY);
    1c50:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1c54:	66 e0       	ldi	r22, 0x06	; 6
    1c56:	71 e0       	ldi	r23, 0x01	; 1
    1c58:	c3 cf       	rjmp	.-122    	; 0x1be0 <mdb_poll+0x2e4>
        else if (session.result.vend_denied && state == 2)
    1c5a:	82 30       	cpi	r24, 0x02	; 2
    1c5c:	09 f0       	breq	.+2      	; 0x1c60 <mdb_poll+0x364>
    1c5e:	94 ce       	rjmp	.-728    	; 0x1988 <mdb_poll+0x8c>
            if (buffer_level(MDB_USART, RX) < 2)
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	0e 94 61 06 	call	0xcc2	; 0xcc2 <buffer_level>
    1c68:	82 30       	cpi	r24, 0x02	; 2
    1c6a:	08 f4       	brcc	.+2      	; 0x1c6e <mdb_poll+0x372>
    1c6c:	8d ce       	rjmp	.-742    	; 0x1988 <mdb_poll+0x8c>
            if (recv_mdb(MDB_USART) != 0x000)
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
    1c74:	89 2b       	or	r24, r25
    1c76:	89 f0       	breq	.+34     	; 0x1c9a <mdb_poll+0x39e>
                mdb_active_cmd = MDB_IDLE;
    1c78:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
                mdb_poll_reply = MDB_REPLY_ACK;
    1c7c:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
                session.start.flag = 0;
    1c80:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <session>
                session.start.funds = 0;
    1c84:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <session+0x2>
    1c88:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <session+0x1>
                session.result.vend_denied = 0;
    1c8c:	10 92 99 07 	sts	0x0799, r1	; 0x800799 <session+0x4>
                state = 0;
    1c90:	10 92 b2 07 	sts	0x07B2, r1	; 0x8007b2 <state.28>
                send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [VEND DENY]\r\n"));
    1c94:	6d e4       	ldi	r22, 0x4D	; 77
    1c96:	73 e0       	ldi	r23, 0x03	; 3
    1c98:	4c ce       	rjmp	.-872    	; 0x1932 <mdb_poll+0x36>
            session.start.flag = 0;
    1c9a:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <session>
            session.start.funds = 0;
    1c9e:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <session+0x2>
    1ca2:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <session+0x1>
            session.result.vend_denied = 0;
    1ca6:	10 92 99 07 	sts	0x0799, r1	; 0x800799 <session+0x4>
            mdb_active_cmd = MDB_IDLE;
    1caa:	cd ce       	rjmp	.-614    	; 0x1a46 <mdb_poll+0x14a>
        if (state == 1)
    1cac:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <state.28>
    1cb0:	81 30       	cpi	r24, 0x01	; 1
    1cb2:	81 f4       	brne	.+32     	; 0x1cd4 <mdb_poll+0x3d8>
            send_mdb(MDB_USART, 0x007, MDB_USART_TX_READY);
    1cb4:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1cb8:	67 e0       	ldi	r22, 0x07	; 7
    1cba:	70 e0       	ldi	r23, 0x00	; 0
    1cbc:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
            send_mdb(MDB_USART, 0x107, MDB_USART_TX_READY);
    1cc0:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1cc4:	67 e0       	ldi	r22, 0x07	; 7
    1cc6:	71 e0       	ldi	r23, 0x01	; 1
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
            send_str_p(UPLINK_USART, PSTR("EndSession00\r\n"));
    1cce:	6e e3       	ldi	r22, 0x3E	; 62
    1cd0:	73 e0       	ldi	r23, 0x03	; 3
    1cd2:	72 ce       	rjmp	.-796    	; 0x19b8 <mdb_poll+0xbc>
        else if (state == 2)
    1cd4:	82 30       	cpi	r24, 0x02	; 2
    1cd6:	09 f0       	breq	.+2      	; 0x1cda <mdb_poll+0x3de>
    1cd8:	57 ce       	rjmp	.-850    	; 0x1988 <mdb_poll+0x8c>
            if (buffer_level(MDB_USART, RX) < 2)
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	0e 94 61 06 	call	0xcc2	; 0xcc2 <buffer_level>
    1ce2:	82 30       	cpi	r24, 0x02	; 2
    1ce4:	08 f4       	brcc	.+2      	; 0x1ce8 <mdb_poll+0x3ec>
    1ce6:	50 ce       	rjmp	.-864    	; 0x1988 <mdb_poll+0x8c>
            if (recv_mdb(MDB_USART) != 0x000)
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
    1cee:	89 2b       	or	r24, r25
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <mdb_poll+0x3f8>
    1cf2:	a9 ce       	rjmp	.-686    	; 0x1a46 <mdb_poll+0x14a>
                mdb_active_cmd = MDB_IDLE;
    1cf4:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
                mdb_poll_reply = MDB_REPLY_ACK;
    1cf8:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
                state = 0;
    1cfc:	10 92 b2 07 	sts	0x07B2, r1	; 0x8007b2 <state.28>
                send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [END SESSION]\r\n"));
    1d00:	64 e1       	ldi	r22, 0x14	; 20
    1d02:	73 e0       	ldi	r23, 0x03	; 3
    1d04:	16 ce       	rjmp	.-980    	; 0x1932 <mdb_poll+0x36>
        if (state == 1)
    1d06:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <state.28>
    1d0a:	81 30       	cpi	r24, 0x01	; 1
    1d0c:	59 f4       	brne	.+22     	; 0x1d24 <mdb_poll+0x428>
            send_mdb(MDB_USART, 0x008, MDB_USART_TX_READY);
    1d0e:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1d12:	68 e0       	ldi	r22, 0x08	; 8
    1d14:	70 e0       	ldi	r23, 0x00	; 0
    1d16:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
            send_mdb(MDB_USART, 0x108, MDB_USART_TX_READY);
    1d1a:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1d1e:	68 e0       	ldi	r22, 0x08	; 8
    1d20:	71 e0       	ldi	r23, 0x01	; 1
    1d22:	5e cf       	rjmp	.-324    	; 0x1be0 <mdb_poll+0x2e4>
        else if (state == 2)
    1d24:	82 30       	cpi	r24, 0x02	; 2
    1d26:	09 f0       	breq	.+2      	; 0x1d2a <mdb_poll+0x42e>
    1d28:	2f ce       	rjmp	.-930    	; 0x1988 <mdb_poll+0x8c>
            if (buffer_level(MDB_USART, RX) < 2)
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	0e 94 61 06 	call	0xcc2	; 0xcc2 <buffer_level>
    1d32:	82 30       	cpi	r24, 0x02	; 2
    1d34:	08 f4       	brcc	.+2      	; 0x1d38 <mdb_poll+0x43c>
    1d36:	28 ce       	rjmp	.-944    	; 0x1988 <mdb_poll+0x8c>
            if (recv_mdb(MDB_USART) != 0x000)
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
    1d3e:	89 2b       	or	r24, r25
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <mdb_poll+0x448>
    1d42:	81 ce       	rjmp	.-766    	; 0x1a46 <mdb_poll+0x14a>
                mdb_active_cmd = MDB_IDLE;
    1d44:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
                mdb_poll_reply = MDB_REPLY_ACK;
    1d48:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
                state = 0;
    1d4c:	10 92 b2 07 	sts	0x07B2, r1	; 0x8007b2 <state.28>
                send_str_p(UPLINK_USART, PSTR("Error: no ACK received on [REPLY CANCELED]\r\n"));
    1d50:	67 ee       	ldi	r22, 0xE7	; 231
    1d52:	72 e0       	ldi	r23, 0x02	; 2
    1d54:	ee cd       	rjmp	.-1060   	; 0x1932 <mdb_poll+0x36>

00001d56 <mdb_vend>:

void mdb_vend(void)
{
    1d56:	ef 92       	push	r14
    1d58:	ff 92       	push	r15
    1d5a:	0f 93       	push	r16
    1d5c:	1f 93       	push	r17
    1d5e:	cf 93       	push	r28
    1d60:	df 93       	push	r29
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	a8 97       	sbiw	r28, 0x28	; 40
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	cd bf       	out	0x3d, r28	; 61

    static uint8_t data[6] = {0, 0, 0, 0, 0, 0};
    static uint8_t state = 0;
    uint8_t checksum = MDB_VEND;
    char buffer[40];
    send_str_p(UPLINK_USART, PSTR("MDB-VEND00\r\n"));
    1d72:	6a ed       	ldi	r22, 0xDA	; 218
    1d74:	72 e0       	ldi	r23, 0x02	; 2
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
    // wait for the subcommand
    if (state == 0)
    1d7c:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <state.13>
    1d80:	81 11       	cpse	r24, r1
    1d82:	0f c0       	rjmp	.+30     	; 0x1da2 <mdb_vend+0x4c>
    {
        // wait for enough data in buffer
        if (buffer_level(MDB_USART, RX) < 2)
    1d84:	60 e0       	ldi	r22, 0x00	; 0
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	0e 94 61 06 	call	0xcc2	; 0xcc2 <buffer_level>
    1d8c:	82 30       	cpi	r24, 0x02	; 2
    1d8e:	08 f4       	brcc	.+2      	; 0x1d92 <mdb_vend+0x3c>
    1d90:	57 c0       	rjmp	.+174    	; 0x1e40 <mdb_vend+0xea>
            return;

        // fetch the subommand from Buffer
        data[0] = recv_mdb(MDB_USART);
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
    1d98:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <data.12>
        state = 1;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	80 93 b1 07 	sts	0x07B1, r24	; 0x8007b1 <state.13>
    }

    // switch through subcommands
    switch (data[0])
    1da2:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <data.12>
    1da6:	82 30       	cpi	r24, 0x02	; 2
    1da8:	09 f4       	brne	.+2      	; 0x1dac <mdb_vend+0x56>
    1daa:	c1 c0       	rjmp	.+386    	; 0x1f2e <mdb_vend+0x1d8>
    1dac:	08 f0       	brcs	.+2      	; 0x1db0 <mdb_vend+0x5a>
    1dae:	42 c0       	rjmp	.+132    	; 0x1e34 <mdb_vend+0xde>
    1db0:	81 11       	cpse	r24, r1
    1db2:	86 c0       	rjmp	.+268    	; 0x1ec0 <mdb_vend+0x16a>
    {
    // vend request
    case 0:
        // wait for enough data in buffer
        if (buffer_level(MDB_USART, RX) < 10)
    1db4:	60 e0       	ldi	r22, 0x00	; 0
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	0e 94 61 06 	call	0xcc2	; 0xcc2 <buffer_level>
    1dbc:	8a 30       	cpi	r24, 0x0A	; 10
    1dbe:	08 f4       	brcc	.+2      	; 0x1dc2 <mdb_vend+0x6c>
    1dc0:	3f c0       	rjmp	.+126    	; 0x1e40 <mdb_vend+0xea>
    1dc2:	0c ea       	ldi	r16, 0xAC	; 172
    1dc4:	17 e0       	ldi	r17, 0x07	; 7
    1dc6:	81 eb       	ldi	r24, 0xB1	; 177
    1dc8:	e8 2e       	mov	r14, r24
    1dca:	87 e0       	ldi	r24, 0x07	; 7
    1dcc:	f8 2e       	mov	r15, r24
#endif

        // fetch the data from buffer
        for (uint8_t i = 1; i < 6; i++)
        {
            data[i] = (uint8_t)recv_mdb(MDB_USART);
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
    1dd4:	f8 01       	movw	r30, r16
    1dd6:	81 93       	st	Z+, r24
    1dd8:	8f 01       	movw	r16, r30
        for (uint8_t i = 1; i < 6; i++)
    1dda:	ee 16       	cp	r14, r30
    1ddc:	ff 06       	cpc	r15, r31
    1dde:	b9 f7       	brne	.-18     	; 0x1dce <mdb_vend+0x78>
        }

        // calculate checksum
        checksum += data[0] + data[1] + data[2] + data[3] + data[4];
    1de0:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <data.12+0x1>
    1de4:	20 91 ad 07 	lds	r18, 0x07AD	; 0x8007ad <data.12+0x2>
    1de8:	30 91 ae 07 	lds	r19, 0x07AE	; 0x8007ae <data.12+0x3>
    1dec:	40 91 af 07 	lds	r20, 0x07AF	; 0x8007af <data.12+0x4>
        checksum &= 0xFF;

        // validate checksum
        if (checksum != data[5])
    1df0:	50 91 b0 07 	lds	r21, 0x07B0	; 0x8007b0 <data.12+0x5>
        checksum += data[0] + data[1] + data[2] + data[3] + data[4];
    1df4:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <data.12>
    1df8:	89 0f       	add	r24, r25
    1dfa:	8d 5e       	subi	r24, 0xED	; 237
    1dfc:	82 0f       	add	r24, r18
    1dfe:	83 0f       	add	r24, r19
    1e00:	84 0f       	add	r24, r20
        if (checksum != data[5])
    1e02:	58 17       	cp	r21, r24
    1e04:	51 f1       	breq	.+84     	; 0x1e5a <mdb_vend+0x104>
        {
            state = 0;
    1e06:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <state.13>
            mdb_active_cmd = MDB_IDLE;
    1e0a:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
            mdb_poll_reply = MDB_REPLY_ACK;
    1e0e:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
            checksum = MDB_VEND;
            send_str_p(UPLINK_USART, PSTR("Error: invalid checksum [VEND]\r\n"));
    1e12:	69 eb       	ldi	r22, 0xB9	; 185
    1e14:	72 e0       	ldi	r23, 0x02	; 2
        {
            state = 0;
            mdb_active_cmd = MDB_IDLE;
            mdb_poll_reply = MDB_REPLY_ACK;
            checksum = MDB_VEND;
            send_str_p(UPLINK_USART, PSTR("Error: invalid checksum [VEND]\r\n"));
    1e16:	80 e0       	ldi	r24, 0x00	; 0
        // RESET();
        vendStateT = 1;
        return;
        break;
    }
}
    1e18:	a8 96       	adiw	r28, 0x28	; 40
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	f8 94       	cli
    1e1e:	de bf       	out	0x3e, r29	; 62
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	cd bf       	out	0x3d, r28	; 61
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	1f 91       	pop	r17
    1e2a:	0f 91       	pop	r16
    1e2c:	ff 90       	pop	r15
    1e2e:	ef 90       	pop	r14
            send_str_p(UPLINK_USART, PSTR("Error: invalid checksum [VEND]\r\n"));
    1e30:	0c 94 29 07 	jmp	0xe52	; 0xe52 <send_str_p>
    switch (data[0])
    1e34:	83 30       	cpi	r24, 0x03	; 3
    1e36:	09 f4       	brne	.+2      	; 0x1e3a <mdb_vend+0xe4>
    1e38:	d7 c0       	rjmp	.+430    	; 0x1fe8 <mdb_vend+0x292>
    1e3a:	84 30       	cpi	r24, 0x04	; 4
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <mdb_vend+0xea>
    1e3e:	06 c1       	rjmp	.+524    	; 0x204c <mdb_vend+0x2f6>
}
    1e40:	a8 96       	adiw	r28, 0x28	; 40
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	de bf       	out	0x3e, r29	; 62
    1e48:	0f be       	out	0x3f, r0	; 63
    1e4a:	cd bf       	out	0x3d, r28	; 61
    1e4c:	df 91       	pop	r29
    1e4e:	cf 91       	pop	r28
    1e50:	1f 91       	pop	r17
    1e52:	0f 91       	pop	r16
    1e54:	ff 90       	pop	r15
    1e56:	ef 90       	pop	r14
    1e58:	08 95       	ret
        sprintf(buffer, "@vend-request %d;%d;%d;%d;%d*\r\n", data[1], data[2], data[3], data[4], data[5]);
    1e5a:	1f 92       	push	r1
    1e5c:	5f 93       	push	r21
    1e5e:	1f 92       	push	r1
    1e60:	4f 93       	push	r20
    1e62:	1f 92       	push	r1
    1e64:	3f 93       	push	r19
    1e66:	1f 92       	push	r1
    1e68:	2f 93       	push	r18
    1e6a:	1f 92       	push	r1
    1e6c:	9f 93       	push	r25
    1e6e:	81 ef       	ldi	r24, 0xF1	; 241
    1e70:	95 e0       	ldi	r25, 0x05	; 5
    1e72:	9f 93       	push	r25
    1e74:	8f 93       	push	r24
    1e76:	8e 01       	movw	r16, r28
    1e78:	0f 5f       	subi	r16, 0xFF	; 255
    1e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7c:	1f 93       	push	r17
    1e7e:	0f 93       	push	r16
    1e80:	0e 94 f6 16 	call	0x2dec	; 0x2dec <sprintf>
        send_str(UPLINK_USART, buffer);
    1e84:	b8 01       	movw	r22, r16
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	0e 94 f4 06 	call	0xde8	; 0xde8 <send_str>
        send_str(UPLINK_USART, buffer);
    1e8c:	b8 01       	movw	r22, r16
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	0e 94 f4 06 	call	0xde8	; 0xde8 <send_str>
        send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY);
    1e94:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1e98:	60 e0       	ldi	r22, 0x00	; 0
    1e9a:	71 e0       	ldi	r23, 0x01	; 1
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        state = 0;
    1ea2:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <state.13>
        mdb_state = MDB_VENDING;
    1ea6:	84 e0       	ldi	r24, 0x04	; 4
    1ea8:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <mdb_state>
        mdb_active_cmd = MDB_IDLE;
    1eac:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
        mdb_poll_reply = MDB_REPLY_ACK;
    1eb0:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
        return;
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	c0 cf       	rjmp	.-128    	; 0x1e40 <mdb_vend+0xea>
        if (buffer_level(MDB_USART, RX) < 2)
    1ec0:	60 e0       	ldi	r22, 0x00	; 0
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	0e 94 61 06 	call	0xcc2	; 0xcc2 <buffer_level>
    1ec8:	82 30       	cpi	r24, 0x02	; 2
    1eca:	08 f4       	brcc	.+2      	; 0x1ece <mdb_vend+0x178>
    1ecc:	b9 cf       	rjmp	.-142    	; 0x1e40 <mdb_vend+0xea>
        data[1] = (uint8_t)recv_mdb(MDB_USART);
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
    1ed4:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <data.12+0x1>
        checksum += data[0];
    1ed8:	90 91 ab 07 	lds	r25, 0x07AB	; 0x8007ab <data.12>
    1edc:	9d 5e       	subi	r25, 0xED	; 237
        vendStateT = 2; //newly added
    1ede:	22 e0       	ldi	r18, 0x02	; 2
    1ee0:	20 93 e7 07 	sts	0x07E7, r18	; 0x8007e7 <vendStateT>
        if (checksum != data[1])
    1ee4:	89 17       	cp	r24, r25
    1ee6:	49 f0       	breq	.+18     	; 0x1efa <mdb_vend+0x1a4>
            state = 0;
    1ee8:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <state.13>
            mdb_active_cmd = MDB_IDLE;
    1eec:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
            mdb_poll_reply = MDB_REPLY_ACK;
    1ef0:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
            send_str_p(UPLINK_USART, PSTR("Error: invalid checksum [VEND]\r\n"));
    1ef4:	68 e9       	ldi	r22, 0x98	; 152
    1ef6:	72 e0       	ldi	r23, 0x02	; 2
    1ef8:	8e cf       	rjmp	.-228    	; 0x1e16 <mdb_vend+0xc0>
        send_str_p(UPLINK_USART, PSTR("vend-cancel\r\n"));
    1efa:	6a e8       	ldi	r22, 0x8A	; 138
    1efc:	72 e0       	ldi	r23, 0x02	; 2
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
        send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY);
    1f04:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1f08:	60 e0       	ldi	r22, 0x00	; 0
    1f0a:	71 e0       	ldi	r23, 0x01	; 1
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        state = 0;
    1f12:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <state.13>
        mdb_state = MDB_SESSION_IDLE;
    1f16:	83 e0       	ldi	r24, 0x03	; 3
    1f18:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <mdb_state>
        mdb_active_cmd = MDB_IDLE;
    1f1c:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
        mdb_poll_reply = MDB_REPLY_VEND_DENIED;
    1f20:	87 e0       	ldi	r24, 0x07	; 7
    1f22:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <mdb_poll_reply>
        RESET(); //NOT IN ORG
    1f26:	e0 e0       	ldi	r30, 0x00	; 0
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	09 94       	ijmp
        return;
    1f2c:	89 cf       	rjmp	.-238    	; 0x1e40 <mdb_vend+0xea>
        if (buffer_level(MDB_USART, RX) < 6)
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	0e 94 61 06 	call	0xcc2	; 0xcc2 <buffer_level>
    1f36:	86 30       	cpi	r24, 0x06	; 6
    1f38:	08 f4       	brcc	.+2      	; 0x1f3c <mdb_vend+0x1e6>
    1f3a:	82 cf       	rjmp	.-252    	; 0x1e40 <mdb_vend+0xea>
        vendStateT = 1;
    1f3c:	11 e0       	ldi	r17, 0x01	; 1
    1f3e:	10 93 e7 07 	sts	0x07E7, r17	; 0x8007e7 <vendStateT>
            data[i] = (uint8_t)recv_mdb(MDB_USART);
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
    1f48:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <data.12+0x1>
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
    1f52:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <data.12+0x2>
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <data.12+0x3>
        checksum += data[0] + data[1] + data[2];
    1f62:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <data.12+0x1>
    1f66:	30 91 ad 07 	lds	r19, 0x07AD	; 0x8007ad <data.12+0x2>
    1f6a:	90 91 ab 07 	lds	r25, 0x07AB	; 0x8007ab <data.12>
    1f6e:	98 0f       	add	r25, r24
    1f70:	9d 5e       	subi	r25, 0xED	; 237
    1f72:	93 0f       	add	r25, r19
        if (checksum != data[3])
    1f74:	29 17       	cp	r18, r25
    1f76:	49 f0       	breq	.+18     	; 0x1f8a <mdb_vend+0x234>
            state = 0;
    1f78:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <state.13>
            mdb_active_cmd = MDB_IDLE;
    1f7c:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
            mdb_poll_reply = MDB_REPLY_ACK;
    1f80:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
            send_str_p(UPLINK_USART, PSTR("Error: invalid checksum [VEND]\r\n"));
    1f84:	69 e6       	ldi	r22, 0x69	; 105
    1f86:	72 e0       	ldi	r23, 0x02	; 2
    1f88:	46 cf       	rjmp	.-372    	; 0x1e16 <mdb_vend+0xc0>
        vendStateT = 1; //newly added
    1f8a:	10 93 e7 07 	sts	0x07E7, r17	; 0x8007e7 <vendStateT>
        sprintf(buffer, "vend-success %d\r\n", (data[1] + data[2]));
    1f8e:	83 0f       	add	r24, r19
    1f90:	99 27       	eor	r25, r25
    1f92:	99 1f       	adc	r25, r25
    1f94:	9f 93       	push	r25
    1f96:	8f 93       	push	r24
    1f98:	81 e1       	ldi	r24, 0x11	; 17
    1f9a:	96 e0       	ldi	r25, 0x06	; 6
    1f9c:	9f 93       	push	r25
    1f9e:	8f 93       	push	r24
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	31 96       	adiw	r30, 0x01	; 1
    1fa4:	7f 01       	movw	r14, r30
    1fa6:	ff 93       	push	r31
    1fa8:	ef 93       	push	r30
    1faa:	0e 94 f6 16 	call	0x2dec	; 0x2dec <sprintf>
        send_str(0, buffer);
    1fae:	b7 01       	movw	r22, r14
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	0e 94 f4 06 	call	0xde8	; 0xde8 <send_str>
        send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY);
    1fb6:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	71 e0       	ldi	r23, 0x01	; 1
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        state = 0;
    1fc4:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <state.13>
        mdb_state = MDB_SESSION_IDLE;
    1fc8:	83 e0       	ldi	r24, 0x03	; 3
    1fca:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <mdb_state>
        mdb_active_cmd = MDB_IDLE;
    1fce:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
        mdb_poll_reply = MDB_REPLY_ACK;
    1fd2:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
        vendStateT = 1;
    1fd6:	10 93 e7 07 	sts	0x07E7, r17	; 0x8007e7 <vendStateT>
        return;
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	2c cf       	rjmp	.-424    	; 0x1e40 <mdb_vend+0xea>
        if (buffer_level(MDB_USART, RX) < 2)
    1fe8:	60 e0       	ldi	r22, 0x00	; 0
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	0e 94 61 06 	call	0xcc2	; 0xcc2 <buffer_level>
    1ff0:	82 30       	cpi	r24, 0x02	; 2
    1ff2:	08 f4       	brcc	.+2      	; 0x1ff6 <mdb_vend+0x2a0>
    1ff4:	25 cf       	rjmp	.-438    	; 0x1e40 <mdb_vend+0xea>
        data[1] = (uint8_t)recv_mdb(MDB_USART);
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
    1ffc:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <data.12+0x1>
        checksum += data[0];
    2000:	90 91 ab 07 	lds	r25, 0x07AB	; 0x8007ab <data.12>
    2004:	9d 5e       	subi	r25, 0xED	; 237
        if (checksum != data[1])
    2006:	89 17       	cp	r24, r25
    2008:	49 f0       	breq	.+18     	; 0x201c <mdb_vend+0x2c6>
            state = 0;
    200a:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <state.13>
            mdb_active_cmd = MDB_IDLE;
    200e:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
            mdb_poll_reply = MDB_REPLY_ACK;
    2012:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
            send_str_p(UPLINK_USART, PSTR("Error: invalid checksum [VEND]\r\n"));
    2016:	68 e4       	ldi	r22, 0x48	; 72
    2018:	72 e0       	ldi	r23, 0x02	; 2
    201a:	fd ce       	rjmp	.-518    	; 0x1e16 <mdb_vend+0xc0>
        send_str_p(UPLINK_USART, PSTR("vend-failure\r\n"));
    201c:	69 e3       	ldi	r22, 0x39	; 57
    201e:	72 e0       	ldi	r23, 0x02	; 2
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
        vendStateT = 2;
    2026:	12 e0       	ldi	r17, 0x02	; 2
    2028:	10 93 e7 07 	sts	0x07E7, r17	; 0x8007e7 <vendStateT>
        send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY);
    202c:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    2030:	60 e0       	ldi	r22, 0x00	; 0
    2032:	71 e0       	ldi	r23, 0x01	; 1
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        state = 0;
    203a:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <state.13>
        mdb_state = MDB_ENABLED;
    203e:	10 93 aa 07 	sts	0x07AA, r17	; 0x8007aa <mdb_state>
        mdb_active_cmd = MDB_IDLE;
    2042:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
        mdb_poll_reply = MDB_REPLY_ACK;
    2046:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
    204a:	6d cf       	rjmp	.-294    	; 0x1f26 <mdb_vend+0x1d0>
        if (buffer_level(MDB_USART, RX) < 2)
    204c:	60 e0       	ldi	r22, 0x00	; 0
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	0e 94 61 06 	call	0xcc2	; 0xcc2 <buffer_level>
    2054:	82 30       	cpi	r24, 0x02	; 2
    2056:	08 f4       	brcc	.+2      	; 0x205a <mdb_vend+0x304>
    2058:	f3 ce       	rjmp	.-538    	; 0x1e40 <mdb_vend+0xea>
        vendStateT = 1;
    205a:	11 e0       	ldi	r17, 0x01	; 1
    205c:	10 93 e7 07 	sts	0x07E7, r17	; 0x8007e7 <vendStateT>
        data[1] = (uint8_t)recv_mdb(MDB_USART);
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
    2066:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <data.12+0x1>
        checksum += data[0];
    206a:	90 91 ab 07 	lds	r25, 0x07AB	; 0x8007ab <data.12>
    206e:	9d 5e       	subi	r25, 0xED	; 237
        if (checksum != data[1])
    2070:	89 17       	cp	r24, r25
    2072:	49 f0       	breq	.+18     	; 0x2086 <mdb_vend+0x330>
            state = 0;
    2074:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <state.13>
            mdb_active_cmd = MDB_IDLE;
    2078:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
            mdb_poll_reply = MDB_REPLY_ACK;
    207c:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
            send_str_p(UPLINK_USART, PSTR("Error: invalid checksum [VEND]\r\n"));
    2080:	68 e1       	ldi	r22, 0x18	; 24
    2082:	72 e0       	ldi	r23, 0x02	; 2
    2084:	c8 ce       	rjmp	.-624    	; 0x1e16 <mdb_vend+0xc0>
        send_str_p(UPLINK_USART, PSTR("session-complete\r\n"));
    2086:	65 e0       	ldi	r22, 0x05	; 5
    2088:	72 e0       	ldi	r23, 0x02	; 2
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
        vendStateT = 1;
    2090:	10 93 e7 07 	sts	0x07E7, r17	; 0x8007e7 <vendStateT>
        send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY);
    2094:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    2098:	60 e0       	ldi	r22, 0x00	; 0
    209a:	71 e0       	ldi	r23, 0x01	; 1
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        state = 0;
    20a2:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <state.13>
        mdb_state = MDB_ENABLED;
    20a6:	82 e0       	ldi	r24, 0x02	; 2
    20a8:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <mdb_state>
        mdb_active_cmd = MDB_IDLE;
    20ac:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
        mdb_poll_reply = MDB_REPLY_ACK; ///orignal
    20b0:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
        vendStateT = 1;
    20b4:	10 93 e7 07 	sts	0x07E7, r17	; 0x8007e7 <vendStateT>
        return;
    20b8:	c3 ce       	rjmp	.-634    	; 0x1e40 <mdb_vend+0xea>

000020ba <mdb_reader>:

void mdb_reader(void)
{
    20ba:	cf 93       	push	r28

    uint8_t data[2] = {0, 0};
    uint8_t index = 0;

    // wait for enough data in buffer
    if (buffer_level(MDB_USART, RX) < 4)
    20bc:	60 e0       	ldi	r22, 0x00	; 0
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	0e 94 61 06 	call	0xcc2	; 0xcc2 <buffer_level>
    20c4:	84 30       	cpi	r24, 0x04	; 4
    20c6:	08 f1       	brcs	.+66     	; 0x210a <mdb_reader+0x50>
        return;

    // fetch the data from buffer
    for (index = 0; index < 2; index++)
    {
        data[index] = recv_mdb(MDB_USART);
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
    20ce:	c8 2f       	mov	r28, r24
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
    }

    // switch through subcommands
    switch (data[0])
    20d6:	c1 30       	cpi	r28, 0x01	; 1
    20d8:	d1 f0       	breq	.+52     	; 0x210e <mdb_reader+0x54>
    20da:	c2 30       	cpi	r28, 0x02	; 2
    20dc:	69 f1       	breq	.+90     	; 0x2138 <mdb_reader+0x7e>
        mdb_state = MDB_ENABLED;
        break;

    // unknown subcommand
    default:
        send_str_p(UPLINK_USART, PSTR("Error: unknown subcommand [READER]\r\n"));
    20de:	6d e7       	ldi	r22, 0x7D	; 125
    20e0:	71 e0       	ldi	r23, 0x01	; 1
    switch (data[0])
    20e2:	c1 11       	cpse	r28, r1
    20e4:	3c c0       	rjmp	.+120    	; 0x215e <mdb_reader+0xa4>
            send_str_p(UPLINK_USART, PSTR("Error: checksum error [READER]\r\n"));
    20e6:	64 ee       	ldi	r22, 0xE4	; 228
    20e8:	71 e0       	ldi	r23, 0x01	; 1
        if (data[1] != 0x14)
    20ea:	84 31       	cpi	r24, 0x14	; 20
    20ec:	c1 f5       	brne	.+112    	; 0x215e <mdb_reader+0xa4>
        send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY);
    20ee:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    20f2:	60 e0       	ldi	r22, 0x00	; 0
    20f4:	71 e0       	ldi	r23, 0x01	; 1
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        mdb_active_cmd = MDB_IDLE;
    20fc:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
        mdb_poll_reply = MDB_REPLY_ACK;
    2100:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
        mdb_state = MDB_DISABLED;
    2104:	81 e0       	ldi	r24, 0x01	; 1
        mdb_state = MDB_ENABLED;
    2106:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <mdb_state>
        mdb_active_cmd = MDB_IDLE;
        mdb_poll_reply = MDB_REPLY_ACK;
        return;
        break;
    }
}
    210a:	cf 91       	pop	r28
    210c:	08 95       	ret
            send_str_p(UPLINK_USART, PSTR("Error: checksum error [READER]\r\n"));
    210e:	63 ec       	ldi	r22, 0xC3	; 195
    2110:	71 e0       	ldi	r23, 0x01	; 1
        if (data[1] != 0x15)
    2112:	85 31       	cpi	r24, 0x15	; 21
    2114:	21 f5       	brne	.+72     	; 0x215e <mdb_reader+0xa4>
        txSwitchState(PIN12, 1);
    2116:	61 e0       	ldi	r22, 0x01	; 1
    2118:	8c e0       	ldi	r24, 0x0C	; 12
    211a:	0e 94 9d 14 	call	0x293a	; 0x293a <txSwitchState>
        send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY);
    211e:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    2122:	60 e0       	ldi	r22, 0x00	; 0
    2124:	71 e0       	ldi	r23, 0x01	; 1
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        mdb_active_cmd = MDB_IDLE;
    212c:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
        mdb_poll_reply = MDB_REPLY_ACK;
    2130:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
        mdb_state = MDB_ENABLED;
    2134:	82 e0       	ldi	r24, 0x02	; 2
    2136:	e7 cf       	rjmp	.-50     	; 0x2106 <mdb_reader+0x4c>
            send_str_p(UPLINK_USART, PSTR("Error: checksum error [READER]\r\n"));
    2138:	62 ea       	ldi	r22, 0xA2	; 162
    213a:	71 e0       	ldi	r23, 0x01	; 1
        if (data[1] != 0x16)
    213c:	86 31       	cpi	r24, 0x16	; 22
    213e:	79 f4       	brne	.+30     	; 0x215e <mdb_reader+0xa4>
        send_mdb(MDB_USART, 0x100, MDB_USART_TX_READY);
    2140:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <MDB_USART_TX_READY>
    2144:	60 e0       	ldi	r22, 0x00	; 0
    2146:	71 e0       	ldi	r23, 0x01	; 1
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	0e 94 40 07 	call	0xe80	; 0xe80 <send_mdb>
        mdb_active_cmd = MDB_IDLE;
    214e:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
        mdb_poll_reply = MDB_REPLY_CANCELED;
    2152:	89 e0       	ldi	r24, 0x09	; 9
    2154:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <mdb_poll_reply>
        mdb_state = MDB_ENABLED;
    2158:	c0 93 aa 07 	sts	0x07AA, r28	; 0x8007aa <mdb_state>
        break;
    215c:	d6 cf       	rjmp	.-84     	; 0x210a <mdb_reader+0x50>
        send_str_p(UPLINK_USART, PSTR("Error: unknown subcommand [READER]\r\n"));
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
        mdb_active_cmd = MDB_IDLE;
    2164:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
        mdb_poll_reply = MDB_REPLY_ACK;
    2168:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <mdb_poll_reply>
        return;
    216c:	ce cf       	rjmp	.-100    	; 0x210a <mdb_reader+0x50>

0000216e <mdb_cmd_handler>:
    switch (mdb_active_cmd)
    216e:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <mdb_active_cmd>
    2172:	82 31       	cpi	r24, 0x12	; 18
    2174:	89 f1       	breq	.+98     	; 0x21d8 <mdb_cmd_handler+0x6a>
    2176:	38 f4       	brcc	.+14     	; 0x2186 <mdb_cmd_handler+0x18>
    2178:	80 31       	cpi	r24, 0x10	; 16
    217a:	51 f1       	breq	.+84     	; 0x21d0 <mdb_cmd_handler+0x62>
    217c:	81 31       	cpi	r24, 0x11	; 17
    217e:	51 f1       	breq	.+84     	; 0x21d4 <mdb_cmd_handler+0x66>
    2180:	88 23       	and	r24, r24
    2182:	31 f0       	breq	.+12     	; 0x2190 <mdb_cmd_handler+0x22>
    2184:	08 95       	ret
    2186:	83 31       	cpi	r24, 0x13	; 19
    2188:	49 f1       	breq	.+82     	; 0x21dc <mdb_cmd_handler+0x6e>
    218a:	84 31       	cpi	r24, 0x14	; 20
    218c:	49 f1       	breq	.+82     	; 0x21e0 <mdb_cmd_handler+0x72>
    218e:	08 95       	ret
        if (buffer_level(MDB_USART, RX) < 2)
    2190:	60 e0       	ldi	r22, 0x00	; 0
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	0e 94 61 06 	call	0xcc2	; 0xcc2 <buffer_level>
    2198:	82 30       	cpi	r24, 0x02	; 2
    219a:	20 f1       	brcs	.+72     	; 0x21e4 <mdb_cmd_handler+0x76>
        uint16_t data = recv_mdb(MDB_USART);
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	0e 94 57 07 	call	0xeae	; 0xeae <recv_mdb>
    21a2:	9c 01       	movw	r18, r24
        if ((data & 0x100) == 0x100 && MDB_RESET <= (data ^ 0x100) && (data ^ 0x100) <= MDB_READER)
    21a4:	90 ff       	sbrs	r25, 0
    21a6:	1e c0       	rjmp	.+60     	; 0x21e4 <mdb_cmd_handler+0x76>
    21a8:	41 e0       	ldi	r20, 0x01	; 1
    21aa:	94 27       	eor	r25, r20
    21ac:	40 97       	sbiw	r24, 0x10	; 16
    21ae:	05 97       	sbiw	r24, 0x05	; 5
    21b0:	c8 f4       	brcc	.+50     	; 0x21e4 <mdb_cmd_handler+0x76>
            mdb_active_cmd = (data ^ 0x100);
    21b2:	20 93 a8 07 	sts	0x07A8, r18	; 0x8007a8 <mdb_active_cmd>
            if (!reset_done && mdb_active_cmd != MDB_RESET)
    21b6:	90 91 a7 07 	lds	r25, 0x07A7	; 0x8007a7 <reset_done>
    21ba:	91 11       	cpse	r25, r1
    21bc:	13 c0       	rjmp	.+38     	; 0x21e4 <mdb_cmd_handler+0x76>
    21be:	20 31       	cpi	r18, 0x10	; 16
    21c0:	89 f0       	breq	.+34     	; 0x21e4 <mdb_cmd_handler+0x76>
                mdb_active_cmd = MDB_IDLE;
    21c2:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <mdb_active_cmd>
                send_str_p(UPLINK_USART, PSTR("resetting\n"));
    21c6:	66 e4       	ldi	r22, 0x46	; 70
    21c8:	75 e0       	ldi	r23, 0x05	; 5
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	0c 94 29 07 	jmp	0xe52	; 0xe52 <send_str_p>
        mdb_reset();
    21d0:	0c 94 32 09 	jmp	0x1264	; 0x1264 <mdb_reset>
        mdb_setup();
    21d4:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <mdb_setup>
        mdb_poll();
    21d8:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <mdb_poll>
        mdb_vend();
    21dc:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <mdb_vend>
        mdb_reader();
    21e0:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <mdb_reader>
}
    21e4:	08 95       	ret

000021e6 <cmd_reset>:
    return;
}

void cmd_reset(char *arg)
{
    send_str_p(UPLINK_USART, PSTR("@RESETTING DEVICE*\r\n"));
    21e6:	6d ef       	ldi	r22, 0xFD	; 253
    21e8:	79 e0       	ldi	r23, 0x09	; 9
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
    RESET();
    21f0:	e0 e0       	ldi	r30, 0x00	; 0
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	09 94       	ijmp
}
    21f6:	08 95       	ret

000021f8 <cmd_help>:
    send_str(UPLINK_USART, buf);
}

void cmd_help(char *arg)
{
    send_str_p(UPLINK_USART, PSTR("-----------------------------------------------\r\n"));
    21f8:	6a e5       	ldi	r22, 0x5A	; 90
    21fa:	79 e0       	ldi	r23, 0x09	; 9
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
    send_str_p(UPLINK_USART, PSTR("reset:\r\n   reset the Arduino\r\n"));
    2202:	6b e3       	ldi	r22, 0x3B	; 59
    2204:	79 e0       	ldi	r23, 0x09	; 9
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
    send_str_p(UPLINK_USART, PSTR("info:\r\n   shows the VMC infos transfered during the setup process\r\n"));
    220c:	67 ef       	ldi	r22, 0xF7	; 247
    220e:	78 e0       	ldi	r23, 0x08	; 8
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
    send_str_p(UPLINK_USART, PSTR("mdb-state:\r\n   displays the current MDB state.\r\n"));
    2216:	66 ec       	ldi	r22, 0xC6	; 198
    2218:	78 e0       	ldi	r23, 0x08	; 8
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
    send_str_p(UPLINK_USART, PSTR("start-session <funds>:\r\n   starts a session with <funds> Euro Cents.\r\n"));
    2220:	6f e7       	ldi	r22, 0x7F	; 127
    2222:	78 e0       	ldi	r23, 0x08	; 8
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
    send_str_p(UPLINK_USART, PSTR("approve-vend <vend-amount>:\r\n   approves a vend request with <vend-amount> Euro Cents.\r\n"));
    222a:	66 e2       	ldi	r22, 0x26	; 38
    222c:	78 e0       	ldi	r23, 0x08	; 8
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
    send_str_p(UPLINK_USART, PSTR("deny-vend:\r\n   denies a vend request.\r\n"));
    2234:	6e ef       	ldi	r22, 0xFE	; 254
    2236:	77 e0       	ldi	r23, 0x07	; 7
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
    send_str_p(UPLINK_USART, PSTR("-----------------------------------------------\r\n"));
    223e:	6c ec       	ldi	r22, 0xCC	; 204
    2240:	77 e0       	ldi	r23, 0x07	; 7
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	0c 94 29 07 	jmp	0xe52	; 0xe52 <send_str_p>

00002248 <cmd_get_mdb_state>:
}

void cmd_get_mdb_state(char *arg)
{
    char buf[40];
    switch (mdb_state)
    2248:	e0 91 aa 07 	lds	r30, 0x07AA	; 0x8007aa <mdb_state>
    224c:	e7 30       	cpi	r30, 0x07	; 7
    224e:	f0 f4       	brcc	.+60     	; 0x228c <cmd_get_mdb_state+0x44>
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	88 27       	eor	r24, r24
    2254:	e4 51       	subi	r30, 0x14	; 20
    2256:	f6 4e       	sbci	r31, 0xE6	; 230
    2258:	8f 4f       	sbci	r24, 0xFF	; 255
    225a:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <__tablejump2__>
    {
        sprintf(buf, "@MDB_STATE=%d* \r\n", mdb_state);
        send_str(UPLINK_USART, buf);
        send_str(UPLINK_USART, buf);
    case MDB_INACTIVE:
        send_str_p(UPLINK_USART, PSTR("@State: INACTIVE*\r\n"));
    225e:	62 ef       	ldi	r22, 0xF2	; 242
    2260:	76 e0       	ldi	r23, 0x06	; 6
        break;
    case MDB_REVALUE:
        send_str_p(UPLINK_USART, PSTR("@State: REVALUE*\r\n"));
        break;
    case MDB_NEGATIVE_VEND:
        send_str_p(UPLINK_USART, PSTR("@State: NEGATIVE VEND*\r\n"));
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	0c 94 29 07 	jmp	0xe52	; 0xe52 <send_str_p>
        send_str_p(UPLINK_USART, PSTR("@State: DISABLED*\r\n"));
    2268:	6e ed       	ldi	r22, 0xDE	; 222
    226a:	76 e0       	ldi	r23, 0x06	; 6
    226c:	fa cf       	rjmp	.-12     	; 0x2262 <cmd_get_mdb_state+0x1a>
        send_str_p(UPLINK_USART, PSTR("@State: ENABLED*\r\n"));
    226e:	6b ec       	ldi	r22, 0xCB	; 203
    2270:	76 e0       	ldi	r23, 0x06	; 6
    2272:	f7 cf       	rjmp	.-18     	; 0x2262 <cmd_get_mdb_state+0x1a>
        send_str_p(UPLINK_USART, PSTR("@State: SESSION IDLE*\r\n"));
    2274:	63 eb       	ldi	r22, 0xB3	; 179
    2276:	76 e0       	ldi	r23, 0x06	; 6
    2278:	f4 cf       	rjmp	.-24     	; 0x2262 <cmd_get_mdb_state+0x1a>
        send_str_p(UPLINK_USART, PSTR("@State: VEND*\r\n"));
    227a:	63 ea       	ldi	r22, 0xA3	; 163
    227c:	76 e0       	ldi	r23, 0x06	; 6
    227e:	f1 cf       	rjmp	.-30     	; 0x2262 <cmd_get_mdb_state+0x1a>
        send_str_p(UPLINK_USART, PSTR("@State: REVALUE*\r\n"));
    2280:	60 e9       	ldi	r22, 0x90	; 144
    2282:	76 e0       	ldi	r23, 0x06	; 6
    2284:	ee cf       	rjmp	.-36     	; 0x2262 <cmd_get_mdb_state+0x1a>
        send_str_p(UPLINK_USART, PSTR("@State: NEGATIVE VEND*\r\n"));
    2286:	67 e7       	ldi	r22, 0x77	; 119
    2288:	76 e0       	ldi	r23, 0x06	; 6
    228a:	eb cf       	rjmp	.-42     	; 0x2262 <cmd_get_mdb_state+0x1a>
        break;
    }
}
    228c:	08 95       	ret

0000228e <cmd_io>:
    uint16_t argV = atoi(arg);
    228e:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <atoi>
    if (pinNumber == 12)
    2292:	9c 01       	movw	r18, r24
    2294:	20 5b       	subi	r18, 0xB0	; 176
    2296:	34 40       	sbci	r19, 0x04	; 4
    2298:	24 36       	cpi	r18, 0x64	; 100
    229a:	31 05       	cpc	r19, r1
    229c:	20 f5       	brcc	.+72     	; 0x22e6 <cmd_io+0x58>
    uint16_t pinState = atoi(arg) % 100;
    229e:	64 e6       	ldi	r22, 0x64	; 100
    22a0:	70 e0       	ldi	r23, 0x00	; 0
    22a2:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <__divmodhi4>
        if (pinState == 0)
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	39 f4       	brne	.+14     	; 0x22b8 <cmd_io+0x2a>
            send_str_p(UPLINK_USART, PSTR("@IO: PIN12 OFF*\r\n"));
    22aa:	6b ee       	ldi	r22, 0xEB	; 235
    22ac:	79 e0       	ldi	r23, 0x09	; 9
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
            PORTB = PIN12_OFF;
    22b4:	15 b8       	out	0x05, r1	; 5
    22b6:	08 95       	ret
        else if (pinState == 1)
    22b8:	81 30       	cpi	r24, 0x01	; 1
    22ba:	91 05       	cpc	r25, r1
    22bc:	41 f4       	brne	.+16     	; 0x22ce <cmd_io+0x40>
            send_str_p(UPLINK_USART, PSTR("@PO: PIN12 ON*\r\n"));
    22be:	6a ed       	ldi	r22, 0xDA	; 218
    22c0:	79 e0       	ldi	r23, 0x09	; 9
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
            PORTB = PIN12_ON;
    22c8:	80 e4       	ldi	r24, 0x40	; 64
    22ca:	85 b9       	out	0x05, r24	; 5
    22cc:	08 95       	ret
            send_str_p(UPLINK_USART, PSTR("@IO: PLAY3*\r\n"));
    22ce:	6c ec       	ldi	r22, 0xCC	; 204
    22d0:	79 e0       	ldi	r23, 0x09	; 9
        else if (pinState == 2)
    22d2:	82 30       	cpi	r24, 0x02	; 2
    22d4:	91 05       	cpc	r25, r1
    22d6:	21 f0       	breq	.+8      	; 0x22e0 <cmd_io+0x52>
        else if (pinState == 3)
    22d8:	03 97       	sbiw	r24, 0x03	; 3
    22da:	29 f4       	brne	.+10     	; 0x22e6 <cmd_io+0x58>
            send_str_p(UPLINK_USART, PSTR("@IO: PLAY4*\r\n"));
    22dc:	6e eb       	ldi	r22, 0xBE	; 190
    22de:	79 e0       	ldi	r23, 0x09	; 9
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	0c 94 29 07 	jmp	0xe52	; 0xe52 <send_str_p>
}
    22e6:	08 95       	ret

000022e8 <vendInvoker>:
{
    22e8:	4f 92       	push	r4
    22ea:	5f 92       	push	r5
    22ec:	6f 92       	push	r6
    22ee:	7f 92       	push	r7
    22f0:	8f 92       	push	r8
    22f2:	9f 92       	push	r9
    22f4:	af 92       	push	r10
    22f6:	bf 92       	push	r11
    22f8:	cf 92       	push	r12
    22fa:	df 92       	push	r13
    22fc:	ef 92       	push	r14
    22fe:	ff 92       	push	r15
    2300:	0f 93       	push	r16
    2302:	1f 93       	push	r17
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	c2 55       	subi	r28, 0x52	; 82
    230e:	d1 09       	sbc	r29, r1
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	de bf       	out	0x3e, r29	; 62
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	cd bf       	out	0x3d, r28	; 61
    char delim[] = " ";
    231a:	4e 01       	movw	r8, r28
    231c:	21 e5       	ldi	r18, 0x51	; 81
    231e:	82 0e       	add	r8, r18
    2320:	91 1c       	adc	r9, r1
    2322:	20 e2       	ldi	r18, 0x20	; 32
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	f4 01       	movw	r30, r8
    2328:	31 83       	std	Z+1, r19	; 0x01
    232a:	20 83       	st	Z, r18
    char *ptr = strtok(arg, delim);
    232c:	b4 01       	movw	r22, r8
    232e:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strtok>
    2332:	18 2f       	mov	r17, r24
    2334:	09 2f       	mov	r16, r25
    for (int i = 0; i <= 2; i++)
    2336:	b1 2c       	mov	r11, r1
    2338:	a1 2c       	mov	r10, r1
    int c = 0; //payment method
    233a:	d1 2c       	mov	r13, r1
    233c:	61 2c       	mov	r6, r1
    int b = 0; //transaction id
    233e:	c1 2c       	mov	r12, r1
    2340:	71 2c       	mov	r7, r1
    int a = 0; //vend value
    2342:	f1 2c       	mov	r15, r1
    2344:	e1 2c       	mov	r14, r1
    uint16_t argV = 0; //atoi(arg);
    2346:	51 2c       	mov	r5, r1
    2348:	41 2c       	mov	r4, r1
        if (i == 0)
    234a:	a1 14       	cp	r10, r1
    234c:	b1 04       	cpc	r11, r1
    234e:	09 f0       	breq	.+2      	; 0x2352 <vendInvoker+0x6a>
    2350:	68 c0       	rjmp	.+208    	; 0x2422 <vendInvoker+0x13a>
            vendValue = ptr;
    2352:	10 93 c8 07 	sts	0x07C8, r17	; 0x8007c8 <vendValue>
    2356:	00 93 c9 07 	sts	0x07C9, r16	; 0x8007c9 <vendValue+0x1>
            a = atoi(ptr);
    235a:	81 2f       	mov	r24, r17
    235c:	90 2f       	mov	r25, r16
    235e:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <atoi>
    2362:	f8 2e       	mov	r15, r24
    2364:	e9 2e       	mov	r14, r25
            argV = a;
    2366:	27 01       	movw	r4, r14
    for (int i = 0; i <= 2; i++)
    2368:	2f ef       	ldi	r18, 0xFF	; 255
    236a:	a2 1a       	sub	r10, r18
    236c:	b2 0a       	sbc	r11, r18
    236e:	83 e0       	ldi	r24, 0x03	; 3
    2370:	a8 16       	cp	r10, r24
    2372:	b1 04       	cpc	r11, r1
    2374:	51 f7       	brne	.-44     	; 0x234a <vendInvoker+0x62>
    sprintf(buf, "a==%d b==%d c==%d \r\n", a, b, c);
    2376:	6f 92       	push	r6
    2378:	df 92       	push	r13
    237a:	7f 92       	push	r7
    237c:	cf 92       	push	r12
    237e:	ef 92       	push	r14
    2380:	ff 92       	push	r15
    2382:	83 e2       	ldi	r24, 0x23	; 35
    2384:	96 e0       	ldi	r25, 0x06	; 6
    2386:	9f 93       	push	r25
    2388:	8f 93       	push	r24
    238a:	8e 01       	movw	r16, r28
    238c:	07 5d       	subi	r16, 0xD7	; 215
    238e:	1f 4f       	sbci	r17, 0xFF	; 255
    2390:	1f 93       	push	r17
    2392:	0f 93       	push	r16
    2394:	0e 94 f6 16 	call	0x2dec	; 0x2dec <sprintf>
    send_str(UPLINK_USART, buf);
    2398:	b8 01       	movw	r22, r16
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	0e 94 f4 06 	call	0xde8	; 0xde8 <send_str>
    sprintf(buf00, "LAST STATE=%d\r\n", getLastVendState());
    23a0:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <getLastVendState>
    23a4:	1f 92       	push	r1
    23a6:	8f 93       	push	r24
    23a8:	88 e3       	ldi	r24, 0x38	; 56
    23aa:	96 e0       	ldi	r25, 0x06	; 6
    23ac:	9f 93       	push	r25
    23ae:	8f 93       	push	r24
    23b0:	fe 01       	movw	r30, r28
    23b2:	31 96       	adiw	r30, 0x01	; 1
    23b4:	7f 01       	movw	r14, r30
    23b6:	ff 93       	push	r31
    23b8:	ef 93       	push	r30
    23ba:	0e 94 f6 16 	call	0x2dec	; 0x2dec <sprintf>
    send_str(UPLINK_USART, buf00);
    23be:	b7 01       	movw	r22, r14
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	0e 94 f4 06 	call	0xde8	; 0xde8 <send_str>
    timerVal = 1;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	80 93 cd 07 	sts	0x07CD, r24	; 0x8007cd <timerVal>
    sprintf(buf, "VendInvoked with Ammount:  %d\r\n", argV);
    23cc:	4f 92       	push	r4
    23ce:	5f 92       	push	r5
    23d0:	88 e4       	ldi	r24, 0x48	; 72
    23d2:	96 e0       	ldi	r25, 0x06	; 6
    23d4:	9f 93       	push	r25
    23d6:	8f 93       	push	r24
    23d8:	1f 93       	push	r17
    23da:	0f 93       	push	r16
    23dc:	0e 94 f6 16 	call	0x2dec	; 0x2dec <sprintf>
    send_str(UPLINK_USART, buf);
    23e0:	b8 01       	movw	r22, r16
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	0e 94 f4 06 	call	0xde8	; 0xde8 <send_str>
}
    23e8:	0f b6       	in	r0, 0x3f	; 63
    23ea:	f8 94       	cli
    23ec:	de bf       	out	0x3e, r29	; 62
    23ee:	0f be       	out	0x3f, r0	; 63
    23f0:	cd bf       	out	0x3d, r28	; 61
    23f2:	ce 5a       	subi	r28, 0xAE	; 174
    23f4:	df 4f       	sbci	r29, 0xFF	; 255
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	df 91       	pop	r29
    2402:	cf 91       	pop	r28
    2404:	1f 91       	pop	r17
    2406:	0f 91       	pop	r16
    2408:	ff 90       	pop	r15
    240a:	ef 90       	pop	r14
    240c:	df 90       	pop	r13
    240e:	cf 90       	pop	r12
    2410:	bf 90       	pop	r11
    2412:	af 90       	pop	r10
    2414:	9f 90       	pop	r9
    2416:	8f 90       	pop	r8
    2418:	7f 90       	pop	r7
    241a:	6f 90       	pop	r6
    241c:	5f 90       	pop	r5
    241e:	4f 90       	pop	r4
    2420:	08 95       	ret
            ptr = strtok(NULL, delim);
    2422:	b4 01       	movw	r22, r8
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	80 e0       	ldi	r24, 0x00	; 0
        else if (i == 1)
    2428:	f1 e0       	ldi	r31, 0x01	; 1
    242a:	af 16       	cp	r10, r31
    242c:	b1 04       	cpc	r11, r1
    242e:	49 f4       	brne	.+18     	; 0x2442 <vendInvoker+0x15a>
            ptr = strtok(NULL, delim);
    2430:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strtok>
    2434:	18 2f       	mov	r17, r24
    2436:	09 2f       	mov	r16, r25
            b = atoi(ptr);
    2438:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <atoi>
    243c:	c8 2e       	mov	r12, r24
    243e:	79 2e       	mov	r7, r25
    2440:	93 cf       	rjmp	.-218    	; 0x2368 <vendInvoker+0x80>
            ptr = strtok(NULL, delim);
    2442:	0e 94 98 16 	call	0x2d30	; 0x2d30 <strtok>
    2446:	18 2f       	mov	r17, r24
    2448:	09 2f       	mov	r16, r25
            c = atoi(ptr);
    244a:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <atoi>
    244e:	d8 2e       	mov	r13, r24
    2450:	69 2e       	mov	r6, r25
            paymentMethod = c;
    2452:	80 93 ca 07 	sts	0x07CA, r24	; 0x8007ca <paymentMethod>
    2456:	88 cf       	rjmp	.-240    	; 0x2368 <vendInvoker+0x80>

00002458 <cmd_deny_vend>:
    }
}

void cmd_deny_vend(char *arg)
{
    if (mdb_state == MDB_VENDING)
    2458:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <mdb_state>
    245c:	84 30       	cpi	r24, 0x04	; 4
    245e:	39 f4       	brne	.+14     	; 0x246e <cmd_deny_vend+0x16>
    {
        session.result.vend_denied = 1;
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	80 93 99 07 	sts	0x0799, r24	; 0x800799 <session+0x4>
        mdb_poll_reply = MDB_REPLY_VEND_DENIED;
    2466:	87 e0       	ldi	r24, 0x07	; 7
    2468:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <mdb_poll_reply>
    }
    else
    {
        send_str_p(UPLINK_USART, PSTR("Error: MateDealer is not in a suitable state to deny a vend\r\n"));
    }
}
    246c:	08 95       	ret
        send_str_p(UPLINK_USART, PSTR("Error: MateDealer is not in a suitable state to deny a vend\r\n"));
    246e:	64 e9       	ldi	r22, 0x94	; 148
    2470:	75 e0       	ldi	r23, 0x05	; 5
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	0c 94 29 07 	jmp	0xe52	; 0xe52 <send_str_p>

00002478 <cmd_cancel_session>:

void cmd_cancel_session(char *arg)
{
    if (mdb_state == MDB_SESSION_IDLE)
    2478:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <mdb_state>
    247c:	83 30       	cpi	r24, 0x03	; 3
    247e:	21 f4       	brne	.+8      	; 0x2488 <cmd_cancel_session+0x10>
    {
        mdb_poll_reply = MDB_REPLY_SESSION_CANCEL_REQ;
    2480:	85 e0       	ldi	r24, 0x05	; 5
    2482:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <mdb_poll_reply>
    }
    else
    {
        send_str_p(UPLINK_USART, PSTR("Error: MateDealer is not in a suitable state to cancel a session\r\n"));
    }
}
    2486:	08 95       	ret
        send_str_p(UPLINK_USART, PSTR("Error: MateDealer is not in a suitable state to cancel a session\r\n"));
    2488:	61 e5       	ldi	r22, 0x51	; 81
    248a:	75 e0       	ldi	r23, 0x05	; 5
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	0c 94 29 07 	jmp	0xe52	; 0xe52 <send_str_p>

00002492 <cmd_start_session>:
{
    2492:	cf 93       	push	r28
    2494:	df 93       	push	r29
    2496:	d8 2f       	mov	r29, r24
    2498:	c9 2f       	mov	r28, r25
    if (mdb_state == MDB_ENABLED)
    249a:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <mdb_state>
    249e:	82 30       	cpi	r24, 0x02	; 2
    24a0:	09 f5       	brne	.+66     	; 0x24e4 <cmd_start_session+0x52>
        if (session.start.flag == 0)
    24a2:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <session>
    24a6:	81 11       	cpse	r24, r1
    24a8:	16 c0       	rjmp	.+44     	; 0x24d6 <cmd_start_session+0x44>
            session.start.flag = 1;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <session>
            send_str_p(UPLINK_USART, PSTR("cmd start session00"));
    24b0:	63 e6       	ldi	r22, 0x63	; 99
    24b2:	76 e0       	ldi	r23, 0x06	; 6
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
            session.start.funds = atoi(arg);
    24ba:	8d 2f       	mov	r24, r29
    24bc:	9c 2f       	mov	r25, r28
    24be:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <atoi>
    24c2:	90 93 97 07 	sts	0x0797, r25	; 0x800797 <session+0x2>
    24c6:	80 93 96 07 	sts	0x0796, r24	; 0x800796 <session+0x1>
            mdb_poll_reply = MDB_REPLY_BEGIN_SESSION;
    24ca:	84 e0       	ldi	r24, 0x04	; 4
    24cc:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <mdb_poll_reply>
}
    24d0:	df 91       	pop	r29
    24d2:	cf 91       	pop	r28
    24d4:	08 95       	ret
            send_str_p(UPLINK_USART, PSTR("Error: Session is already running\r\n"));
    24d6:	6f e3       	ldi	r22, 0x3F	; 63
    24d8:	76 e0       	ldi	r23, 0x06	; 6
        send_str_p(UPLINK_USART, PSTR("Error: MateDealer not ready for a session\r\n"));
    24da:	80 e0       	ldi	r24, 0x00	; 0
}
    24dc:	df 91       	pop	r29
    24de:	cf 91       	pop	r28
        send_str_p(UPLINK_USART, PSTR("Error: MateDealer not ready for a session\r\n"));
    24e0:	0c 94 29 07 	jmp	0xe52	; 0xe52 <send_str_p>
    24e4:	63 e1       	ldi	r22, 0x13	; 19
    24e6:	76 e0       	ldi	r23, 0x06	; 6
    24e8:	f8 cf       	rjmp	.-16     	; 0x24da <cmd_start_session+0x48>

000024ea <cmd_info>:
{
    24ea:	0f 93       	push	r16
    24ec:	1f 93       	push	r17
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	a8 97       	sbiw	r28, 0x28	; 40
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	de bf       	out	0x3e, r29	; 62
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	cd bf       	out	0x3d, r28	; 61
    if (mdb_state >= MDB_ENABLED)
    2502:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <mdb_state>
    2506:	82 30       	cpi	r24, 0x02	; 2
    2508:	08 f4       	brcc	.+2      	; 0x250c <cmd_info+0x22>
    250a:	8b c0       	rjmp	.+278    	; 0x2622 <cmd_info+0x138>
        send_str_p(UPLINK_USART, PSTR("@-----------------------------------------------\r\n"));
    250c:	69 e9       	ldi	r22, 0x99	; 153
    250e:	77 e0       	ldi	r23, 0x07	; 7
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
        send_str_p(UPLINK_USART, PSTR("## VMC configuration data ##\r\n"));
    2516:	6a e7       	ldi	r22, 0x7A	; 122
    2518:	77 e0       	ldi	r23, 0x07	; 7
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
        sprintf(buffer, "VMC feature level:       %d\r\n", vmc.feature_level);
    2520:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <vmc>
    2524:	1f 92       	push	r1
    2526:	8f 93       	push	r24
    2528:	88 e6       	ldi	r24, 0x68	; 104
    252a:	96 e0       	ldi	r25, 0x06	; 6
    252c:	9f 93       	push	r25
    252e:	8f 93       	push	r24
    2530:	8e 01       	movw	r16, r28
    2532:	0f 5f       	subi	r16, 0xFF	; 255
    2534:	1f 4f       	sbci	r17, 0xFF	; 255
    2536:	1f 93       	push	r17
    2538:	0f 93       	push	r16
    253a:	0e 94 f6 16 	call	0x2dec	; 0x2dec <sprintf>
        send_str(UPLINK_USART, buffer);
    253e:	b8 01       	movw	r22, r16
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	0e 94 f4 06 	call	0xde8	; 0xde8 <send_str>
        sprintf(buffer, "VMC display columns:     %d\r\n", vmc.dispaly_cols);
    2546:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <vmc+0x1>
    254a:	1f 92       	push	r1
    254c:	8f 93       	push	r24
    254e:	86 e8       	ldi	r24, 0x86	; 134
    2550:	96 e0       	ldi	r25, 0x06	; 6
    2552:	9f 93       	push	r25
    2554:	8f 93       	push	r24
    2556:	1f 93       	push	r17
    2558:	0f 93       	push	r16
    255a:	0e 94 f6 16 	call	0x2dec	; 0x2dec <sprintf>
        send_str(UPLINK_USART, buffer);
    255e:	b8 01       	movw	r22, r16
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	0e 94 f4 06 	call	0xde8	; 0xde8 <send_str>
        sprintf(buffer, "VMC display rows:        %d\r\n", vmc.dispaly_rows);
    2566:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <vmc+0x2>
    256a:	1f 92       	push	r1
    256c:	8f 93       	push	r24
    256e:	84 ea       	ldi	r24, 0xA4	; 164
    2570:	96 e0       	ldi	r25, 0x06	; 6
    2572:	9f 93       	push	r25
    2574:	8f 93       	push	r24
    2576:	1f 93       	push	r17
    2578:	0f 93       	push	r16
    257a:	0e 94 f6 16 	call	0x2dec	; 0x2dec <sprintf>
        send_str(UPLINK_USART, buffer);
    257e:	b8 01       	movw	r22, r16
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	0e 94 f4 06 	call	0xde8	; 0xde8 <send_str>
        sprintf(buffer, "VMC display info:        %d\r\n", vmc.dispaly_info);
    2586:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <vmc+0x3>
    258a:	1f 92       	push	r1
    258c:	8f 93       	push	r24
    258e:	82 ec       	ldi	r24, 0xC2	; 194
    2590:	96 e0       	ldi	r25, 0x06	; 6
    2592:	9f 93       	push	r25
    2594:	8f 93       	push	r24
    2596:	1f 93       	push	r17
    2598:	0f 93       	push	r16
    259a:	0e 94 f6 16 	call	0x2dec	; 0x2dec <sprintf>
        send_str(UPLINK_USART, buffer);
    259e:	b8 01       	movw	r22, r16
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	0e 94 f4 06 	call	0xde8	; 0xde8 <send_str>
        send_str_p(UPLINK_USART, PSTR("##    VMC price range     ##\r\n"));
    25a6:	6b e5       	ldi	r22, 0x5B	; 91
    25a8:	77 e0       	ldi	r23, 0x07	; 7
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
        sprintf(buffer, "Maximum price:           %d\r\n", price.max);
    25b0:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <price+0x1>
    25b4:	8f 93       	push	r24
    25b6:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <price>
    25ba:	8f 93       	push	r24
    25bc:	80 ee       	ldi	r24, 0xE0	; 224
    25be:	96 e0       	ldi	r25, 0x06	; 6
    25c0:	9f 93       	push	r25
    25c2:	8f 93       	push	r24
    25c4:	1f 93       	push	r17
    25c6:	0f 93       	push	r16
    25c8:	0e 94 f6 16 	call	0x2dec	; 0x2dec <sprintf>
        send_str(UPLINK_USART, buffer);
    25cc:	b8 01       	movw	r22, r16
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	0e 94 f4 06 	call	0xde8	; 0xde8 <send_str>
        sprintf(buffer, "Minimum price:           %d\r\n", price.min);
    25d4:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <price+0x3>
    25d8:	8f 93       	push	r24
    25da:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <price+0x2>
    25de:	8f 93       	push	r24
    25e0:	8e ef       	ldi	r24, 0xFE	; 254
    25e2:	96 e0       	ldi	r25, 0x06	; 6
    25e4:	9f 93       	push	r25
    25e6:	8f 93       	push	r24
    25e8:	1f 93       	push	r17
    25ea:	0f 93       	push	r16
    25ec:	0e 94 f6 16 	call	0x2dec	; 0x2dec <sprintf>
        send_str(UPLINK_USART, buffer);
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	b8 01       	movw	r22, r16
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	0e 94 f4 06 	call	0xde8	; 0xde8 <send_str>
        send_str_p(UPLINK_USART, PSTR("-----------------------------------------------*\r\n"));
    2602:	68 e2       	ldi	r22, 0x28	; 40
    2604:	77 e0       	ldi	r23, 0x07	; 7
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
}
    260c:	a8 96       	adiw	r28, 0x28	; 40
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	de bf       	out	0x3e, r29	; 62
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	cd bf       	out	0x3d, r28	; 61
    2618:	df 91       	pop	r29
    261a:	cf 91       	pop	r28
    261c:	1f 91       	pop	r17
    261e:	0f 91       	pop	r16
    2620:	08 95       	ret
        send_str_p(UPLINK_USART, PSTR("Error: Setup not yet completed!\r\n"));
    2622:	66 e0       	ldi	r22, 0x06	; 6
    2624:	77 e0       	ldi	r23, 0x07	; 7
    2626:	80 e0       	ldi	r24, 0x00	; 0
}
    2628:	a8 96       	adiw	r28, 0x28	; 40
    262a:	0f b6       	in	r0, 0x3f	; 63
    262c:	f8 94       	cli
    262e:	de bf       	out	0x3e, r29	; 62
    2630:	0f be       	out	0x3f, r0	; 63
    2632:	cd bf       	out	0x3d, r28	; 61
    2634:	df 91       	pop	r29
    2636:	cf 91       	pop	r28
    2638:	1f 91       	pop	r17
    263a:	0f 91       	pop	r16
        send_str_p(UPLINK_USART, PSTR("Error: Setup not yet completed!\r\n"));
    263c:	0c 94 29 07 	jmp	0xe52	; 0xe52 <send_str_p>

00002640 <cmd_approve_vend>:
{
    2640:	0f 93       	push	r16
    2642:	1f 93       	push	r17
    2644:	cf 93       	push	r28
    2646:	df 93       	push	r29
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	6e 97       	sbiw	r28, 0x1e	; 30
    264e:	0f b6       	in	r0, 0x3f	; 63
    2650:	f8 94       	cli
    2652:	de bf       	out	0x3e, r29	; 62
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	cd bf       	out	0x3d, r28	; 61
    2658:	8c 01       	movw	r16, r24
    if (mdb_state == MDB_VENDING)
    265a:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <mdb_state>
    265e:	84 30       	cpi	r24, 0x04	; 4
    2660:	91 f5       	brne	.+100    	; 0x26c6 <cmd_approve_vend+0x86>
        session.result.vend_approved = 1;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <session+0x3>
        session.result.vend_amount = atoi(arg);
    2668:	c8 01       	movw	r24, r16
    266a:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <atoi>
    266e:	90 93 9b 07 	sts	0x079B, r25	; 0x80079b <session+0x6>
    2672:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <session+0x5>
        sprintf(ac, "cmd-approved %d", atoi(arg));
    2676:	c8 01       	movw	r24, r16
    2678:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <atoi>
    267c:	9f 93       	push	r25
    267e:	8f 93       	push	r24
    2680:	8c e1       	ldi	r24, 0x1C	; 28
    2682:	97 e0       	ldi	r25, 0x07	; 7
    2684:	9f 93       	push	r25
    2686:	8f 93       	push	r24
    2688:	8e 01       	movw	r16, r28
    268a:	0f 5f       	subi	r16, 0xFF	; 255
    268c:	1f 4f       	sbci	r17, 0xFF	; 255
    268e:	1f 93       	push	r17
    2690:	0f 93       	push	r16
    2692:	0e 94 f6 16 	call	0x2dec	; 0x2dec <sprintf>
        send_str(UPLINK_USART, ac);
    2696:	b8 01       	movw	r22, r16
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	0e 94 f4 06 	call	0xde8	; 0xde8 <send_str>
        mdb_poll_reply = MDB_REPLY_VEND_APPROVED;
    269e:	86 e0       	ldi	r24, 0x06	; 6
    26a0:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <mdb_poll_reply>
}
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	6e 96       	adiw	r28, 0x1e	; 30
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	df 91       	pop	r29
    26be:	cf 91       	pop	r28
    26c0:	1f 91       	pop	r17
    26c2:	0f 91       	pop	r16
    26c4:	08 95       	ret
        send_str_p(UPLINK_USART, PSTR("Error: MateDealer is not in a suitable state to approve a vend\r\n"));
    26c6:	62 ed       	ldi	r22, 0xD2	; 210
    26c8:	75 e0       	ldi	r23, 0x05	; 5
    26ca:	80 e0       	ldi	r24, 0x00	; 0
}
    26cc:	6e 96       	adiw	r28, 0x1e	; 30
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	de bf       	out	0x3e, r29	; 62
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	cd bf       	out	0x3d, r28	; 61
    26d8:	df 91       	pop	r29
    26da:	cf 91       	pop	r28
    26dc:	1f 91       	pop	r17
    26de:	0f 91       	pop	r16
        send_str_p(UPLINK_USART, PSTR("Error: MateDealer is not in a suitable state to approve a vend\r\n"));
    26e0:	0c 94 29 07 	jmp	0xe52	; 0xe52 <send_str_p>

000026e4 <parse_cmd>:
{
    26e4:	bf 92       	push	r11
    26e6:	cf 92       	push	r12
    26e8:	df 92       	push	r13
    26ea:	ef 92       	push	r14
    26ec:	ff 92       	push	r15
    26ee:	0f 93       	push	r16
    26f0:	1f 93       	push	r17
    26f2:	cf 93       	push	r28
    26f4:	df 93       	push	r29
    26f6:	0f 92       	push	r0
    26f8:	0f 92       	push	r0
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
    26fe:	9a 83       	std	Y+2, r25	; 0x02
    2700:	89 83       	std	Y+1, r24	; 0x01
    tmp = strsep(&cmd, " ");
    2702:	6c e2       	ldi	r22, 0x2C	; 44
    2704:	77 e0       	ldi	r23, 0x07	; 7
    2706:	ce 01       	movw	r24, r28
    2708:	01 96       	adiw	r24, 0x01	; 1
    270a:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <strsep>
    270e:	b8 2e       	mov	r11, r24
    2710:	c9 2e       	mov	r12, r25
    uint8_t index = 0;
    2712:	d1 2c       	mov	r13, r1
    while (strcasecmp(CMD_LIST[index].cmd, tmp))
    2714:	0d 2d       	mov	r16, r13
    2716:	10 e0       	ldi	r17, 0x00	; 0
    2718:	84 e0       	ldi	r24, 0x04	; 4
    271a:	d8 9e       	mul	r13, r24
    271c:	90 01       	movw	r18, r0
    271e:	11 24       	eor	r1, r1
    2720:	d9 01       	movw	r26, r18
    2722:	a1 5b       	subi	r26, 0xB1	; 177
    2724:	ba 4f       	sbci	r27, 0xFA	; 250
    2726:	7d 01       	movw	r14, r26
    2728:	6b 2d       	mov	r22, r11
    272a:	7c 2d       	mov	r23, r12
    272c:	8d 91       	ld	r24, X+
    272e:	9c 91       	ld	r25, X
    2730:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <strcasecmp>
    2734:	89 2b       	or	r24, r25
    2736:	41 f4       	brne	.+16     	; 0x2748 <parse_cmd+0x64>
    CMD_LIST[index].funcptr(cmd);
    2738:	d7 01       	movw	r26, r14
    273a:	12 96       	adiw	r26, 0x02	; 2
    273c:	ed 91       	ld	r30, X+
    273e:	fc 91       	ld	r31, X
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	9a 81       	ldd	r25, Y+2	; 0x02
    2744:	19 95       	eicall
    return;
    2746:	10 c0       	rjmp	.+32     	; 0x2768 <parse_cmd+0x84>
        if (CMD_LIST[index + 1].cmd == NULL)
    2748:	00 0f       	add	r16, r16
    274a:	11 1f       	adc	r17, r17
    274c:	00 0f       	add	r16, r16
    274e:	11 1f       	adc	r17, r17
    2750:	f8 01       	movw	r30, r16
    2752:	ed 5a       	subi	r30, 0xAD	; 173
    2754:	fa 4f       	sbci	r31, 0xFA	; 250
    2756:	80 81       	ld	r24, Z
    2758:	91 81       	ldd	r25, Z+1	; 0x01
    275a:	89 2b       	or	r24, r25
    275c:	89 f4       	brne	.+34     	; 0x2780 <parse_cmd+0x9c>
            send_str_p(UPLINK_USART, PSTR("Error: Unknown command\r\n"));
    275e:	62 e1       	ldi	r22, 0x12	; 18
    2760:	7a e0       	ldi	r23, 0x0A	; 10
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
}
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	df 91       	pop	r29
    276e:	cf 91       	pop	r28
    2770:	1f 91       	pop	r17
    2772:	0f 91       	pop	r16
    2774:	ff 90       	pop	r15
    2776:	ef 90       	pop	r14
    2778:	df 90       	pop	r13
    277a:	cf 90       	pop	r12
    277c:	bf 90       	pop	r11
    277e:	08 95       	ret
        index++;
    2780:	d3 94       	inc	r13
    2782:	c8 cf       	rjmp	.-112    	; 0x2714 <parse_cmd+0x30>

00002784 <uplink_cmd_handler>:
    if (buffer_level(UPLINK_USART, RX) < 1)
    2784:	60 e0       	ldi	r22, 0x00	; 0
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	0e 94 61 06 	call	0xcc2	; 0xcc2 <buffer_level>
    278c:	88 23       	and	r24, r24
    278e:	99 f1       	breq	.+102    	; 0x27f6 <uplink_cmd_handler+0x72>
    if (index == MAX_CMD_LENGTH)
    2790:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <index.36>
    2794:	84 31       	cpi	r24, 0x14	; 20
    2796:	11 f4       	brne	.+4      	; 0x279c <uplink_cmd_handler+0x18>
        index = 0;
    2798:	10 92 e2 07 	sts	0x07E2, r1	; 0x8007e2 <index.36>
    recv_char(UPLINK_USART, &cmd[index]);
    279c:	60 91 e2 07 	lds	r22, 0x07E2	; 0x8007e2 <index.36>
    27a0:	70 e0       	ldi	r23, 0x00	; 0
    27a2:	62 53       	subi	r22, 0x32	; 50
    27a4:	78 4f       	sbci	r23, 0xF8	; 248
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	0e 94 f0 06 	call	0xde0	; 0xde0 <recv_char>
    switch (cmd[index])
    27ac:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <index.36>
    27b0:	e8 2f       	mov	r30, r24
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	e2 53       	subi	r30, 0x32	; 50
    27b6:	f8 4f       	sbci	r31, 0xF8	; 248
    27b8:	60 81       	ld	r22, Z
    27ba:	6d 30       	cpi	r22, 0x0D	; 13
    27bc:	e9 f0       	breq	.+58     	; 0x27f8 <uplink_cmd_handler+0x74>
    27be:	a0 f4       	brcc	.+40     	; 0x27e8 <uplink_cmd_handler+0x64>
    27c0:	68 30       	cpi	r22, 0x08	; 8
    27c2:	61 f1       	breq	.+88     	; 0x281c <uplink_cmd_handler+0x98>
    27c4:	6a 30       	cpi	r22, 0x0A	; 10
    27c6:	b9 f0       	breq	.+46     	; 0x27f6 <uplink_cmd_handler+0x72>
        if (cmd[index - 1] == 0x5B && cmd[index - 2] == 0x1B)
    27c8:	df 01       	movw	r26, r30
    27ca:	11 97       	sbiw	r26, 0x01	; 1
    27cc:	9c 91       	ld	r25, X
    27ce:	9b 35       	cpi	r25, 0x5B	; 91
    27d0:	29 f4       	brne	.+10     	; 0x27dc <uplink_cmd_handler+0x58>
    27d2:	32 97       	sbiw	r30, 0x02	; 2
    27d4:	90 81       	ld	r25, Z
            index = index - 2;
    27d6:	82 50       	subi	r24, 0x02	; 2
        if (cmd[index - 1] == 0x5B && cmd[index - 2] == 0x1B)
    27d8:	9b 31       	cpi	r25, 0x1B	; 27
    27da:	59 f0       	breq	.+22     	; 0x27f2 <uplink_cmd_handler+0x6e>
            send_char(UPLINK_USART, cmd[index]);
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <send_char>
            index++;
    27e2:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <index.36>
    27e6:	04 c0       	rjmp	.+8      	; 0x27f0 <uplink_cmd_handler+0x6c>
    switch (cmd[index])
    27e8:	96 2f       	mov	r25, r22
    27ea:	9f 7b       	andi	r25, 0xBF	; 191
    27ec:	9b 31       	cpi	r25, 0x1B	; 27
    27ee:	61 f7       	brne	.-40     	; 0x27c8 <uplink_cmd_handler+0x44>
            index++;
    27f0:	8f 5f       	subi	r24, 0xFF	; 255
    27f2:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <index.36>
}
    27f6:	08 95       	ret
        send_str(UPLINK_USART, "\r\n");
    27f8:	65 e3       	ldi	r22, 0x35	; 53
    27fa:	76 e0       	ldi	r23, 0x06	; 6
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	0e 94 f4 06 	call	0xde8	; 0xde8 <send_str>
        cmd[index] = '\0';
    2802:	e0 91 e2 07 	lds	r30, 0x07E2	; 0x8007e2 <index.36>
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	e2 53       	subi	r30, 0x32	; 50
    280a:	f8 4f       	sbci	r31, 0xF8	; 248
    280c:	10 82       	st	Z, r1
        parse_cmd(cmd);
    280e:	8e ec       	ldi	r24, 0xCE	; 206
    2810:	97 e0       	ldi	r25, 0x07	; 7
    2812:	0e 94 72 13 	call	0x26e4	; 0x26e4 <parse_cmd>
        index = 0;
    2816:	10 92 e2 07 	sts	0x07E2, r1	; 0x8007e2 <index.36>
        break;
    281a:	08 95       	ret
        index--;
    281c:	81 50       	subi	r24, 0x01	; 1
    281e:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <index.36>
        send_char(UPLINK_USART, '\b');
    2822:	68 e0       	ldi	r22, 0x08	; 8
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <send_char>

0000282a <startTimer>:
    timerVal = 1;
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	80 93 cd 07 	sts	0x07CD, r24	; 0x8007cd <timerVal>
}
    2830:	08 95       	ret

00002832 <stopTimer>:
    timerVal = 0;
    2832:	10 92 cd 07 	sts	0x07CD, r1	; 0x8007cd <timerVal>
    timerPassV = 0;
    2836:	10 92 cc 07 	sts	0x07CC, r1	; 0x8007cc <timerPassV>
    vendValue = "0";
    283a:	8e e2       	ldi	r24, 0x2E	; 46
    283c:	97 e0       	ldi	r25, 0x07	; 7
    283e:	90 93 c9 07 	sts	0x07C9, r25	; 0x8007c9 <vendValue+0x1>
    2842:	80 93 c8 07 	sts	0x07C8, r24	; 0x8007c8 <vendValue>
}
    2846:	08 95       	ret

00002848 <getTimerState>:
}
    2848:	80 91 cd 07 	lds	r24, 0x07CD	; 0x8007cd <timerVal>
    284c:	08 95       	ret

0000284e <incrementTimerPass>:
    timerPassV = timerPassV + 1;
    284e:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <timerPassV>
    2852:	8f 5f       	subi	r24, 0xFF	; 255
    2854:	80 93 cc 07 	sts	0x07CC, r24	; 0x8007cc <timerPassV>
}
    2858:	08 95       	ret

0000285a <getTimerPass>:
}
    285a:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <timerPassV>
    285e:	08 95       	ret

00002860 <liveVendMonitor>:
}
    2860:	08 95       	ret

00002862 <resetDevice>:
    stopTimer();
    2862:	0e 94 19 14 	call	0x2832	; 0x2832 <stopTimer>
    RESET();
    2866:	e0 e0       	ldi	r30, 0x00	; 0
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	09 94       	ijmp
}
    286c:	08 95       	ret

0000286e <timeHandler>:
    if (v == 0)
    286e:	81 11       	cpse	r24, r1
    2870:	08 c0       	rjmp	.+16     	; 0x2882 <timeHandler+0x14>
        cmd_start_session(vendValue);
    2872:	80 91 c8 07 	lds	r24, 0x07C8	; 0x8007c8 <vendValue>
    2876:	90 91 c9 07 	lds	r25, 0x07C9	; 0x8007c9 <vendValue+0x1>
    287a:	0e 94 49 12 	call	0x2492	; 0x2492 <cmd_start_session>
    incrementTimerPass();
    287e:	0c 94 27 14 	jmp	0x284e	; 0x284e <incrementTimerPass>
    if (v == 3)
    2882:	83 30       	cpi	r24, 0x03	; 3
    2884:	f1 f0       	breq	.+60     	; 0x28c2 <timeHandler+0x54>
    if (v == 9)
    2886:	89 30       	cpi	r24, 0x09	; 9
    2888:	59 f0       	breq	.+22     	; 0x28a0 <timeHandler+0x32>
    if (v == 12)
    288a:	8c 30       	cpi	r24, 0x0C	; 12
    288c:	99 f0       	breq	.+38     	; 0x28b4 <timeHandler+0x46>
    if (v == 27)
    288e:	8b 31       	cpi	r24, 0x1B	; 27
    2890:	c1 f0       	breq	.+48     	; 0x28c2 <timeHandler+0x54>
    if (v == 33)
    2892:	81 32       	cpi	r24, 0x21	; 33
    2894:	e9 f0       	breq	.+58     	; 0x28d0 <timeHandler+0x62>
    if (v == 38)
    2896:	86 32       	cpi	r24, 0x26	; 38
    2898:	89 f0       	breq	.+34     	; 0x28bc <timeHandler+0x4e>
    if (v == 42)
    289a:	8a 32       	cpi	r24, 0x2A	; 42
    289c:	79 f0       	breq	.+30     	; 0x28bc <timeHandler+0x4e>
    289e:	ef cf       	rjmp	.-34     	; 0x287e <timeHandler+0x10>
        if (vendStateT == 1)
    28a0:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <vendStateT>
            send_str_p(UPLINK_USART, PSTR("@vend-success*\r\n"));
    28a4:	6d ea       	ldi	r22, 0xAD	; 173
    28a6:	79 e0       	ldi	r23, 0x09	; 9
        if (vendStateT == 1)
    28a8:	81 30       	cpi	r24, 0x01	; 1
    28aa:	49 f7       	brne	.-46     	; 0x287e <timeHandler+0x10>
            send_str_p(UPLINK_USART, PSTR("@vend-failed*\r\n"));
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
    28b2:	e5 cf       	rjmp	.-54     	; 0x287e <timeHandler+0x10>
        if (vendStateT == 1)
    28b4:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <vendStateT>
    28b8:	81 30       	cpi	r24, 0x01	; 1
    28ba:	09 f7       	brne	.-62     	; 0x287e <timeHandler+0x10>
        resetDevice();
    28bc:	0e 94 31 14 	call	0x2862	; 0x2862 <resetDevice>
    if (v == 42)
    28c0:	de cf       	rjmp	.-68     	; 0x287e <timeHandler+0x10>
        cmd_approve_vend(vendValue);
    28c2:	80 91 c8 07 	lds	r24, 0x07C8	; 0x8007c8 <vendValue>
    28c6:	90 91 c9 07 	lds	r25, 0x07C9	; 0x8007c9 <vendValue+0x1>
    28ca:	0e 94 20 13 	call	0x2640	; 0x2640 <cmd_approve_vend>
    if (v == 42)
    28ce:	d7 cf       	rjmp	.-82     	; 0x287e <timeHandler+0x10>
        if (vendStateT == 1)
    28d0:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <vendStateT>
            send_str_p(UPLINK_USART, PSTR("@vend-success*\r\n"));
    28d4:	6c e9       	ldi	r22, 0x9C	; 156
    28d6:	79 e0       	ldi	r23, 0x09	; 9
        if (vendStateT == 1)
    28d8:	81 30       	cpi	r24, 0x01	; 1
    28da:	41 f3       	breq	.-48     	; 0x28ac <timeHandler+0x3e>
            send_str_p(UPLINK_USART, PSTR("@vend-failed*\r\n"));
    28dc:	6c e8       	ldi	r22, 0x8C	; 140
    28de:	79 e0       	ldi	r23, 0x09	; 9
    28e0:	e5 cf       	rjmp	.-54     	; 0x28ac <timeHandler+0x3e>

000028e2 <setupPB>:
//PC4,PC5 pin 32,33
#include "pushButtonHandle.h"

void setupPB(uint8_t pin)
{
    if (pin == PIN34)
    28e2:	82 32       	cpi	r24, 0x22	; 34
    28e4:	21 f4       	brne	.+8      	; 0x28ee <setupPB+0xc>
        PORTC = 0b11111111; //internal pullup
    }

    if (pin == PIN32)
    {
        DDRC = 0b00000000;  //input
    28e6:	17 b8       	out	0x07, r1	; 7
        PORTC = 0b11111111; //internal pullup
    28e8:	8f ef       	ldi	r24, 0xFF	; 255
    28ea:	88 b9       	out	0x08, r24	; 8
    }
}
    28ec:	08 95       	ret
    if (pin == PIN33)
    28ee:	81 32       	cpi	r24, 0x21	; 33
    28f0:	d1 f3       	breq	.-12     	; 0x28e6 <setupPB+0x4>
    if (pin == PIN32)
    28f2:	80 32       	cpi	r24, 0x20	; 32
    28f4:	c1 f3       	breq	.-16     	; 0x28e6 <setupPB+0x4>
    28f6:	08 95       	ret

000028f8 <getPBState>:

uint8_t getPBState(uint8_t pin)
{

    if (pin == PIN33)
    28f8:	81 32       	cpi	r24, 0x21	; 33
    28fa:	39 f4       	brne	.+14     	; 0x290a <getPBState+0x12>
    {
        //send_str_p(UPLINK_USART,PSTR("Switching OFF TX Port\r\n"));
        if (!(PINC & (1 << PC5)))
    28fc:	86 b1       	in	r24, 0x06	; 6
    28fe:	85 fb       	bst	r24, 5
    2900:	88 27       	eor	r24, r24
    2902:	80 f9       	bld	r24, 0
        }
    }
    else if (pin == PIN32)
    {
        //send_str_p(UPLINK_USART,PSTR("Switching OFF TX Port\r\n"));
        if (!(PINC & (1 << PC4)))
    2904:	91 e0       	ldi	r25, 0x01	; 1
    2906:	89 27       	eor	r24, r25
    2908:	08 95       	ret
    else if (pin == PIN32)
    290a:	80 32       	cpi	r24, 0x20	; 32
    290c:	21 f4       	brne	.+8      	; 0x2916 <getPBState+0x1e>
        if (!(PINC & (1 << PC4)))
    290e:	86 b1       	in	r24, 0x06	; 6
    2910:	82 95       	swap	r24
    2912:	81 70       	andi	r24, 0x01	; 1
    2914:	f7 cf       	rjmp	.-18     	; 0x2904 <getPBState+0xc>
        {
            return 0;
        }
    }

    else if (pin == PIN34)
    2916:	82 32       	cpi	r24, 0x22	; 34
    2918:	29 f4       	brne	.+10     	; 0x2924 <getPBState+0x2c>
    {
        //send_str_p(UPLINK_USART,PSTR("Switching OFF TX Port\r\n"));
        if (!(PINC & (1 << PC3)))
    291a:	86 b1       	in	r24, 0x06	; 6
    291c:	83 fb       	bst	r24, 3
    291e:	88 27       	eor	r24, r24
    2920:	80 f9       	bld	r24, 0
    2922:	f0 cf       	rjmp	.-32     	; 0x2904 <getPBState+0xc>
        else
        {
            return 0;
        }
    }
    2924:	08 95       	ret

00002926 <setupTxSwitch>:

void setupTxSwitch(uint8_t pin)

{
  // DDRB = 0b01000000;
  if (pin == PIN12)
    2926:	8c 30       	cpi	r24, 0x0C	; 12
    2928:	19 f4       	brne	.+6      	; 0x2930 <setupTxSwitch+0xa>
  {
    DDRB = 0xFF;
    292a:	8f ef       	ldi	r24, 0xFF	; 255
    292c:	84 b9       	out	0x04, r24	; 4
    PORTB = 0x00;
    292e:	15 b8       	out	0x05, r1	; 5
  }
  if (pin == PIN13)
  {
  }

  send_str_p(UPLINK_USART, PSTR("SettingUp Tx Switch\r\n"));
    2930:	6b e2       	ldi	r22, 0x2B	; 43
    2932:	7a e0       	ldi	r23, 0x0A	; 10
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	0c 94 29 07 	jmp	0xe52	; 0xe52 <send_str_p>

0000293a <txSwitchState>:
}
void txSwitchState(uint8_t pin, uint8_t val)
{

  if (pin == PIN12 && val == 0)
    293a:	8c 30       	cpi	r24, 0x0C	; 12
    293c:	41 f4       	brne	.+16     	; 0x294e <txSwitchState+0x14>
    293e:	61 11       	cpse	r22, r1
    2940:	02 c0       	rjmp	.+4      	; 0x2946 <txSwitchState+0xc>

  else if (pin == PIN13 && val == 0)
  {
    //send_str_p(UPLINK_USART,PSTR("Switching OFF TX Port\r\n"));

    PORTB = PIN13_OFF;
    2942:	15 b8       	out	0x05, r1	; 5
    2944:	08 95       	ret
    PORTB = PIN12_ON;
    2946:	80 e4       	ldi	r24, 0x40	; 64
  else if (pin == PIN12 && val == 1)
    2948:	61 30       	cpi	r22, 0x01	; 1
    294a:	41 f0       	breq	.+16     	; 0x295c <txSwitchState+0x22>
  else if (pin == PIN13 && val == 1)
  {
    //  send_str_p(UPLINK_USART,PSTR("Switching ON TX Port\r\n"));
    PORTB = PIN13_ON;
  }
    294c:	08 95       	ret
  else if (pin == PIN13 && val == 0)
    294e:	8d 30       	cpi	r24, 0x0D	; 13
    2950:	e9 f7       	brne	.-6      	; 0x294c <txSwitchState+0x12>
    2952:	66 23       	and	r22, r22
    2954:	b1 f3       	breq	.-20     	; 0x2942 <txSwitchState+0x8>
  else if (pin == PIN13 && val == 1)
    2956:	61 30       	cpi	r22, 0x01	; 1
    2958:	c9 f7       	brne	.-14     	; 0x294c <txSwitchState+0x12>
    PORTB = PIN13_ON;
    295a:	80 e8       	ldi	r24, 0x80	; 128
    295c:	85 b9       	out	0x05, r24	; 5
    295e:	f6 cf       	rjmp	.-20     	; 0x294c <txSwitchState+0x12>

00002960 <secondsV>:
#endif

static volatile millis_t milliseconds;

//converts seconds to the corresponding ms
millis_t secondsV(millis_t v){
    2960:	cf 93       	push	r28
    2962:	df 93       	push	r29
    2964:	00 d0       	rcall	.+0      	; 0x2966 <secondsV+0x6>
    2966:	0f 92       	push	r0
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
    millis_t scale=1000;
    return v*1000;
    296c:	a8 ee       	ldi	r26, 0xE8	; 232
    296e:	b3 e0       	ldi	r27, 0x03	; 3
    2970:	9b 01       	movw	r18, r22
    2972:	ac 01       	movw	r20, r24
    2974:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__muluhisi3>
}
    2978:	0f 90       	pop	r0
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	0f 90       	pop	r0
    2980:	df 91       	pop	r29
    2982:	cf 91       	pop	r28
    2984:	08 95       	ret

00002986 <millis_init>:
// Initialise library
void millis_init()
{
	// Timer settings
	SET_TCCRA();
    2986:	82 e0       	ldi	r24, 0x02	; 2
    2988:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	SET_TCCRB();
    298c:	94 e0       	ldi	r25, 0x04	; 4
    298e:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
	REG_TIMSK = _BV(BIT_OCIE);
    2992:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
	REG_OCR = ((F_CPU / PRESCALER) / 1000);
    2996:	8a ef       	ldi	r24, 0xFA	; 250
    2998:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
}
    299c:	08 95       	ret

0000299e <millis_get>:

// Get current milliseconds
millis_t millis_get()
{
    299e:	cf 93       	push	r28
    29a0:	df 93       	push	r29
    29a2:	00 d0       	rcall	.+0      	; 0x29a4 <millis_get+0x6>
    29a4:	0f 92       	push	r0
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62
	millis_t ms;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    29aa:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    29ac:	f8 94       	cli
	{
		ms = milliseconds;
    29ae:	20 91 e3 07 	lds	r18, 0x07E3	; 0x8007e3 <milliseconds>
    29b2:	30 91 e4 07 	lds	r19, 0x07E4	; 0x8007e4 <milliseconds+0x1>
    29b6:	40 91 e5 07 	lds	r20, 0x07E5	; 0x8007e5 <milliseconds+0x2>
    29ba:	50 91 e6 07 	lds	r21, 0x07E6	; 0x8007e6 <milliseconds+0x3>
    29be:	29 83       	std	Y+1, r18	; 0x01
    29c0:	3a 83       	std	Y+2, r19	; 0x02
    29c2:	4b 83       	std	Y+3, r20	; 0x03
    29c4:	5c 83       	std	Y+4, r21	; 0x04
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    29c6:	8f bf       	out	0x3f, r24	; 63
	}
	return ms;
}
    29c8:	69 81       	ldd	r22, Y+1	; 0x01
    29ca:	7a 81       	ldd	r23, Y+2	; 0x02
    29cc:	8b 81       	ldd	r24, Y+3	; 0x03
    29ce:	9c 81       	ldd	r25, Y+4	; 0x04
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	0f 90       	pop	r0
    29d8:	df 91       	pop	r29
    29da:	cf 91       	pop	r28
    29dc:	08 95       	ret

000029de <millis_resume>:

// Turn on timer and resume time keeping
void millis_resume()
{
	pwr_enable();
    29de:	e4 e6       	ldi	r30, 0x64	; 100
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	80 81       	ld	r24, Z
    29e4:	8f 7b       	andi	r24, 0xBF	; 191
    29e6:	80 83       	st	Z, r24
	REG_TIMSK |= _BV(BIT_OCIE);
    29e8:	e0 e7       	ldi	r30, 0x70	; 112
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	82 60       	ori	r24, 0x02	; 2
    29f0:	80 83       	st	Z, r24
}
    29f2:	08 95       	ret

000029f4 <millis_pause>:

// Pause time keeping and turn off timer to save power
void millis_pause()
{
	REG_TIMSK &= ~_BV(BIT_OCIE);
    29f4:	e0 e7       	ldi	r30, 0x70	; 112
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	80 81       	ld	r24, Z
    29fa:	8d 7f       	andi	r24, 0xFD	; 253
    29fc:	80 83       	st	Z, r24
	pwr_disable();
    29fe:	e4 e6       	ldi	r30, 0x64	; 100
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	80 81       	ld	r24, Z
    2a04:	80 64       	ori	r24, 0x40	; 64
    2a06:	80 83       	st	Z, r24
}
    2a08:	08 95       	ret

00002a0a <millis_reset>:

// Reset milliseconds count to 0
void millis_reset()
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2a0a:	8f b7       	in	r24, 0x3f	; 63
    cli();
    2a0c:	f8 94       	cli
	{
		milliseconds = 0;
    2a0e:	10 92 e3 07 	sts	0x07E3, r1	; 0x8007e3 <milliseconds>
    2a12:	10 92 e4 07 	sts	0x07E4, r1	; 0x8007e4 <milliseconds+0x1>
    2a16:	10 92 e5 07 	sts	0x07E5, r1	; 0x8007e5 <milliseconds+0x2>
    2a1a:	10 92 e6 07 	sts	0x07E6, r1	; 0x8007e6 <milliseconds+0x3>
    SREG = *__s;
    2a1e:	8f bf       	out	0x3f, r24	; 63
	}
}
    2a20:	08 95       	ret

00002a22 <millis_add>:

// Add time
void millis_add(millis_t ms)
{
    2a22:	46 2f       	mov	r20, r22
    2a24:	57 2f       	mov	r21, r23
    2a26:	bc 01       	movw	r22, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2a28:	2f b7       	in	r18, 0x3f	; 63
    cli();
    2a2a:	f8 94       	cli
	{
		milliseconds += ms;
    2a2c:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <milliseconds>
    2a30:	90 91 e4 07 	lds	r25, 0x07E4	; 0x8007e4 <milliseconds+0x1>
    2a34:	a0 91 e5 07 	lds	r26, 0x07E5	; 0x8007e5 <milliseconds+0x2>
    2a38:	b0 91 e6 07 	lds	r27, 0x07E6	; 0x8007e6 <milliseconds+0x3>
    2a3c:	84 0f       	add	r24, r20
    2a3e:	95 1f       	adc	r25, r21
    2a40:	a6 1f       	adc	r26, r22
    2a42:	b7 1f       	adc	r27, r23
    2a44:	80 93 e3 07 	sts	0x07E3, r24	; 0x8007e3 <milliseconds>
    2a48:	90 93 e4 07 	sts	0x07E4, r25	; 0x8007e4 <milliseconds+0x1>
    2a4c:	a0 93 e5 07 	sts	0x07E5, r26	; 0x8007e5 <milliseconds+0x2>
    2a50:	b0 93 e6 07 	sts	0x07E6, r27	; 0x8007e6 <milliseconds+0x3>
    SREG = *__s;
    2a54:	2f bf       	out	0x3f, r18	; 63
	}
}
    2a56:	08 95       	ret

00002a58 <millis_subtract>:

// Subtract time
void millis_subtract(millis_t ms)
{
    2a58:	46 2f       	mov	r20, r22
    2a5a:	57 2f       	mov	r21, r23
    2a5c:	bc 01       	movw	r22, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2a5e:	2f b7       	in	r18, 0x3f	; 63
    cli();
    2a60:	f8 94       	cli
	{
		milliseconds -= ms;
    2a62:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <milliseconds>
    2a66:	90 91 e4 07 	lds	r25, 0x07E4	; 0x8007e4 <milliseconds+0x1>
    2a6a:	a0 91 e5 07 	lds	r26, 0x07E5	; 0x8007e5 <milliseconds+0x2>
    2a6e:	b0 91 e6 07 	lds	r27, 0x07E6	; 0x8007e6 <milliseconds+0x3>
    2a72:	84 1b       	sub	r24, r20
    2a74:	95 0b       	sbc	r25, r21
    2a76:	a6 0b       	sbc	r26, r22
    2a78:	b7 0b       	sbc	r27, r23
    2a7a:	80 93 e3 07 	sts	0x07E3, r24	; 0x8007e3 <milliseconds>
    2a7e:	90 93 e4 07 	sts	0x07E4, r25	; 0x8007e4 <milliseconds+0x1>
    2a82:	a0 93 e5 07 	sts	0x07E5, r26	; 0x8007e5 <milliseconds+0x2>
    2a86:	b0 93 e6 07 	sts	0x07E6, r27	; 0x8007e6 <milliseconds+0x3>
    SREG = *__s;
    2a8a:	2f bf       	out	0x3f, r18	; 63
	}
}
    2a8c:	08 95       	ret

00002a8e <__vector_13>:

ISR(ISR_VECT)
{
    2a8e:	1f 92       	push	r1
    2a90:	1f b6       	in	r1, 0x3f	; 63
    2a92:	1f 92       	push	r1
    2a94:	11 24       	eor	r1, r1
    2a96:	8f 93       	push	r24
    2a98:	9f 93       	push	r25
    2a9a:	af 93       	push	r26
    2a9c:	bf 93       	push	r27
	++milliseconds;
    2a9e:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <milliseconds>
    2aa2:	90 91 e4 07 	lds	r25, 0x07E4	; 0x8007e4 <milliseconds+0x1>
    2aa6:	a0 91 e5 07 	lds	r26, 0x07E5	; 0x8007e5 <milliseconds+0x2>
    2aaa:	b0 91 e6 07 	lds	r27, 0x07E6	; 0x8007e6 <milliseconds+0x3>
    2aae:	01 96       	adiw	r24, 0x01	; 1
    2ab0:	a1 1d       	adc	r26, r1
    2ab2:	b1 1d       	adc	r27, r1
    2ab4:	80 93 e3 07 	sts	0x07E3, r24	; 0x8007e3 <milliseconds>
    2ab8:	90 93 e4 07 	sts	0x07E4, r25	; 0x8007e4 <milliseconds+0x1>
    2abc:	a0 93 e5 07 	sts	0x07E5, r26	; 0x8007e5 <milliseconds+0x2>
    2ac0:	b0 93 e6 07 	sts	0x07E6, r27	; 0x8007e6 <milliseconds+0x3>
}
    2ac4:	bf 91       	pop	r27
    2ac6:	af 91       	pop	r26
    2ac8:	9f 91       	pop	r25
    2aca:	8f 91       	pop	r24
    2acc:	1f 90       	pop	r1
    2ace:	1f be       	out	0x3f, r1	; 63
    2ad0:	1f 90       	pop	r1
    2ad2:	18 95       	reti

00002ad4 <writeDataToEEPROM>:
#include "EEPROMHandle.h"

uint8_t writeDataToEEPROM(uint8_t ByteOfData)
{
    2ad4:	68 2f       	mov	r22, r24
    eeprom_update_byte((uint8_t *)64, ByteOfData);
    2ad6:	80 e4       	ldi	r24, 0x40	; 64
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	0e 94 ce 19 	call	0x339c	; 0x339c <eeprom_update_byte>
}
    2ade:	08 95       	ret

00002ae0 <readDataFromEEPROM>:

uint8_t readDataFromEEPROM()
{
    uint8_t value;
    value = eeprom_read_byte((const uint8_t *)64);
    2ae0:	80 e4       	ldi	r24, 0x40	; 64
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	0c 94 c6 19 	jmp	0x338c	; 0x338c <eeprom_read_byte>

00002ae8 <saveVendState>:
#include "vendSessionStates.h"

volatile uint8_t vendStateT = 0;

void saveVendState(uint8_t state)
{
    2ae8:	cf 93       	push	r28
    2aea:	c8 2f       	mov	r28, r24

    if (state == VEND_SUCCESS_FLAG)
    {
        writeDataToEEPROM(VEND_SUCCESS_FLAG);
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    if (state == VEND_SUCCESS_FLAG)
    2aee:	c1 30       	cpi	r28, 0x01	; 1
    2af0:	19 f0       	breq	.+6      	; 0x2af8 <saveVendState+0x10>
        vendStateT = 1;
    }
    else if (state == VEND_FAILURE_FLAG)
    2af2:	c2 30       	cpi	r28, 0x02	; 2
    2af4:	39 f4       	brne	.+14     	; 0x2b04 <saveVendState+0x1c>
    {
        writeDataToEEPROM(VEND_FAILURE_FLAG);
    2af6:	82 e0       	ldi	r24, 0x02	; 2
    2af8:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <writeDataToEEPROM>
        vendStateT = 2;
    2afc:	c0 93 e7 07 	sts	0x07E7, r28	; 0x8007e7 <vendStateT>
    else if (state == VEND_DEFAULT)
    {
        writeDataToEEPROM(VEND_DEFAULT);
        vendStateT = 0;
    }
}
    2b00:	cf 91       	pop	r28
    2b02:	08 95       	ret
    else if (state == VEND_DEFAULT)
    2b04:	c1 11       	cpse	r28, r1
    2b06:	fc cf       	rjmp	.-8      	; 0x2b00 <saveVendState+0x18>
        writeDataToEEPROM(VEND_DEFAULT);
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <writeDataToEEPROM>
        vendStateT = 0;
    2b0e:	10 92 e7 07 	sts	0x07E7, r1	; 0x8007e7 <vendStateT>
}
    2b12:	f6 cf       	rjmp	.-20     	; 0x2b00 <saveVendState+0x18>

00002b14 <getLastVendState>:
uint8_t getLastVendState()
{
    //return vendStateT;
    return readDataFromEEPROM();
    2b14:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <readDataFromEEPROM>

00002b18 <clearLastVendState>:
}
void clearLastVendState()
{
    writeDataToEEPROM(VEND_DEFAULT);
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <writeDataToEEPROM>
    vendStateT = 0;
    2b1e:	10 92 e7 07 	sts	0x07E7, r1	; 0x8007e7 <vendStateT>
}
    2b22:	08 95       	ret

00002b24 <statesCheckStartup>:

void statesCheckStartup()
{
    //writeDataToEEPROM();

    vendStateT = 0; //getLastVendState();
    2b24:	10 92 e7 07 	sts	0x07E7, r1	; 0x8007e7 <vendStateT>

    if (vendStateT == 0)
    2b28:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <vendStateT>
    {
        send_str_p(0, PSTR("LAST state was 0\r\n"));
    2b2c:	61 e7       	ldi	r22, 0x71	; 113
    2b2e:	7a e0       	ldi	r23, 0x0A	; 10
    if (vendStateT == 0)
    2b30:	88 23       	and	r24, r24
    2b32:	69 f0       	breq	.+26     	; 0x2b4e <statesCheckStartup+0x2a>
    }
    else if (vendStateT == 1)
    2b34:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <vendStateT>
    {

        send_str_p(UPLINK_USART, PSTR("VEND SESSION COMPLETE\r\n"));
    2b38:	69 e5       	ldi	r22, 0x59	; 89
    2b3a:	7a e0       	ldi	r23, 0x0A	; 10
    else if (vendStateT == 1)
    2b3c:	81 30       	cpi	r24, 0x01	; 1
    2b3e:	31 f0       	breq	.+12     	; 0x2b4c <statesCheckStartup+0x28>
    }
    else if (vendStateT == 2)
    2b40:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <vendStateT>
    2b44:	82 30       	cpi	r24, 0x02	; 2
    2b46:	29 f4       	brne	.+10     	; 0x2b52 <statesCheckStartup+0x2e>
    {

        send_str_p(0, PSTR("LAST state was Failed\r\n"));
    2b48:	61 e4       	ldi	r22, 0x41	; 65
    2b4a:	7a e0       	ldi	r23, 0x0A	; 10
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	0c 94 29 07 	jmp	0xe52	; 0xe52 <send_str_p>
    }
    2b52:	08 95       	ret

00002b54 <main>:
int main(void)
{

    // millis_init();

    setup_usart(0, 38400, 8, 'N', 1);
    2b54:	ee 24       	eor	r14, r14
    2b56:	e3 94       	inc	r14
    2b58:	0e e4       	ldi	r16, 0x4E	; 78
    2b5a:	28 e0       	ldi	r18, 0x08	; 8
    2b5c:	40 e0       	ldi	r20, 0x00	; 0
    2b5e:	56 e9       	ldi	r21, 0x96	; 150
    2b60:	60 e0       	ldi	r22, 0x00	; 0
    2b62:	70 e0       	ldi	r23, 0x00	; 0
    2b64:	80 e0       	ldi	r24, 0x00	; 0
    2b66:	0e 94 65 05 	call	0xaca	; 0xaca <setup_usart>
    setup_usart(1, 9600, 9, 'N', 1); //orignal 9600
    2b6a:	29 e0       	ldi	r18, 0x09	; 9
    2b6c:	40 e8       	ldi	r20, 0x80	; 128
    2b6e:	55 e2       	ldi	r21, 0x25	; 37
    2b70:	60 e0       	ldi	r22, 0x00	; 0
    2b72:	70 e0       	ldi	r23, 0x00	; 0
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	0e 94 65 05 	call	0xaca	; 0xaca <setup_usart>
    setup_usart(2, 9600, 8, 'N', 1);
    2b7a:	28 e0       	ldi	r18, 0x08	; 8
    2b7c:	40 e8       	ldi	r20, 0x80	; 128
    2b7e:	55 e2       	ldi	r21, 0x25	; 37
    2b80:	60 e0       	ldi	r22, 0x00	; 0
    2b82:	70 e0       	ldi	r23, 0x00	; 0
    2b84:	82 e0       	ldi	r24, 0x02	; 2
    2b86:	0e 94 65 05 	call	0xaca	; 0xaca <setup_usart>

    millis_init();
    2b8a:	0e 94 c3 14 	call	0x2986	; 0x2986 <millis_init>
    setupTxSwitch(PIN12);
    2b8e:	8c e0       	ldi	r24, 0x0C	; 12
    2b90:	0e 94 93 14 	call	0x2926	; 0x2926 <setupTxSwitch>
    setupTxSwitch(PIN13);
    2b94:	8d e0       	ldi	r24, 0x0D	; 13
    2b96:	0e 94 93 14 	call	0x2926	; 0x2926 <setupTxSwitch>

    txSwitchState(PIN13, 0); //was 1 initially
    2b9a:	60 e0       	ldi	r22, 0x00	; 0
    2b9c:	8d e0       	ldi	r24, 0x0D	; 13
    2b9e:	0e 94 9d 14 	call	0x293a	; 0x293a <txSwitchState>
    txSwitchState(PIN12, 1);
    2ba2:	61 e0       	ldi	r22, 0x01	; 1
    2ba4:	8c e0       	ldi	r24, 0x0C	; 12
    2ba6:	0e 94 9d 14 	call	0x293a	; 0x293a <txSwitchState>

#if waitForSec == 1

#endif
    //_delay_ms(5000);
    sei();
    2baa:	78 94       	sei

#if simulation == 1

#endif

    send_str_p(0, PSTR("MDB Arduino Mega is Setting Up\r\n"));
    2bac:	6c e5       	ldi	r22, 0x5C	; 92
    2bae:	71 e0       	ldi	r23, 0x01	; 1
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>

    while (1)
    {

        mdb_cmd_handler();
    2bb6:	0e 94 b7 10 	call	0x216e	; 0x216e <mdb_cmd_handler>
        uplink_cmd_handler();
    2bba:	0e 94 c2 13 	call	0x2784	; 0x2784 <uplink_cmd_handler>

#if millisTimer == 1
        if (getTimerState())
    2bbe:	0e 94 24 14 	call	0x2848	; 0x2848 <getTimerState>
    2bc2:	88 23       	and	r24, r24
    2bc4:	c1 f3       	breq	.-16     	; 0x2bb6 <main+0x62>
        {
            static millis_t lastChanged = 0;
            static millis_t lastChanged2 = 0;
            millis_t now = millis_get();
    2bc6:	0e 94 cf 14 	call	0x299e	; 0x299e <millis_get>
    2bca:	6b 01       	movw	r12, r22
    2bcc:	7c 01       	movw	r14, r24

            //if(kVal>=0 && kVal<=50){
            if (now - lastChanged >= 1000)
    2bce:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <lastChanged.1>
    2bd2:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <lastChanged.1+0x1>
    2bd6:	a0 91 93 07 	lds	r26, 0x0793	; 0x800793 <lastChanged.1+0x2>
    2bda:	b0 91 94 07 	lds	r27, 0x0794	; 0x800794 <lastChanged.1+0x3>
    2bde:	a7 01       	movw	r20, r14
    2be0:	96 01       	movw	r18, r12
    2be2:	28 1b       	sub	r18, r24
    2be4:	39 0b       	sbc	r19, r25
    2be6:	4a 0b       	sbc	r20, r26
    2be8:	5b 0b       	sbc	r21, r27
    2bea:	da 01       	movw	r26, r20
    2bec:	c9 01       	movw	r24, r18
    2bee:	88 3e       	cpi	r24, 0xE8	; 232
    2bf0:	93 40       	sbci	r25, 0x03	; 3
    2bf2:	a1 05       	cpc	r26, r1
    2bf4:	b1 05       	cpc	r27, r1
    2bf6:	f8 f2       	brcs	.-66     	; 0x2bb6 <main+0x62>
            {

                send_str_p(0, PSTR("5s Passed\r\n"));
    2bf8:	60 e5       	ldi	r22, 0x50	; 80
    2bfa:	71 e0       	ldi	r23, 0x01	; 1
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	0e 94 29 07 	call	0xe52	; 0xe52 <send_str_p>
                //incrementTimerPass();
                timeHandler(getTimerPass());
    2c02:	0e 94 2d 14 	call	0x285a	; 0x285a <getTimerPass>
    2c06:	0e 94 37 14 	call	0x286e	; 0x286e <timeHandler>

                lastChanged = now;
    2c0a:	c0 92 91 07 	sts	0x0791, r12	; 0x800791 <lastChanged.1>
    2c0e:	d0 92 92 07 	sts	0x0792, r13	; 0x800792 <lastChanged.1+0x1>
    2c12:	e0 92 93 07 	sts	0x0793, r14	; 0x800793 <lastChanged.1+0x2>
    2c16:	f0 92 94 07 	sts	0x0794, r15	; 0x800794 <lastChanged.1+0x3>
    2c1a:	cd cf       	rjmp	.-102    	; 0x2bb6 <main+0x62>

00002c1c <__divmodhi4>:
    2c1c:	97 fb       	bst	r25, 7
    2c1e:	07 2e       	mov	r0, r23
    2c20:	16 f4       	brtc	.+4      	; 0x2c26 <__divmodhi4+0xa>
    2c22:	00 94       	com	r0
    2c24:	07 d0       	rcall	.+14     	; 0x2c34 <__divmodhi4_neg1>
    2c26:	77 fd       	sbrc	r23, 7
    2c28:	09 d0       	rcall	.+18     	; 0x2c3c <__divmodhi4_neg2>
    2c2a:	0e 94 57 16 	call	0x2cae	; 0x2cae <__udivmodhi4>
    2c2e:	07 fc       	sbrc	r0, 7
    2c30:	05 d0       	rcall	.+10     	; 0x2c3c <__divmodhi4_neg2>
    2c32:	3e f4       	brtc	.+14     	; 0x2c42 <__divmodhi4_exit>

00002c34 <__divmodhi4_neg1>:
    2c34:	90 95       	com	r25
    2c36:	81 95       	neg	r24
    2c38:	9f 4f       	sbci	r25, 0xFF	; 255
    2c3a:	08 95       	ret

00002c3c <__divmodhi4_neg2>:
    2c3c:	70 95       	com	r23
    2c3e:	61 95       	neg	r22
    2c40:	7f 4f       	sbci	r23, 0xFF	; 255

00002c42 <__divmodhi4_exit>:
    2c42:	08 95       	ret

00002c44 <__udivmodsi4>:
    2c44:	a1 e2       	ldi	r26, 0x21	; 33
    2c46:	1a 2e       	mov	r1, r26
    2c48:	aa 1b       	sub	r26, r26
    2c4a:	bb 1b       	sub	r27, r27
    2c4c:	fd 01       	movw	r30, r26
    2c4e:	0d c0       	rjmp	.+26     	; 0x2c6a <__udivmodsi4_ep>

00002c50 <__udivmodsi4_loop>:
    2c50:	aa 1f       	adc	r26, r26
    2c52:	bb 1f       	adc	r27, r27
    2c54:	ee 1f       	adc	r30, r30
    2c56:	ff 1f       	adc	r31, r31
    2c58:	a2 17       	cp	r26, r18
    2c5a:	b3 07       	cpc	r27, r19
    2c5c:	e4 07       	cpc	r30, r20
    2c5e:	f5 07       	cpc	r31, r21
    2c60:	20 f0       	brcs	.+8      	; 0x2c6a <__udivmodsi4_ep>
    2c62:	a2 1b       	sub	r26, r18
    2c64:	b3 0b       	sbc	r27, r19
    2c66:	e4 0b       	sbc	r30, r20
    2c68:	f5 0b       	sbc	r31, r21

00002c6a <__udivmodsi4_ep>:
    2c6a:	66 1f       	adc	r22, r22
    2c6c:	77 1f       	adc	r23, r23
    2c6e:	88 1f       	adc	r24, r24
    2c70:	99 1f       	adc	r25, r25
    2c72:	1a 94       	dec	r1
    2c74:	69 f7       	brne	.-38     	; 0x2c50 <__udivmodsi4_loop>
    2c76:	60 95       	com	r22
    2c78:	70 95       	com	r23
    2c7a:	80 95       	com	r24
    2c7c:	90 95       	com	r25
    2c7e:	9b 01       	movw	r18, r22
    2c80:	ac 01       	movw	r20, r24
    2c82:	bd 01       	movw	r22, r26
    2c84:	cf 01       	movw	r24, r30
    2c86:	08 95       	ret

00002c88 <__tablejump2__>:
    2c88:	ee 0f       	add	r30, r30
    2c8a:	ff 1f       	adc	r31, r31
    2c8c:	88 1f       	adc	r24, r24
    2c8e:	8b bf       	out	0x3b, r24	; 59
    2c90:	07 90       	elpm	r0, Z+
    2c92:	f6 91       	elpm	r31, Z
    2c94:	e0 2d       	mov	r30, r0
    2c96:	19 94       	eijmp

00002c98 <__muluhisi3>:
    2c98:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__umulhisi3>
    2c9c:	a5 9f       	mul	r26, r21
    2c9e:	90 0d       	add	r25, r0
    2ca0:	b4 9f       	mul	r27, r20
    2ca2:	90 0d       	add	r25, r0
    2ca4:	a4 9f       	mul	r26, r20
    2ca6:	80 0d       	add	r24, r0
    2ca8:	91 1d       	adc	r25, r1
    2caa:	11 24       	eor	r1, r1
    2cac:	08 95       	ret

00002cae <__udivmodhi4>:
    2cae:	aa 1b       	sub	r26, r26
    2cb0:	bb 1b       	sub	r27, r27
    2cb2:	51 e1       	ldi	r21, 0x11	; 17
    2cb4:	07 c0       	rjmp	.+14     	; 0x2cc4 <__udivmodhi4_ep>

00002cb6 <__udivmodhi4_loop>:
    2cb6:	aa 1f       	adc	r26, r26
    2cb8:	bb 1f       	adc	r27, r27
    2cba:	a6 17       	cp	r26, r22
    2cbc:	b7 07       	cpc	r27, r23
    2cbe:	10 f0       	brcs	.+4      	; 0x2cc4 <__udivmodhi4_ep>
    2cc0:	a6 1b       	sub	r26, r22
    2cc2:	b7 0b       	sbc	r27, r23

00002cc4 <__udivmodhi4_ep>:
    2cc4:	88 1f       	adc	r24, r24
    2cc6:	99 1f       	adc	r25, r25
    2cc8:	5a 95       	dec	r21
    2cca:	a9 f7       	brne	.-22     	; 0x2cb6 <__udivmodhi4_loop>
    2ccc:	80 95       	com	r24
    2cce:	90 95       	com	r25
    2cd0:	bc 01       	movw	r22, r24
    2cd2:	cd 01       	movw	r24, r26
    2cd4:	08 95       	ret

00002cd6 <__umulhisi3>:
    2cd6:	a2 9f       	mul	r26, r18
    2cd8:	b0 01       	movw	r22, r0
    2cda:	b3 9f       	mul	r27, r19
    2cdc:	c0 01       	movw	r24, r0
    2cde:	a3 9f       	mul	r26, r19
    2ce0:	70 0d       	add	r23, r0
    2ce2:	81 1d       	adc	r24, r1
    2ce4:	11 24       	eor	r1, r1
    2ce6:	91 1d       	adc	r25, r1
    2ce8:	b2 9f       	mul	r27, r18
    2cea:	70 0d       	add	r23, r0
    2cec:	81 1d       	adc	r24, r1
    2cee:	11 24       	eor	r1, r1
    2cf0:	91 1d       	adc	r25, r1
    2cf2:	08 95       	ret

00002cf4 <atoi>:
    2cf4:	fc 01       	movw	r30, r24
    2cf6:	88 27       	eor	r24, r24
    2cf8:	99 27       	eor	r25, r25
    2cfa:	e8 94       	clt
    2cfc:	21 91       	ld	r18, Z+
    2cfe:	20 32       	cpi	r18, 0x20	; 32
    2d00:	e9 f3       	breq	.-6      	; 0x2cfc <atoi+0x8>
    2d02:	29 30       	cpi	r18, 0x09	; 9
    2d04:	10 f0       	brcs	.+4      	; 0x2d0a <atoi+0x16>
    2d06:	2e 30       	cpi	r18, 0x0E	; 14
    2d08:	c8 f3       	brcs	.-14     	; 0x2cfc <atoi+0x8>
    2d0a:	2b 32       	cpi	r18, 0x2B	; 43
    2d0c:	41 f0       	breq	.+16     	; 0x2d1e <atoi+0x2a>
    2d0e:	2d 32       	cpi	r18, 0x2D	; 45
    2d10:	39 f4       	brne	.+14     	; 0x2d20 <atoi+0x2c>
    2d12:	68 94       	set
    2d14:	04 c0       	rjmp	.+8      	; 0x2d1e <atoi+0x2a>
    2d16:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__mulhi_const_10>
    2d1a:	82 0f       	add	r24, r18
    2d1c:	91 1d       	adc	r25, r1
    2d1e:	21 91       	ld	r18, Z+
    2d20:	20 53       	subi	r18, 0x30	; 48
    2d22:	2a 30       	cpi	r18, 0x0A	; 10
    2d24:	c0 f3       	brcs	.-16     	; 0x2d16 <atoi+0x22>
    2d26:	1e f4       	brtc	.+6      	; 0x2d2e <atoi+0x3a>
    2d28:	90 95       	com	r25
    2d2a:	81 95       	neg	r24
    2d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d2e:	08 95       	ret

00002d30 <strtok>:
    2d30:	48 ee       	ldi	r20, 0xE8	; 232
    2d32:	57 e0       	ldi	r21, 0x07	; 7
    2d34:	0c 94 c7 16 	jmp	0x2d8e	; 0x2d8e <strtok_r>

00002d38 <strcasecmp>:
    2d38:	fb 01       	movw	r30, r22
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	8d 91       	ld	r24, X+
    2d3e:	81 34       	cpi	r24, 0x41	; 65
    2d40:	1c f0       	brlt	.+6      	; 0x2d48 <strcasecmp+0x10>
    2d42:	8b 35       	cpi	r24, 0x5B	; 91
    2d44:	0c f4       	brge	.+2      	; 0x2d48 <strcasecmp+0x10>
    2d46:	80 5e       	subi	r24, 0xE0	; 224
    2d48:	61 91       	ld	r22, Z+
    2d4a:	61 34       	cpi	r22, 0x41	; 65
    2d4c:	1c f0       	brlt	.+6      	; 0x2d54 <strcasecmp+0x1c>
    2d4e:	6b 35       	cpi	r22, 0x5B	; 91
    2d50:	0c f4       	brge	.+2      	; 0x2d54 <strcasecmp+0x1c>
    2d52:	60 5e       	subi	r22, 0xE0	; 224
    2d54:	86 1b       	sub	r24, r22
    2d56:	61 11       	cpse	r22, r1
    2d58:	89 f3       	breq	.-30     	; 0x2d3c <strcasecmp+0x4>
    2d5a:	99 0b       	sbc	r25, r25
    2d5c:	08 95       	ret

00002d5e <strsep>:
    2d5e:	fc 01       	movw	r30, r24
    2d60:	a0 81       	ld	r26, Z
    2d62:	b1 81       	ldd	r27, Z+1	; 0x01
    2d64:	ad 01       	movw	r20, r26
    2d66:	10 96       	adiw	r26, 0x00	; 0
    2d68:	81 f0       	breq	.+32     	; 0x2d8a <strsep+0x2c>
    2d6a:	3d 91       	ld	r19, X+
    2d6c:	fb 01       	movw	r30, r22
    2d6e:	01 90       	ld	r0, Z+
    2d70:	03 16       	cp	r0, r19
    2d72:	01 10       	cpse	r0, r1
    2d74:	e1 f7       	brne	.-8      	; 0x2d6e <strsep+0x10>
    2d76:	c9 f7       	brne	.-14     	; 0x2d6a <strsep+0xc>
    2d78:	00 20       	and	r0, r0
    2d7a:	11 f4       	brne	.+4      	; 0x2d80 <strsep+0x22>
    2d7c:	d0 01       	movw	r26, r0
    2d7e:	02 c0       	rjmp	.+4      	; 0x2d84 <strsep+0x26>
    2d80:	1e 92       	st	-X, r1
    2d82:	11 96       	adiw	r26, 0x01	; 1
    2d84:	fc 01       	movw	r30, r24
    2d86:	a0 83       	st	Z, r26
    2d88:	b1 83       	std	Z+1, r27	; 0x01
    2d8a:	ca 01       	movw	r24, r20
    2d8c:	08 95       	ret

00002d8e <strtok_r>:
    2d8e:	fa 01       	movw	r30, r20
    2d90:	a1 91       	ld	r26, Z+
    2d92:	b0 81       	ld	r27, Z
    2d94:	00 97       	sbiw	r24, 0x00	; 0
    2d96:	19 f4       	brne	.+6      	; 0x2d9e <strtok_r+0x10>
    2d98:	10 97       	sbiw	r26, 0x00	; 0
    2d9a:	e1 f0       	breq	.+56     	; 0x2dd4 <strtok_r+0x46>
    2d9c:	cd 01       	movw	r24, r26
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cd 01       	movw	r24, r26
    2da2:	0d 90       	ld	r0, X+
    2da4:	00 20       	and	r0, r0
    2da6:	11 f4       	brne	.+4      	; 0x2dac <strtok_r+0x1e>
    2da8:	c0 01       	movw	r24, r0
    2daa:	13 c0       	rjmp	.+38     	; 0x2dd2 <strtok_r+0x44>
    2dac:	fb 01       	movw	r30, r22
    2dae:	21 91       	ld	r18, Z+
    2db0:	22 23       	and	r18, r18
    2db2:	19 f0       	breq	.+6      	; 0x2dba <strtok_r+0x2c>
    2db4:	20 15       	cp	r18, r0
    2db6:	d9 f7       	brne	.-10     	; 0x2dae <strtok_r+0x20>
    2db8:	f3 cf       	rjmp	.-26     	; 0x2da0 <strtok_r+0x12>
    2dba:	fb 01       	movw	r30, r22
    2dbc:	21 91       	ld	r18, Z+
    2dbe:	20 15       	cp	r18, r0
    2dc0:	19 f4       	brne	.+6      	; 0x2dc8 <strtok_r+0x3a>
    2dc2:	1e 92       	st	-X, r1
    2dc4:	11 96       	adiw	r26, 0x01	; 1
    2dc6:	06 c0       	rjmp	.+12     	; 0x2dd4 <strtok_r+0x46>
    2dc8:	22 23       	and	r18, r18
    2dca:	c1 f7       	brne	.-16     	; 0x2dbc <strtok_r+0x2e>
    2dcc:	0d 90       	ld	r0, X+
    2dce:	00 20       	and	r0, r0
    2dd0:	a1 f7       	brne	.-24     	; 0x2dba <strtok_r+0x2c>
    2dd2:	d0 01       	movw	r26, r0
    2dd4:	fa 01       	movw	r30, r20
    2dd6:	a1 93       	st	Z+, r26
    2dd8:	b0 83       	st	Z, r27
    2dda:	08 95       	ret

00002ddc <__mulhi_const_10>:
    2ddc:	7a e0       	ldi	r23, 0x0A	; 10
    2dde:	97 9f       	mul	r25, r23
    2de0:	90 2d       	mov	r25, r0
    2de2:	87 9f       	mul	r24, r23
    2de4:	80 2d       	mov	r24, r0
    2de6:	91 0d       	add	r25, r1
    2de8:	11 24       	eor	r1, r1
    2dea:	08 95       	ret

00002dec <sprintf>:
    2dec:	0f 93       	push	r16
    2dee:	1f 93       	push	r17
    2df0:	cf 93       	push	r28
    2df2:	df 93       	push	r29
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    2df8:	2e 97       	sbiw	r28, 0x0e	; 14
    2dfa:	0f b6       	in	r0, 0x3f	; 63
    2dfc:	f8 94       	cli
    2dfe:	de bf       	out	0x3e, r29	; 62
    2e00:	0f be       	out	0x3f, r0	; 63
    2e02:	cd bf       	out	0x3d, r28	; 61
    2e04:	0e 89       	ldd	r16, Y+22	; 0x16
    2e06:	1f 89       	ldd	r17, Y+23	; 0x17
    2e08:	86 e0       	ldi	r24, 0x06	; 6
    2e0a:	8c 83       	std	Y+4, r24	; 0x04
    2e0c:	1a 83       	std	Y+2, r17	; 0x02
    2e0e:	09 83       	std	Y+1, r16	; 0x01
    2e10:	8f ef       	ldi	r24, 0xFF	; 255
    2e12:	9f e7       	ldi	r25, 0x7F	; 127
    2e14:	9e 83       	std	Y+6, r25	; 0x06
    2e16:	8d 83       	std	Y+5, r24	; 0x05
    2e18:	ae 01       	movw	r20, r28
    2e1a:	46 5e       	subi	r20, 0xE6	; 230
    2e1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2e1e:	68 8d       	ldd	r22, Y+24	; 0x18
    2e20:	79 8d       	ldd	r23, Y+25	; 0x19
    2e22:	ce 01       	movw	r24, r28
    2e24:	01 96       	adiw	r24, 0x01	; 1
    2e26:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <vfprintf>
    2e2a:	2f 81       	ldd	r18, Y+7	; 0x07
    2e2c:	38 85       	ldd	r19, Y+8	; 0x08
    2e2e:	02 0f       	add	r16, r18
    2e30:	13 1f       	adc	r17, r19
    2e32:	f8 01       	movw	r30, r16
    2e34:	10 82       	st	Z, r1
    2e36:	2e 96       	adiw	r28, 0x0e	; 14
    2e38:	0f b6       	in	r0, 0x3f	; 63
    2e3a:	f8 94       	cli
    2e3c:	de bf       	out	0x3e, r29	; 62
    2e3e:	0f be       	out	0x3f, r0	; 63
    2e40:	cd bf       	out	0x3d, r28	; 61
    2e42:	df 91       	pop	r29
    2e44:	cf 91       	pop	r28
    2e46:	1f 91       	pop	r17
    2e48:	0f 91       	pop	r16
    2e4a:	08 95       	ret

00002e4c <vfprintf>:
    2e4c:	2f 92       	push	r2
    2e4e:	3f 92       	push	r3
    2e50:	4f 92       	push	r4
    2e52:	5f 92       	push	r5
    2e54:	6f 92       	push	r6
    2e56:	7f 92       	push	r7
    2e58:	8f 92       	push	r8
    2e5a:	9f 92       	push	r9
    2e5c:	af 92       	push	r10
    2e5e:	bf 92       	push	r11
    2e60:	cf 92       	push	r12
    2e62:	df 92       	push	r13
    2e64:	ef 92       	push	r14
    2e66:	ff 92       	push	r15
    2e68:	0f 93       	push	r16
    2e6a:	1f 93       	push	r17
    2e6c:	cf 93       	push	r28
    2e6e:	df 93       	push	r29
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
    2e74:	2f 97       	sbiw	r28, 0x0f	; 15
    2e76:	0f b6       	in	r0, 0x3f	; 63
    2e78:	f8 94       	cli
    2e7a:	de bf       	out	0x3e, r29	; 62
    2e7c:	0f be       	out	0x3f, r0	; 63
    2e7e:	cd bf       	out	0x3d, r28	; 61
    2e80:	7c 01       	movw	r14, r24
    2e82:	3b 01       	movw	r6, r22
    2e84:	8a 01       	movw	r16, r20
    2e86:	dc 01       	movw	r26, r24
    2e88:	17 96       	adiw	r26, 0x07	; 7
    2e8a:	1c 92       	st	X, r1
    2e8c:	1e 92       	st	-X, r1
    2e8e:	16 97       	sbiw	r26, 0x06	; 6
    2e90:	13 96       	adiw	r26, 0x03	; 3
    2e92:	8c 91       	ld	r24, X
    2e94:	81 ff       	sbrs	r24, 1
    2e96:	d3 c1       	rjmp	.+934    	; 0x323e <vfprintf+0x3f2>
    2e98:	9a e0       	ldi	r25, 0x0A	; 10
    2e9a:	29 2e       	mov	r2, r25
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	31 96       	adiw	r30, 0x01	; 1
    2ea0:	4f 01       	movw	r8, r30
    2ea2:	d7 01       	movw	r26, r14
    2ea4:	13 96       	adiw	r26, 0x03	; 3
    2ea6:	9c 91       	ld	r25, X
    2ea8:	f3 01       	movw	r30, r6
    2eaa:	93 fd       	sbrc	r25, 3
    2eac:	85 91       	lpm	r24, Z+
    2eae:	93 ff       	sbrs	r25, 3
    2eb0:	81 91       	ld	r24, Z+
    2eb2:	3f 01       	movw	r6, r30
    2eb4:	88 23       	and	r24, r24
    2eb6:	09 f4       	brne	.+2      	; 0x2eba <vfprintf+0x6e>
    2eb8:	44 c1       	rjmp	.+648    	; 0x3142 <vfprintf+0x2f6>
    2eba:	85 32       	cpi	r24, 0x25	; 37
    2ebc:	39 f4       	brne	.+14     	; 0x2ecc <vfprintf+0x80>
    2ebe:	93 fd       	sbrc	r25, 3
    2ec0:	85 91       	lpm	r24, Z+
    2ec2:	93 ff       	sbrs	r25, 3
    2ec4:	81 91       	ld	r24, Z+
    2ec6:	3f 01       	movw	r6, r30
    2ec8:	85 32       	cpi	r24, 0x25	; 37
    2eca:	29 f4       	brne	.+10     	; 0x2ed6 <vfprintf+0x8a>
    2ecc:	b7 01       	movw	r22, r14
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	0e 94 38 19 	call	0x3270	; 0x3270 <fputc>
    2ed4:	e6 cf       	rjmp	.-52     	; 0x2ea2 <vfprintf+0x56>
    2ed6:	b1 2c       	mov	r11, r1
    2ed8:	41 2c       	mov	r4, r1
    2eda:	51 2c       	mov	r5, r1
    2edc:	bf e1       	ldi	r27, 0x1F	; 31
    2ede:	b5 15       	cp	r27, r5
    2ee0:	38 f0       	brcs	.+14     	; 0x2ef0 <vfprintf+0xa4>
    2ee2:	8b 32       	cpi	r24, 0x2B	; 43
    2ee4:	09 f1       	breq	.+66     	; 0x2f28 <vfprintf+0xdc>
    2ee6:	88 f4       	brcc	.+34     	; 0x2f0a <vfprintf+0xbe>
    2ee8:	80 32       	cpi	r24, 0x20	; 32
    2eea:	01 f1       	breq	.+64     	; 0x2f2c <vfprintf+0xe0>
    2eec:	83 32       	cpi	r24, 0x23	; 35
    2eee:	21 f1       	breq	.+72     	; 0x2f38 <vfprintf+0xec>
    2ef0:	57 fc       	sbrc	r5, 7
    2ef2:	3a c0       	rjmp	.+116    	; 0x2f68 <vfprintf+0x11c>
    2ef4:	20 ed       	ldi	r18, 0xD0	; 208
    2ef6:	28 0f       	add	r18, r24
    2ef8:	2a 30       	cpi	r18, 0x0A	; 10
    2efa:	40 f5       	brcc	.+80     	; 0x2f4c <vfprintf+0x100>
    2efc:	56 fe       	sbrs	r5, 6
    2efe:	1f c0       	rjmp	.+62     	; 0x2f3e <vfprintf+0xf2>
    2f00:	b2 9c       	mul	r11, r2
    2f02:	20 0d       	add	r18, r0
    2f04:	11 24       	eor	r1, r1
    2f06:	b2 2e       	mov	r11, r18
    2f08:	06 c0       	rjmp	.+12     	; 0x2f16 <vfprintf+0xca>
    2f0a:	8d 32       	cpi	r24, 0x2D	; 45
    2f0c:	91 f0       	breq	.+36     	; 0x2f32 <vfprintf+0xe6>
    2f0e:	80 33       	cpi	r24, 0x30	; 48
    2f10:	79 f7       	brne	.-34     	; 0x2ef0 <vfprintf+0xa4>
    2f12:	68 94       	set
    2f14:	50 f8       	bld	r5, 0
    2f16:	f3 01       	movw	r30, r6
    2f18:	93 fd       	sbrc	r25, 3
    2f1a:	85 91       	lpm	r24, Z+
    2f1c:	93 ff       	sbrs	r25, 3
    2f1e:	81 91       	ld	r24, Z+
    2f20:	3f 01       	movw	r6, r30
    2f22:	81 11       	cpse	r24, r1
    2f24:	db cf       	rjmp	.-74     	; 0x2edc <vfprintf+0x90>
    2f26:	20 c0       	rjmp	.+64     	; 0x2f68 <vfprintf+0x11c>
    2f28:	68 94       	set
    2f2a:	51 f8       	bld	r5, 1
    2f2c:	68 94       	set
    2f2e:	52 f8       	bld	r5, 2
    2f30:	f2 cf       	rjmp	.-28     	; 0x2f16 <vfprintf+0xca>
    2f32:	68 94       	set
    2f34:	53 f8       	bld	r5, 3
    2f36:	ef cf       	rjmp	.-34     	; 0x2f16 <vfprintf+0xca>
    2f38:	68 94       	set
    2f3a:	54 f8       	bld	r5, 4
    2f3c:	ec cf       	rjmp	.-40     	; 0x2f16 <vfprintf+0xca>
    2f3e:	42 9c       	mul	r4, r2
    2f40:	20 0d       	add	r18, r0
    2f42:	11 24       	eor	r1, r1
    2f44:	42 2e       	mov	r4, r18
    2f46:	68 94       	set
    2f48:	55 f8       	bld	r5, 5
    2f4a:	e5 cf       	rjmp	.-54     	; 0x2f16 <vfprintf+0xca>
    2f4c:	8e 32       	cpi	r24, 0x2E	; 46
    2f4e:	29 f4       	brne	.+10     	; 0x2f5a <vfprintf+0x10e>
    2f50:	56 fc       	sbrc	r5, 6
    2f52:	f7 c0       	rjmp	.+494    	; 0x3142 <vfprintf+0x2f6>
    2f54:	68 94       	set
    2f56:	56 f8       	bld	r5, 6
    2f58:	de cf       	rjmp	.-68     	; 0x2f16 <vfprintf+0xca>
    2f5a:	8c 36       	cpi	r24, 0x6C	; 108
    2f5c:	19 f4       	brne	.+6      	; 0x2f64 <vfprintf+0x118>
    2f5e:	68 94       	set
    2f60:	57 f8       	bld	r5, 7
    2f62:	d9 cf       	rjmp	.-78     	; 0x2f16 <vfprintf+0xca>
    2f64:	88 36       	cpi	r24, 0x68	; 104
    2f66:	b9 f2       	breq	.-82     	; 0x2f16 <vfprintf+0xca>
    2f68:	98 2f       	mov	r25, r24
    2f6a:	9f 7d       	andi	r25, 0xDF	; 223
    2f6c:	95 54       	subi	r25, 0x45	; 69
    2f6e:	93 30       	cpi	r25, 0x03	; 3
    2f70:	c0 f0       	brcs	.+48     	; 0x2fa2 <vfprintf+0x156>
    2f72:	83 36       	cpi	r24, 0x63	; 99
    2f74:	a1 f1       	breq	.+104    	; 0x2fde <vfprintf+0x192>
    2f76:	83 37       	cpi	r24, 0x73	; 115
    2f78:	c1 f1       	breq	.+112    	; 0x2fea <vfprintf+0x19e>
    2f7a:	83 35       	cpi	r24, 0x53	; 83
    2f7c:	09 f0       	breq	.+2      	; 0x2f80 <vfprintf+0x134>
    2f7e:	5b c0       	rjmp	.+182    	; 0x3036 <vfprintf+0x1ea>
    2f80:	d8 01       	movw	r26, r16
    2f82:	cd 90       	ld	r12, X+
    2f84:	dd 90       	ld	r13, X+
    2f86:	8d 01       	movw	r16, r26
    2f88:	6b 2d       	mov	r22, r11
    2f8a:	70 e0       	ldi	r23, 0x00	; 0
    2f8c:	56 fc       	sbrc	r5, 6
    2f8e:	02 c0       	rjmp	.+4      	; 0x2f94 <vfprintf+0x148>
    2f90:	6f ef       	ldi	r22, 0xFF	; 255
    2f92:	7f ef       	ldi	r23, 0xFF	; 255
    2f94:	c6 01       	movw	r24, r12
    2f96:	0e 94 22 19 	call	0x3244	; 0x3244 <strnlen_P>
    2f9a:	5c 01       	movw	r10, r24
    2f9c:	68 94       	set
    2f9e:	57 f8       	bld	r5, 7
    2fa0:	0a c0       	rjmp	.+20     	; 0x2fb6 <vfprintf+0x16a>
    2fa2:	0c 5f       	subi	r16, 0xFC	; 252
    2fa4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa6:	ef e3       	ldi	r30, 0x3F	; 63
    2fa8:	e9 83       	std	Y+1, r30	; 0x01
    2faa:	aa 24       	eor	r10, r10
    2fac:	a3 94       	inc	r10
    2fae:	b1 2c       	mov	r11, r1
    2fb0:	64 01       	movw	r12, r8
    2fb2:	e8 94       	clt
    2fb4:	57 f8       	bld	r5, 7
    2fb6:	53 fc       	sbrc	r5, 3
    2fb8:	04 c0       	rjmp	.+8      	; 0x2fc2 <vfprintf+0x176>
    2fba:	4a 14       	cp	r4, r10
    2fbc:	1b 04       	cpc	r1, r11
    2fbe:	09 f0       	breq	.+2      	; 0x2fc2 <vfprintf+0x176>
    2fc0:	18 f5       	brcc	.+70     	; 0x3008 <vfprintf+0x1bc>
    2fc2:	34 2c       	mov	r3, r4
    2fc4:	a1 14       	cp	r10, r1
    2fc6:	b1 04       	cpc	r11, r1
    2fc8:	31 f5       	brne	.+76     	; 0x3016 <vfprintf+0x1ca>
    2fca:	33 20       	and	r3, r3
    2fcc:	09 f4       	brne	.+2      	; 0x2fd0 <vfprintf+0x184>
    2fce:	69 cf       	rjmp	.-302    	; 0x2ea2 <vfprintf+0x56>
    2fd0:	b7 01       	movw	r22, r14
    2fd2:	80 e2       	ldi	r24, 0x20	; 32
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	0e 94 38 19 	call	0x3270	; 0x3270 <fputc>
    2fda:	3a 94       	dec	r3
    2fdc:	f6 cf       	rjmp	.-20     	; 0x2fca <vfprintf+0x17e>
    2fde:	d8 01       	movw	r26, r16
    2fe0:	8c 91       	ld	r24, X
    2fe2:	89 83       	std	Y+1, r24	; 0x01
    2fe4:	0e 5f       	subi	r16, 0xFE	; 254
    2fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe8:	e0 cf       	rjmp	.-64     	; 0x2faa <vfprintf+0x15e>
    2fea:	f8 01       	movw	r30, r16
    2fec:	c1 90       	ld	r12, Z+
    2fee:	d1 90       	ld	r13, Z+
    2ff0:	8f 01       	movw	r16, r30
    2ff2:	6b 2d       	mov	r22, r11
    2ff4:	70 e0       	ldi	r23, 0x00	; 0
    2ff6:	56 fc       	sbrc	r5, 6
    2ff8:	02 c0       	rjmp	.+4      	; 0x2ffe <vfprintf+0x1b2>
    2ffa:	6f ef       	ldi	r22, 0xFF	; 255
    2ffc:	7f ef       	ldi	r23, 0xFF	; 255
    2ffe:	c6 01       	movw	r24, r12
    3000:	0e 94 2d 19 	call	0x325a	; 0x325a <strnlen>
    3004:	5c 01       	movw	r10, r24
    3006:	d5 cf       	rjmp	.-86     	; 0x2fb2 <vfprintf+0x166>
    3008:	b7 01       	movw	r22, r14
    300a:	80 e2       	ldi	r24, 0x20	; 32
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	0e 94 38 19 	call	0x3270	; 0x3270 <fputc>
    3012:	4a 94       	dec	r4
    3014:	d2 cf       	rjmp	.-92     	; 0x2fba <vfprintf+0x16e>
    3016:	f6 01       	movw	r30, r12
    3018:	57 fc       	sbrc	r5, 7
    301a:	85 91       	lpm	r24, Z+
    301c:	57 fe       	sbrs	r5, 7
    301e:	81 91       	ld	r24, Z+
    3020:	6f 01       	movw	r12, r30
    3022:	b7 01       	movw	r22, r14
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	0e 94 38 19 	call	0x3270	; 0x3270 <fputc>
    302a:	31 10       	cpse	r3, r1
    302c:	3a 94       	dec	r3
    302e:	b1 e0       	ldi	r27, 0x01	; 1
    3030:	ab 1a       	sub	r10, r27
    3032:	b1 08       	sbc	r11, r1
    3034:	c7 cf       	rjmp	.-114    	; 0x2fc4 <vfprintf+0x178>
    3036:	84 36       	cpi	r24, 0x64	; 100
    3038:	19 f0       	breq	.+6      	; 0x3040 <vfprintf+0x1f4>
    303a:	89 36       	cpi	r24, 0x69	; 105
    303c:	09 f0       	breq	.+2      	; 0x3040 <vfprintf+0x1f4>
    303e:	71 c0       	rjmp	.+226    	; 0x3122 <vfprintf+0x2d6>
    3040:	f8 01       	movw	r30, r16
    3042:	57 fe       	sbrs	r5, 7
    3044:	67 c0       	rjmp	.+206    	; 0x3114 <vfprintf+0x2c8>
    3046:	61 91       	ld	r22, Z+
    3048:	71 91       	ld	r23, Z+
    304a:	81 91       	ld	r24, Z+
    304c:	91 91       	ld	r25, Z+
    304e:	8f 01       	movw	r16, r30
    3050:	e5 2d       	mov	r30, r5
    3052:	ef 76       	andi	r30, 0x6F	; 111
    3054:	de 2e       	mov	r13, r30
    3056:	97 ff       	sbrs	r25, 7
    3058:	09 c0       	rjmp	.+18     	; 0x306c <vfprintf+0x220>
    305a:	90 95       	com	r25
    305c:	80 95       	com	r24
    305e:	70 95       	com	r23
    3060:	61 95       	neg	r22
    3062:	7f 4f       	sbci	r23, 0xFF	; 255
    3064:	8f 4f       	sbci	r24, 0xFF	; 255
    3066:	9f 4f       	sbci	r25, 0xFF	; 255
    3068:	68 94       	set
    306a:	d7 f8       	bld	r13, 7
    306c:	2a e0       	ldi	r18, 0x0A	; 10
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	a4 01       	movw	r20, r8
    3072:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__ultoa_invert>
    3076:	c8 2e       	mov	r12, r24
    3078:	c8 18       	sub	r12, r8
    307a:	ac 2c       	mov	r10, r12
    307c:	5d 2c       	mov	r5, r13
    307e:	d6 fe       	sbrs	r13, 6
    3080:	0c c0       	rjmp	.+24     	; 0x309a <vfprintf+0x24e>
    3082:	e8 94       	clt
    3084:	50 f8       	bld	r5, 0
    3086:	cb 14       	cp	r12, r11
    3088:	40 f4       	brcc	.+16     	; 0x309a <vfprintf+0x24e>
    308a:	d4 fe       	sbrs	r13, 4
    308c:	05 c0       	rjmp	.+10     	; 0x3098 <vfprintf+0x24c>
    308e:	d2 fc       	sbrc	r13, 2
    3090:	03 c0       	rjmp	.+6      	; 0x3098 <vfprintf+0x24c>
    3092:	5d 2d       	mov	r21, r13
    3094:	5e 7e       	andi	r21, 0xEE	; 238
    3096:	55 2e       	mov	r5, r21
    3098:	ab 2c       	mov	r10, r11
    309a:	54 fe       	sbrs	r5, 4
    309c:	a8 c0       	rjmp	.+336    	; 0x31ee <vfprintf+0x3a2>
    309e:	fe 01       	movw	r30, r28
    30a0:	ec 0d       	add	r30, r12
    30a2:	f1 1d       	adc	r31, r1
    30a4:	80 81       	ld	r24, Z
    30a6:	80 33       	cpi	r24, 0x30	; 48
    30a8:	09 f0       	breq	.+2      	; 0x30ac <vfprintf+0x260>
    30aa:	9a c0       	rjmp	.+308    	; 0x31e0 <vfprintf+0x394>
    30ac:	65 2d       	mov	r22, r5
    30ae:	69 7e       	andi	r22, 0xE9	; 233
    30b0:	56 2e       	mov	r5, r22
    30b2:	75 2d       	mov	r23, r5
    30b4:	78 70       	andi	r23, 0x08	; 8
    30b6:	37 2e       	mov	r3, r23
    30b8:	53 fc       	sbrc	r5, 3
    30ba:	a8 c0       	rjmp	.+336    	; 0x320c <vfprintf+0x3c0>
    30bc:	50 fe       	sbrs	r5, 0
    30be:	a2 c0       	rjmp	.+324    	; 0x3204 <vfprintf+0x3b8>
    30c0:	bc 2c       	mov	r11, r12
    30c2:	a4 14       	cp	r10, r4
    30c4:	10 f4       	brcc	.+4      	; 0x30ca <vfprintf+0x27e>
    30c6:	b4 0c       	add	r11, r4
    30c8:	ba 18       	sub	r11, r10
    30ca:	54 fe       	sbrs	r5, 4
    30cc:	a5 c0       	rjmp	.+330    	; 0x3218 <vfprintf+0x3cc>
    30ce:	b7 01       	movw	r22, r14
    30d0:	80 e3       	ldi	r24, 0x30	; 48
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	0e 94 38 19 	call	0x3270	; 0x3270 <fputc>
    30d8:	52 fe       	sbrs	r5, 2
    30da:	07 c0       	rjmp	.+14     	; 0x30ea <vfprintf+0x29e>
    30dc:	88 e7       	ldi	r24, 0x78	; 120
    30de:	51 fc       	sbrc	r5, 1
    30e0:	88 e5       	ldi	r24, 0x58	; 88
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	b7 01       	movw	r22, r14
    30e6:	0e 94 38 19 	call	0x3270	; 0x3270 <fputc>
    30ea:	cb 14       	cp	r12, r11
    30ec:	08 f4       	brcc	.+2      	; 0x30f0 <vfprintf+0x2a4>
    30ee:	a0 c0       	rjmp	.+320    	; 0x3230 <vfprintf+0x3e4>
    30f0:	ca 94       	dec	r12
    30f2:	d1 2c       	mov	r13, r1
    30f4:	8f ef       	ldi	r24, 0xFF	; 255
    30f6:	c8 1a       	sub	r12, r24
    30f8:	d8 0a       	sbc	r13, r24
    30fa:	c8 0c       	add	r12, r8
    30fc:	d9 1c       	adc	r13, r9
    30fe:	d6 01       	movw	r26, r12
    3100:	8e 91       	ld	r24, -X
    3102:	6d 01       	movw	r12, r26
    3104:	b7 01       	movw	r22, r14
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	0e 94 38 19 	call	0x3270	; 0x3270 <fputc>
    310c:	8c 14       	cp	r8, r12
    310e:	9d 04       	cpc	r9, r13
    3110:	b1 f7       	brne	.-20     	; 0x30fe <vfprintf+0x2b2>
    3112:	5b cf       	rjmp	.-330    	; 0x2fca <vfprintf+0x17e>
    3114:	61 91       	ld	r22, Z+
    3116:	71 91       	ld	r23, Z+
    3118:	07 2e       	mov	r0, r23
    311a:	00 0c       	add	r0, r0
    311c:	88 0b       	sbc	r24, r24
    311e:	99 0b       	sbc	r25, r25
    3120:	96 cf       	rjmp	.-212    	; 0x304e <vfprintf+0x202>
    3122:	d5 2c       	mov	r13, r5
    3124:	e8 94       	clt
    3126:	d4 f8       	bld	r13, 4
    3128:	2a e0       	ldi	r18, 0x0A	; 10
    312a:	85 37       	cpi	r24, 0x75	; 117
    312c:	d1 f1       	breq	.+116    	; 0x31a2 <vfprintf+0x356>
    312e:	f5 2d       	mov	r31, r5
    3130:	f9 7f       	andi	r31, 0xF9	; 249
    3132:	df 2e       	mov	r13, r31
    3134:	80 37       	cpi	r24, 0x70	; 112
    3136:	49 f1       	breq	.+82     	; 0x318a <vfprintf+0x33e>
    3138:	00 f5       	brcc	.+64     	; 0x317a <vfprintf+0x32e>
    313a:	88 35       	cpi	r24, 0x58	; 88
    313c:	49 f1       	breq	.+82     	; 0x3190 <vfprintf+0x344>
    313e:	8f 36       	cpi	r24, 0x6F	; 111
    3140:	79 f1       	breq	.+94     	; 0x31a0 <vfprintf+0x354>
    3142:	f7 01       	movw	r30, r14
    3144:	86 81       	ldd	r24, Z+6	; 0x06
    3146:	97 81       	ldd	r25, Z+7	; 0x07
    3148:	2f 96       	adiw	r28, 0x0f	; 15
    314a:	0f b6       	in	r0, 0x3f	; 63
    314c:	f8 94       	cli
    314e:	de bf       	out	0x3e, r29	; 62
    3150:	0f be       	out	0x3f, r0	; 63
    3152:	cd bf       	out	0x3d, r28	; 61
    3154:	df 91       	pop	r29
    3156:	cf 91       	pop	r28
    3158:	1f 91       	pop	r17
    315a:	0f 91       	pop	r16
    315c:	ff 90       	pop	r15
    315e:	ef 90       	pop	r14
    3160:	df 90       	pop	r13
    3162:	cf 90       	pop	r12
    3164:	bf 90       	pop	r11
    3166:	af 90       	pop	r10
    3168:	9f 90       	pop	r9
    316a:	8f 90       	pop	r8
    316c:	7f 90       	pop	r7
    316e:	6f 90       	pop	r6
    3170:	5f 90       	pop	r5
    3172:	4f 90       	pop	r4
    3174:	3f 90       	pop	r3
    3176:	2f 90       	pop	r2
    3178:	08 95       	ret
    317a:	88 37       	cpi	r24, 0x78	; 120
    317c:	11 f7       	brne	.-60     	; 0x3142 <vfprintf+0x2f6>
    317e:	d4 fe       	sbrs	r13, 4
    3180:	02 c0       	rjmp	.+4      	; 0x3186 <vfprintf+0x33a>
    3182:	68 94       	set
    3184:	d2 f8       	bld	r13, 2
    3186:	20 e1       	ldi	r18, 0x10	; 16
    3188:	0c c0       	rjmp	.+24     	; 0x31a2 <vfprintf+0x356>
    318a:	68 94       	set
    318c:	d4 f8       	bld	r13, 4
    318e:	f7 cf       	rjmp	.-18     	; 0x317e <vfprintf+0x332>
    3190:	54 fe       	sbrs	r5, 4
    3192:	03 c0       	rjmp	.+6      	; 0x319a <vfprintf+0x34e>
    3194:	2f 2f       	mov	r18, r31
    3196:	26 60       	ori	r18, 0x06	; 6
    3198:	d2 2e       	mov	r13, r18
    319a:	20 e1       	ldi	r18, 0x10	; 16
    319c:	32 e0       	ldi	r19, 0x02	; 2
    319e:	02 c0       	rjmp	.+4      	; 0x31a4 <vfprintf+0x358>
    31a0:	28 e0       	ldi	r18, 0x08	; 8
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	f8 01       	movw	r30, r16
    31a6:	d7 fe       	sbrs	r13, 7
    31a8:	15 c0       	rjmp	.+42     	; 0x31d4 <vfprintf+0x388>
    31aa:	41 91       	ld	r20, Z+
    31ac:	51 91       	ld	r21, Z+
    31ae:	61 91       	ld	r22, Z+
    31b0:	71 91       	ld	r23, Z+
    31b2:	4c 87       	std	Y+12, r20	; 0x0c
    31b4:	5d 87       	std	Y+13, r21	; 0x0d
    31b6:	6e 87       	std	Y+14, r22	; 0x0e
    31b8:	7f 87       	std	Y+15, r23	; 0x0f
    31ba:	8f 01       	movw	r16, r30
    31bc:	a4 01       	movw	r20, r8
    31be:	6c 85       	ldd	r22, Y+12	; 0x0c
    31c0:	7d 85       	ldd	r23, Y+13	; 0x0d
    31c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    31c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    31c6:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__ultoa_invert>
    31ca:	c8 2e       	mov	r12, r24
    31cc:	c8 18       	sub	r12, r8
    31ce:	e8 94       	clt
    31d0:	d7 f8       	bld	r13, 7
    31d2:	53 cf       	rjmp	.-346    	; 0x307a <vfprintf+0x22e>
    31d4:	81 91       	ld	r24, Z+
    31d6:	91 91       	ld	r25, Z+
    31d8:	ac 01       	movw	r20, r24
    31da:	70 e0       	ldi	r23, 0x00	; 0
    31dc:	60 e0       	ldi	r22, 0x00	; 0
    31de:	e9 cf       	rjmp	.-46     	; 0x31b2 <vfprintf+0x366>
    31e0:	52 fc       	sbrc	r5, 2
    31e2:	02 c0       	rjmp	.+4      	; 0x31e8 <vfprintf+0x39c>
    31e4:	a3 94       	inc	r10
    31e6:	65 cf       	rjmp	.-310    	; 0x30b2 <vfprintf+0x266>
    31e8:	a3 94       	inc	r10
    31ea:	a3 94       	inc	r10
    31ec:	62 cf       	rjmp	.-316    	; 0x30b2 <vfprintf+0x266>
    31ee:	85 2d       	mov	r24, r5
    31f0:	86 78       	andi	r24, 0x86	; 134
    31f2:	09 f4       	brne	.+2      	; 0x31f6 <vfprintf+0x3aa>
    31f4:	5e cf       	rjmp	.-324    	; 0x30b2 <vfprintf+0x266>
    31f6:	f6 cf       	rjmp	.-20     	; 0x31e4 <vfprintf+0x398>
    31f8:	b7 01       	movw	r22, r14
    31fa:	80 e2       	ldi	r24, 0x20	; 32
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	0e 94 38 19 	call	0x3270	; 0x3270 <fputc>
    3202:	a3 94       	inc	r10
    3204:	a4 14       	cp	r10, r4
    3206:	c0 f3       	brcs	.-16     	; 0x31f8 <vfprintf+0x3ac>
    3208:	31 2c       	mov	r3, r1
    320a:	5f cf       	rjmp	.-322    	; 0x30ca <vfprintf+0x27e>
    320c:	34 2c       	mov	r3, r4
    320e:	3a 18       	sub	r3, r10
    3210:	a4 14       	cp	r10, r4
    3212:	08 f4       	brcc	.+2      	; 0x3216 <vfprintf+0x3ca>
    3214:	5a cf       	rjmp	.-332    	; 0x30ca <vfprintf+0x27e>
    3216:	f8 cf       	rjmp	.-16     	; 0x3208 <vfprintf+0x3bc>
    3218:	85 2d       	mov	r24, r5
    321a:	86 78       	andi	r24, 0x86	; 134
    321c:	09 f4       	brne	.+2      	; 0x3220 <vfprintf+0x3d4>
    321e:	65 cf       	rjmp	.-310    	; 0x30ea <vfprintf+0x29e>
    3220:	8b e2       	ldi	r24, 0x2B	; 43
    3222:	51 fe       	sbrs	r5, 1
    3224:	80 e2       	ldi	r24, 0x20	; 32
    3226:	57 fc       	sbrc	r5, 7
    3228:	8d e2       	ldi	r24, 0x2D	; 45
    322a:	b7 01       	movw	r22, r14
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	5b cf       	rjmp	.-330    	; 0x30e6 <vfprintf+0x29a>
    3230:	b7 01       	movw	r22, r14
    3232:	80 e3       	ldi	r24, 0x30	; 48
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	0e 94 38 19 	call	0x3270	; 0x3270 <fputc>
    323a:	ba 94       	dec	r11
    323c:	56 cf       	rjmp	.-340    	; 0x30ea <vfprintf+0x29e>
    323e:	8f ef       	ldi	r24, 0xFF	; 255
    3240:	9f ef       	ldi	r25, 0xFF	; 255
    3242:	82 cf       	rjmp	.-252    	; 0x3148 <vfprintf+0x2fc>

00003244 <strnlen_P>:
    3244:	fc 01       	movw	r30, r24
    3246:	05 90       	lpm	r0, Z+
    3248:	61 50       	subi	r22, 0x01	; 1
    324a:	70 40       	sbci	r23, 0x00	; 0
    324c:	01 10       	cpse	r0, r1
    324e:	d8 f7       	brcc	.-10     	; 0x3246 <strnlen_P+0x2>
    3250:	80 95       	com	r24
    3252:	90 95       	com	r25
    3254:	8e 0f       	add	r24, r30
    3256:	9f 1f       	adc	r25, r31
    3258:	08 95       	ret

0000325a <strnlen>:
    325a:	fc 01       	movw	r30, r24
    325c:	61 50       	subi	r22, 0x01	; 1
    325e:	70 40       	sbci	r23, 0x00	; 0
    3260:	01 90       	ld	r0, Z+
    3262:	01 10       	cpse	r0, r1
    3264:	d8 f7       	brcc	.-10     	; 0x325c <strnlen+0x2>
    3266:	80 95       	com	r24
    3268:	90 95       	com	r25
    326a:	8e 0f       	add	r24, r30
    326c:	9f 1f       	adc	r25, r31
    326e:	08 95       	ret

00003270 <fputc>:
    3270:	0f 93       	push	r16
    3272:	1f 93       	push	r17
    3274:	cf 93       	push	r28
    3276:	df 93       	push	r29
    3278:	18 2f       	mov	r17, r24
    327a:	09 2f       	mov	r16, r25
    327c:	eb 01       	movw	r28, r22
    327e:	8b 81       	ldd	r24, Y+3	; 0x03
    3280:	81 fd       	sbrc	r24, 1
    3282:	09 c0       	rjmp	.+18     	; 0x3296 <fputc+0x26>
    3284:	1f ef       	ldi	r17, 0xFF	; 255
    3286:	0f ef       	ldi	r16, 0xFF	; 255
    3288:	81 2f       	mov	r24, r17
    328a:	90 2f       	mov	r25, r16
    328c:	df 91       	pop	r29
    328e:	cf 91       	pop	r28
    3290:	1f 91       	pop	r17
    3292:	0f 91       	pop	r16
    3294:	08 95       	ret
    3296:	82 ff       	sbrs	r24, 2
    3298:	14 c0       	rjmp	.+40     	; 0x32c2 <fputc+0x52>
    329a:	2e 81       	ldd	r18, Y+6	; 0x06
    329c:	3f 81       	ldd	r19, Y+7	; 0x07
    329e:	8c 81       	ldd	r24, Y+4	; 0x04
    32a0:	9d 81       	ldd	r25, Y+5	; 0x05
    32a2:	28 17       	cp	r18, r24
    32a4:	39 07       	cpc	r19, r25
    32a6:	3c f4       	brge	.+14     	; 0x32b6 <fputc+0x46>
    32a8:	e8 81       	ld	r30, Y
    32aa:	f9 81       	ldd	r31, Y+1	; 0x01
    32ac:	cf 01       	movw	r24, r30
    32ae:	01 96       	adiw	r24, 0x01	; 1
    32b0:	99 83       	std	Y+1, r25	; 0x01
    32b2:	88 83       	st	Y, r24
    32b4:	10 83       	st	Z, r17
    32b6:	8e 81       	ldd	r24, Y+6	; 0x06
    32b8:	9f 81       	ldd	r25, Y+7	; 0x07
    32ba:	01 96       	adiw	r24, 0x01	; 1
    32bc:	9f 83       	std	Y+7, r25	; 0x07
    32be:	8e 83       	std	Y+6, r24	; 0x06
    32c0:	e3 cf       	rjmp	.-58     	; 0x3288 <fputc+0x18>
    32c2:	e8 85       	ldd	r30, Y+8	; 0x08
    32c4:	f9 85       	ldd	r31, Y+9	; 0x09
    32c6:	81 2f       	mov	r24, r17
    32c8:	19 95       	eicall
    32ca:	89 2b       	or	r24, r25
    32cc:	a1 f3       	breq	.-24     	; 0x32b6 <fputc+0x46>
    32ce:	da cf       	rjmp	.-76     	; 0x3284 <fputc+0x14>

000032d0 <__ultoa_invert>:
    32d0:	fa 01       	movw	r30, r20
    32d2:	aa 27       	eor	r26, r26
    32d4:	28 30       	cpi	r18, 0x08	; 8
    32d6:	51 f1       	breq	.+84     	; 0x332c <__ultoa_invert+0x5c>
    32d8:	20 31       	cpi	r18, 0x10	; 16
    32da:	81 f1       	breq	.+96     	; 0x333c <__ultoa_invert+0x6c>
    32dc:	e8 94       	clt
    32de:	6f 93       	push	r22
    32e0:	6e 7f       	andi	r22, 0xFE	; 254
    32e2:	6e 5f       	subi	r22, 0xFE	; 254
    32e4:	7f 4f       	sbci	r23, 0xFF	; 255
    32e6:	8f 4f       	sbci	r24, 0xFF	; 255
    32e8:	9f 4f       	sbci	r25, 0xFF	; 255
    32ea:	af 4f       	sbci	r26, 0xFF	; 255
    32ec:	b1 e0       	ldi	r27, 0x01	; 1
    32ee:	3e d0       	rcall	.+124    	; 0x336c <__ultoa_invert+0x9c>
    32f0:	b4 e0       	ldi	r27, 0x04	; 4
    32f2:	3c d0       	rcall	.+120    	; 0x336c <__ultoa_invert+0x9c>
    32f4:	67 0f       	add	r22, r23
    32f6:	78 1f       	adc	r23, r24
    32f8:	89 1f       	adc	r24, r25
    32fa:	9a 1f       	adc	r25, r26
    32fc:	a1 1d       	adc	r26, r1
    32fe:	68 0f       	add	r22, r24
    3300:	79 1f       	adc	r23, r25
    3302:	8a 1f       	adc	r24, r26
    3304:	91 1d       	adc	r25, r1
    3306:	a1 1d       	adc	r26, r1
    3308:	6a 0f       	add	r22, r26
    330a:	71 1d       	adc	r23, r1
    330c:	81 1d       	adc	r24, r1
    330e:	91 1d       	adc	r25, r1
    3310:	a1 1d       	adc	r26, r1
    3312:	20 d0       	rcall	.+64     	; 0x3354 <__ultoa_invert+0x84>
    3314:	09 f4       	brne	.+2      	; 0x3318 <__ultoa_invert+0x48>
    3316:	68 94       	set
    3318:	3f 91       	pop	r19
    331a:	2a e0       	ldi	r18, 0x0A	; 10
    331c:	26 9f       	mul	r18, r22
    331e:	11 24       	eor	r1, r1
    3320:	30 19       	sub	r19, r0
    3322:	30 5d       	subi	r19, 0xD0	; 208
    3324:	31 93       	st	Z+, r19
    3326:	de f6       	brtc	.-74     	; 0x32de <__ultoa_invert+0xe>
    3328:	cf 01       	movw	r24, r30
    332a:	08 95       	ret
    332c:	46 2f       	mov	r20, r22
    332e:	47 70       	andi	r20, 0x07	; 7
    3330:	40 5d       	subi	r20, 0xD0	; 208
    3332:	41 93       	st	Z+, r20
    3334:	b3 e0       	ldi	r27, 0x03	; 3
    3336:	0f d0       	rcall	.+30     	; 0x3356 <__ultoa_invert+0x86>
    3338:	c9 f7       	brne	.-14     	; 0x332c <__ultoa_invert+0x5c>
    333a:	f6 cf       	rjmp	.-20     	; 0x3328 <__ultoa_invert+0x58>
    333c:	46 2f       	mov	r20, r22
    333e:	4f 70       	andi	r20, 0x0F	; 15
    3340:	40 5d       	subi	r20, 0xD0	; 208
    3342:	4a 33       	cpi	r20, 0x3A	; 58
    3344:	18 f0       	brcs	.+6      	; 0x334c <__ultoa_invert+0x7c>
    3346:	49 5d       	subi	r20, 0xD9	; 217
    3348:	31 fd       	sbrc	r19, 1
    334a:	40 52       	subi	r20, 0x20	; 32
    334c:	41 93       	st	Z+, r20
    334e:	02 d0       	rcall	.+4      	; 0x3354 <__ultoa_invert+0x84>
    3350:	a9 f7       	brne	.-22     	; 0x333c <__ultoa_invert+0x6c>
    3352:	ea cf       	rjmp	.-44     	; 0x3328 <__ultoa_invert+0x58>
    3354:	b4 e0       	ldi	r27, 0x04	; 4
    3356:	a6 95       	lsr	r26
    3358:	97 95       	ror	r25
    335a:	87 95       	ror	r24
    335c:	77 95       	ror	r23
    335e:	67 95       	ror	r22
    3360:	ba 95       	dec	r27
    3362:	c9 f7       	brne	.-14     	; 0x3356 <__ultoa_invert+0x86>
    3364:	00 97       	sbiw	r24, 0x00	; 0
    3366:	61 05       	cpc	r22, r1
    3368:	71 05       	cpc	r23, r1
    336a:	08 95       	ret
    336c:	9b 01       	movw	r18, r22
    336e:	ac 01       	movw	r20, r24
    3370:	0a 2e       	mov	r0, r26
    3372:	06 94       	lsr	r0
    3374:	57 95       	ror	r21
    3376:	47 95       	ror	r20
    3378:	37 95       	ror	r19
    337a:	27 95       	ror	r18
    337c:	ba 95       	dec	r27
    337e:	c9 f7       	brne	.-14     	; 0x3372 <__ultoa_invert+0xa2>
    3380:	62 0f       	add	r22, r18
    3382:	73 1f       	adc	r23, r19
    3384:	84 1f       	adc	r24, r20
    3386:	95 1f       	adc	r25, r21
    3388:	a0 1d       	adc	r26, r0
    338a:	08 95       	ret

0000338c <eeprom_read_byte>:
    338c:	f9 99       	sbic	0x1f, 1	; 31
    338e:	fe cf       	rjmp	.-4      	; 0x338c <eeprom_read_byte>
    3390:	92 bd       	out	0x22, r25	; 34
    3392:	81 bd       	out	0x21, r24	; 33
    3394:	f8 9a       	sbi	0x1f, 0	; 31
    3396:	99 27       	eor	r25, r25
    3398:	80 b5       	in	r24, 0x20	; 32
    339a:	08 95       	ret

0000339c <eeprom_update_byte>:
    339c:	26 2f       	mov	r18, r22

0000339e <eeprom_update_r18>:
    339e:	f9 99       	sbic	0x1f, 1	; 31
    33a0:	fe cf       	rjmp	.-4      	; 0x339e <eeprom_update_r18>
    33a2:	92 bd       	out	0x22, r25	; 34
    33a4:	81 bd       	out	0x21, r24	; 33
    33a6:	f8 9a       	sbi	0x1f, 0	; 31
    33a8:	01 97       	sbiw	r24, 0x01	; 1
    33aa:	00 b4       	in	r0, 0x20	; 32
    33ac:	02 16       	cp	r0, r18
    33ae:	39 f0       	breq	.+14     	; 0x33be <eeprom_update_r18+0x20>
    33b0:	1f ba       	out	0x1f, r1	; 31
    33b2:	20 bd       	out	0x20, r18	; 32
    33b4:	0f b6       	in	r0, 0x3f	; 63
    33b6:	f8 94       	cli
    33b8:	fa 9a       	sbi	0x1f, 2	; 31
    33ba:	f9 9a       	sbi	0x1f, 1	; 31
    33bc:	0f be       	out	0x3f, r0	; 63
    33be:	08 95       	ret

000033c0 <_exit>:
    33c0:	f8 94       	cli

000033c2 <__stop_program>:
    33c2:	ff cf       	rjmp	.-2      	; 0x33c2 <__stop_program>
    33c4:	ae 0c       	add	r10, r14
    33c6:	c9 0c       	add	r12, r9
    33c8:	c4 0c       	add	r12, r4
    33ca:	f9 0c       	add	r15, r9
    33cc:	28 0d       	add	r18, r8
    33ce:	86 0d       	add	r24, r6
    33d0:	bf 0d       	add	r27, r15
    33d2:	19 0e       	add	r1, r25
    33d4:	56 0e       	add	r5, r22
    33d6:	83 0e       	add	r8, r19
    33d8:	2f 11       	cpse	r18, r15
    33da:	34 11       	cpse	r19, r4
    33dc:	37 11       	cpse	r19, r7
    33de:	3a 11       	cpse	r19, r10
    33e0:	3d 11       	cpse	r19, r13
    33e2:	40 11       	cpse	r20, r0
    33e4:	43 11       	cpse	r20, r3
