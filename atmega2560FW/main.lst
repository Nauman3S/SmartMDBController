   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.startup,"ax",@progbits
  12               	.global	main
  14               	main:
  15               	.LFB12:
  16               		.file 1 "main.c"
   1:main.c        **** //Main File
   2:main.c        **** 
   3:main.c        **** #ifndef F_CPU
   4:main.c        **** #define F_CPU 16000000UL
   5:main.c        **** #endif
   6:main.c        **** //1 second=15999999
   7:main.c        **** //1/2 second=7999999
   8:main.c        **** //1/400 seconds=3 99 99
   9:main.c        **** #include <avr/io.h>
  10:main.c        **** 
  11:main.c        **** #include <avr/interrupt.h>
  12:main.c        **** #include <avr/pgmspace.h>
  13:main.c        **** #include <inttypes.h>
  14:main.c        **** #include <util/delay.h>
  15:main.c        **** #include <stdlib.h>
  16:main.c        **** #include <stdio.h>
  17:main.c        **** //#include <util/delay.h>
  18:main.c        **** #include <stdint.h>
  19:main.c        **** #include "txSwitch.h"
  20:main.c        **** //#include "pushButtonHandle.h"
  21:main.c        **** 
  22:main.c        **** #include "usart.h"
  23:main.c        **** #include "mdb.h"
  24:main.c        **** #include "uplink.h"
  25:main.c        **** #include "millisF.h"
  26:main.c        **** //#include "EEPROMHandle.h"
  27:main.c        **** #include "vendSessionStates.h"
  28:main.c        **** 
  29:main.c        **** #define millisTimer 1
  30:main.c        **** #define waitForSec 0
  31:main.c        **** 
  32:main.c        **** #define onOffRelay 0
  33:main.c        **** #define simulation 0
  34:main.c        **** #if simulation == 1
  35:main.c        **** uint8_t simStartFlag = 0;
  36:main.c        **** uint8_t vendApproveFlag = 0;
  37:main.c        **** #endif
  38:main.c        **** uint8_t flagger = 0;
  39:main.c        **** int kVal = 0;
  40:main.c        **** uint8_t bootCounter = 0;
  41:main.c        **** uint8_t fl = 0;
  42:main.c        **** 
  43:main.c        **** // uint8_t writeDataToEEPROM();
  44:main.c        **** // uint8_t readDataFromEEPROM();
  45:main.c        **** 
  46:main.c        **** int main(void)
  47:main.c        **** {
  17               		.loc 1 47 1 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  48:main.c        **** 
  49:main.c        ****     // millis_init();
  50:main.c        **** 
  51:main.c        ****     setup_usart(0, 38400, 8, 'N', 1);
  23               		.loc 1 51 5 view .LVU1
  24 0000 EE24      		clr r14
  25 0002 E394      		inc r14
  26 0004 0EE4      		ldi r16,lo8(78)
  27 0006 28E0      		ldi r18,lo8(8)
  28 0008 40E0      		ldi r20,0
  29 000a 56E9      		ldi r21,lo8(-106)
  30 000c 60E0      		ldi r22,0
  31 000e 70E0      		ldi r23,0
  32 0010 80E0      		ldi r24,0
  33 0012 0E94 0000 		call setup_usart
  34               	.LVL0:
  52:main.c        ****     setup_usart(1, 9600, 9, 'N', 1); //orignal 9600
  35               		.loc 1 52 5 view .LVU2
  36 0016 29E0      		ldi r18,lo8(9)
  37 0018 40E8      		ldi r20,lo8(-128)
  38 001a 55E2      		ldi r21,lo8(37)
  39 001c 60E0      		ldi r22,0
  40 001e 70E0      		ldi r23,0
  41 0020 81E0      		ldi r24,lo8(1)
  42 0022 0E94 0000 		call setup_usart
  43               	.LVL1:
  53:main.c        ****     setup_usart(2, 9600, 8, 'N', 1);
  44               		.loc 1 53 5 view .LVU3
  45 0026 28E0      		ldi r18,lo8(8)
  46 0028 40E8      		ldi r20,lo8(-128)
  47 002a 55E2      		ldi r21,lo8(37)
  48 002c 60E0      		ldi r22,0
  49 002e 70E0      		ldi r23,0
  50 0030 82E0      		ldi r24,lo8(2)
  51 0032 0E94 0000 		call setup_usart
  52               	.LVL2:
  54:main.c        **** 
  55:main.c        ****     millis_init();
  53               		.loc 1 55 5 view .LVU4
  54 0036 0E94 0000 		call millis_init
  55               	.LVL3:
  56:main.c        ****     setupTxSwitch(PIN12);
  56               		.loc 1 56 5 view .LVU5
  57 003a 8CE0      		ldi r24,lo8(12)
  58 003c 0E94 0000 		call setupTxSwitch
  59               	.LVL4:
  57:main.c        ****     setupTxSwitch(PIN13);
  60               		.loc 1 57 5 view .LVU6
  61 0040 8DE0      		ldi r24,lo8(13)
  62 0042 0E94 0000 		call setupTxSwitch
  63               	.LVL5:
  58:main.c        **** 
  59:main.c        ****     txSwitchState(PIN13, 0); //was 1 initially
  64               		.loc 1 59 5 view .LVU7
  65 0046 60E0      		ldi r22,0
  66 0048 8DE0      		ldi r24,lo8(13)
  67 004a 0E94 0000 		call txSwitchState
  68               	.LVL6:
  60:main.c        ****     txSwitchState(PIN12, 1);
  69               		.loc 1 60 5 view .LVU8
  70 004e 61E0      		ldi r22,lo8(1)
  71 0050 8CE0      		ldi r24,lo8(12)
  72 0052 0E94 0000 		call txSwitchState
  73               	.LVL7:
  61:main.c        **** 
  62:main.c        **** #if waitForSec == 1
  63:main.c        **** 
  64:main.c        **** #endif
  65:main.c        ****     //_delay_ms(5000);
  66:main.c        ****     sei();
  74               		.loc 1 66 5 view .LVU9
  75               	/* #APP */
  76               	 ;  66 "main.c" 1
  77 0056 7894      		sei
  78               	 ;  0 "" 2
  67:main.c        **** 
  68:main.c        **** #if simulation == 1
  69:main.c        **** 
  70:main.c        **** #endif
  71:main.c        **** 
  72:main.c        ****     send_str_p(0, PSTR("MDB Arduino Mega is Setting Up\r\n"));
  79               		.loc 1 72 5 view .LVU10
  80               	/* #NOAPP */
  81               	.LBB2:
  82               		.loc 1 72 19 view .LVU11
  83               		.loc 1 72 19 view .LVU12
  84               	.LBE2:
  85               		.loc 1 72 5 is_stmt 0 view .LVU13
  86 0058 60E0      		ldi r22,lo8(__c.2)
  87 005a 70E0      		ldi r23,hi8(__c.2)
  88 005c 80E0      		ldi r24,0
  89 005e 0E94 0000 		call send_str_p
  90               	.LVL8:
  91               	.L2:
  73:main.c        **** 
  74:main.c        ****     while (1)
  92               		.loc 1 74 5 is_stmt 1 view .LVU14
  75:main.c        ****     {
  76:main.c        **** 
  77:main.c        ****         mdb_cmd_handler();
  93               		.loc 1 77 9 view .LVU15
  94 0062 0E94 0000 		call mdb_cmd_handler
  95               	.LVL9:
  78:main.c        ****         uplink_cmd_handler();
  96               		.loc 1 78 9 view .LVU16
  97 0066 0E94 0000 		call uplink_cmd_handler
  98               	.LVL10:
  79:main.c        **** 
  80:main.c        **** #if millisTimer == 1
  81:main.c        ****         if (getTimerState())
  99               		.loc 1 81 9 view .LVU17
 100               		.loc 1 81 13 is_stmt 0 view .LVU18
 101 006a 0E94 0000 		call getTimerState
 102               	.LVL11:
 103               		.loc 1 81 12 view .LVU19
 104 006e 8823      		tst r24
 105 0070 01F0      		breq .L2
 106               	.LBB3:
  82:main.c        ****         {
  83:main.c        ****             static millis_t lastChanged = 0;
 107               		.loc 1 83 13 is_stmt 1 view .LVU20
  84:main.c        ****             static millis_t lastChanged2 = 0;
 108               		.loc 1 84 13 view .LVU21
  85:main.c        ****             millis_t now = millis_get();
 109               		.loc 1 85 13 view .LVU22
 110               		.loc 1 85 28 is_stmt 0 view .LVU23
 111 0072 0E94 0000 		call millis_get
 112               	.LVL12:
 113 0076 6B01      		movw r12,r22
 114 0078 7C01      		movw r14,r24
 115               	.LVL13:
  86:main.c        **** 
  87:main.c        ****             //if(kVal>=0 && kVal<=50){
  88:main.c        ****             if (now - lastChanged >= 1000)
 116               		.loc 1 88 13 is_stmt 1 view .LVU24
 117               		.loc 1 88 21 is_stmt 0 view .LVU25
 118 007a 8091 0000 		lds r24,lastChanged.1
 119 007e 9091 0000 		lds r25,lastChanged.1+1
 120 0082 A091 0000 		lds r26,lastChanged.1+2
 121 0086 B091 0000 		lds r27,lastChanged.1+3
 122 008a A701      		movw r20,r14
 123 008c 9601      		movw r18,r12
 124 008e 281B      		sub r18,r24
 125 0090 390B      		sbc r19,r25
 126 0092 4A0B      		sbc r20,r26
 127 0094 5B0B      		sbc r21,r27
 128 0096 DA01      		movw r26,r20
 129 0098 C901      		movw r24,r18
 130               		.loc 1 88 16 view .LVU26
 131 009a 883E      		cpi r24,-24
 132 009c 9340      		sbci r25,3
 133 009e A105      		cpc r26,__zero_reg__
 134 00a0 B105      		cpc r27,__zero_reg__
 135 00a2 00F0      		brlo .L2
  89:main.c        ****             {
  90:main.c        **** 
  91:main.c        ****                 send_str_p(0, PSTR("5s Passed\r\n"));
 136               		.loc 1 91 17 is_stmt 1 view .LVU27
 137               	.LBB4:
 138               		.loc 1 91 31 view .LVU28
 139               		.loc 1 91 31 view .LVU29
 140               	.LBE4:
 141               		.loc 1 91 17 is_stmt 0 view .LVU30
 142 00a4 60E0      		ldi r22,lo8(__c.0)
 143 00a6 70E0      		ldi r23,hi8(__c.0)
 144 00a8 80E0      		ldi r24,0
 145 00aa 0E94 0000 		call send_str_p
 146               	.LVL14:
  92:main.c        ****                 //incrementTimerPass();
  93:main.c        ****                 timeHandler(getTimerPass());
 147               		.loc 1 93 17 is_stmt 1 view .LVU31
 148 00ae 0E94 0000 		call getTimerPass
 149               	.LVL15:
 150 00b2 0E94 0000 		call timeHandler
 151               	.LVL16:
  94:main.c        **** 
  95:main.c        ****                 lastChanged = now;
 152               		.loc 1 95 17 view .LVU32
 153               		.loc 1 95 29 is_stmt 0 view .LVU33
 154 00b6 C092 0000 		sts lastChanged.1,r12
 155 00ba D092 0000 		sts lastChanged.1+1,r13
 156 00be E092 0000 		sts lastChanged.1+2,r14
 157 00c2 F092 0000 		sts lastChanged.1+3,r15
 158 00c6 00C0      		rjmp .L2
 159               	.LBE3:
 160               		.cfi_endproc
 161               	.LFE12:
 163               		.section	.progmem.data,"a",@progbits
 166               	__c.0:
 167 0000 3573 2050 		.string	"5s Passed\r\n"
 167      6173 7365 
 167      640D 0A00 
 168               		.local	lastChanged.1
 169               		.comm	lastChanged.1,4,1
 172               	__c.2:
 173 000c 4D44 4220 		.string	"MDB Arduino Mega is Setting Up\r\n"
 173      4172 6475 
 173      696E 6F20 
 173      4D65 6761 
 173      2069 7320 
 174               	.global	fl
 175               		.section .bss
 178               	fl:
 179 0000 00        		.zero	1
 180               	.global	bootCounter
 183               	bootCounter:
 184 0001 00        		.zero	1
 185               	.global	kVal
 188               	kVal:
 189 0002 0000      		.zero	2
 190               	.global	flagger
 193               	flagger:
 194 0004 00        		.zero	1
 195               		.text
 196               	.Letext0:
 197               		.file 2 "/usr/avr/include/stdint.h"
 198               		.file 3 "millisF.h"
 199               		.file 4 "uplink.h"
 200               		.file 5 "mdb.h"
 201               		.file 6 "txSwitch.h"
 202               		.file 7 "usart.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccqQxKUb.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccqQxKUb.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccqQxKUb.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccqQxKUb.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccqQxKUb.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccqQxKUb.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccqQxKUb.s:14     .text.startup:0000000000000000 main
     /tmp/ccqQxKUb.s:172    .progmem.data:000000000000000c __c.2
                             .bss:0000000000000005 lastChanged.1
     /tmp/ccqQxKUb.s:166    .progmem.data:0000000000000000 __c.0
     /tmp/ccqQxKUb.s:178    .bss:0000000000000000 fl
     /tmp/ccqQxKUb.s:183    .bss:0000000000000001 bootCounter
     /tmp/ccqQxKUb.s:188    .bss:0000000000000002 kVal
     /tmp/ccqQxKUb.s:193    .bss:0000000000000004 flagger

UNDEFINED SYMBOLS
setup_usart
millis_init
setupTxSwitch
txSwitchState
send_str_p
mdb_cmd_handler
uplink_cmd_handler
getTimerState
millis_get
getTimerPass
timeHandler
__do_clear_bss
